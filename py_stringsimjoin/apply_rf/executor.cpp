/* Generated by Cython 0.28.4 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [], 
        "extra_compile_args": [
            "-O3", 
            "-ffast-math", 
            "-march=native", 
            "-fopenmp"
        ], 
        "extra_link_args": [
            "-fopenmp"
        ], 
        "language": "c++", 
        "name": "executor", 
        "sources": [
            "executor.pyx", 
            "node.cpp", 
            "predicatecpp.cpp", 
            "tree.cpp", 
            "rule.cpp", 
            "coverage.cpp"
        ]
    }, 
    "module_name": "executor"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_28_4"
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0; // PyThread_create_key reports success always
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif // TSS (Thread Specific Storage) API
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__executor
#define __PYX_HAVE_API__executor
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>
#include <set>
#include <string.h>
#include <string>
#include <map>
#include <stdio.h>
#include <stdlib.h>
#include "inverted_index.h"
#include "predicatecpp.h"
#include "node.h"
#include "coverage.h"
#include "rule.h"
#include "tree.h"
#include "string.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "executor.pyx",
  "stringsource",
};
/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif


/*--- Type declarations ---*/

/* "py_stringsimjoin/apply_rf/utils.pxd":9
 * 
 * 
 * ctypedef double (*token_simfnptr)(const vector[int]&, const vector[int]&) nogil             # <<<<<<<<<<<<<<
 * ctypedef double (*str_simfnptr)(const string&, const string&) nogil
 * 
 */
typedef double (*__pyx_t_16py_stringsimjoin_8apply_rf_5utils_token_simfnptr)(std::vector<int>  const &, std::vector<int>  const &);

/* "py_stringsimjoin/apply_rf/utils.pxd":10
 * 
 * ctypedef double (*token_simfnptr)(const vector[int]&, const vector[int]&) nogil
 * ctypedef double (*str_simfnptr)(const string&, const string&) nogil             # <<<<<<<<<<<<<<
 * 
 * ctypedef double (*simfnptr)(const vector[int]&, const vector[int]&) nogil
 */
typedef double (*__pyx_t_16py_stringsimjoin_8apply_rf_5utils_str_simfnptr)(std::string const &, std::string const &);

/* "py_stringsimjoin/apply_rf/utils.pxd":12
 * ctypedef double (*str_simfnptr)(const string&, const string&) nogil
 * 
 * ctypedef double (*simfnptr)(const vector[int]&, const vector[int]&) nogil             # <<<<<<<<<<<<<<
 * ctypedef double (*simfnptr_str)(vector[string]&, vector[string]&) nogil
 * ctypedef bool (*compfnptr)(double, double) nogil
 */
typedef double (*__pyx_t_16py_stringsimjoin_8apply_rf_5utils_simfnptr)(std::vector<int>  const &, std::vector<int>  const &);

/* "py_stringsimjoin/apply_rf/utils.pxd":13
 * 
 * ctypedef double (*simfnptr)(const vector[int]&, const vector[int]&) nogil
 * ctypedef double (*simfnptr_str)(vector[string]&, vector[string]&) nogil             # <<<<<<<<<<<<<<
 * ctypedef bool (*compfnptr)(double, double) nogil
 * 
 */
typedef double (*__pyx_t_16py_stringsimjoin_8apply_rf_5utils_simfnptr_str)(std::vector<std::string>  &, std::vector<std::string>  &);

/* "py_stringsimjoin/apply_rf/utils.pxd":14
 * ctypedef double (*simfnptr)(const vector[int]&, const vector[int]&) nogil
 * ctypedef double (*simfnptr_str)(vector[string]&, vector[string]&) nogil
 * ctypedef bool (*compfnptr)(double, double) nogil             # <<<<<<<<<<<<<<
 * 
 * cdef int get_sim_type(const string&)
 */
typedef bool (*__pyx_t_16py_stringsimjoin_8apply_rf_5utils_compfnptr)(double, double);

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* None.proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg);

/* pop_index.proto */
static PyObject* __Pyx__PyObject_PopNewIndex(PyObject* L, PyObject* py_ix);
static PyObject* __Pyx__PyObject_PopIndex(PyObject* L, PyObject* py_ix);
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static PyObject* __Pyx__PyList_PopIndex(PyObject* L, PyObject* py_ix, Py_ssize_t ix);
#define __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    (likely(PyList_CheckExact(L) && __Pyx_fits_Py_ssize_t(ix, type, is_signed))) ?\
        __Pyx__PyList_PopIndex(L, py_ix, ix) : (\
        (unlikely(py_ix == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
            __Pyx__PyObject_PopIndex(L, py_ix)))
#define __Pyx_PyList_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    __Pyx_fits_Py_ssize_t(ix, type, is_signed) ?\
        __Pyx__PyList_PopIndex(L, py_ix, ix) : (\
        (unlikely(py_ix == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
            __Pyx__PyObject_PopIndex(L, py_ix)))
#else
#define __Pyx_PyList_PopIndex(L, py_ix, ix, is_signed, type, to_py_func)\
    __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func)
#define __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    (unlikely(py_ix == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
        __Pyx__PyObject_PopIndex(L, py_ix))
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_SubtractObjC(PyObject *op1, PyObject *op2, double floatval, int inplace);
#else
#define __Pyx_PyFloat_SubtractObjC(op1, op2, floatval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'py_stringsimjoin.apply_rf.tokenizers' */
static void (*__pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_tokenize)(std::vector<std::string>  &, std::vector<std::string>  &, std::string const &, std::string const &, int __pyx_skip_dispatch); /*proto*/
static void (*__pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_load_tok)(PyObject *, PyObject *, std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, int __pyx_skip_dispatch); /*proto*/
static std::vector<std::string>  (*__pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_tokenize_str)(std::string &, std::string const &); /*proto*/

/* Module declarations from 'py_stringsimjoin.apply_rf.set_sim_join' */
static std::pair<std::vector<std::pair<int,int> > ,std::vector<double> >  (*__pyx_f_16py_stringsimjoin_8apply_rf_12set_sim_join_set_sim_join)(std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, int, double, int, int __pyx_skip_dispatch); /*proto*/
static void (*__pyx_f_16py_stringsimjoin_8apply_rf_12set_sim_join_set_sim_join1)(std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, int, double, int __pyx_skip_dispatch); /*proto*/

/* Module declarations from 'py_stringsimjoin.apply_rf.overlap_coefficient_join' */
static std::pair<std::vector<std::pair<int,int> > ,std::vector<double> >  (*__pyx_f_16py_stringsimjoin_8apply_rf_24overlap_coefficient_join_ov_coeff_join)(std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, double, int, int __pyx_skip_dispatch); /*proto*/

/* Module declarations from 'py_stringsimjoin.apply_rf.edit_distance_join' */
static std::pair<std::vector<std::pair<int,int> > ,std::vector<double> >  (*__pyx_f_16py_stringsimjoin_8apply_rf_18edit_distance_join_ed_join)(std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, int, double, std::vector<std::string>  &, std::vector<std::string>  &, int, int __pyx_skip_dispatch); /*proto*/

/* Module declarations from 'py_stringsimjoin.apply_rf.sim_functions' */
static double (*__pyx_f_16py_stringsimjoin_8apply_rf_13sim_functions_jaccard)(std::vector<int>  const &, std::vector<int>  const &); /*proto*/
static double (*__pyx_f_16py_stringsimjoin_8apply_rf_13sim_functions_dice)(std::vector<int>  const &, std::vector<int>  const &); /*proto*/
static double (*__pyx_f_16py_stringsimjoin_8apply_rf_13sim_functions_cosine)(std::vector<int>  const &, std::vector<int>  const &); /*proto*/

/* Module declarations from 'py_stringsimjoin.apply_rf.inverted_index' */

/* Module declarations from 'py_stringsimjoin.apply_rf.utils' */
static int (*__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_sim_type)(std::string const &); /*proto*/
static __pyx_t_16py_stringsimjoin_8apply_rf_5utils_simfnptr_str (*__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_sim_function_str)(int const ); /*proto*/
static __pyx_t_16py_stringsimjoin_8apply_rf_5utils_token_simfnptr (*__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_token_sim_function)(int const ); /*proto*/
static __pyx_t_16py_stringsimjoin_8apply_rf_5utils_str_simfnptr (*__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_str_sim_function)(int const ); /*proto*/
static int (*__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_comp_type)(std::string const &); /*proto*/
static __pyx_t_16py_stringsimjoin_8apply_rf_5utils_compfnptr (*__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_comparison_function)(int const ); /*proto*/

/* Module declarations from 'py_stringsimjoin.apply_rf.predicatecpp' */

/* Module declarations from 'py_stringsimjoin.apply_rf.node' */

/* Module declarations from 'py_stringsimjoin.apply_rf.coverage' */

/* Module declarations from 'py_stringsimjoin.apply_rf.rule' */

/* Module declarations from 'py_stringsimjoin.apply_rf.tree' */

/* Module declarations from 'py_stringsimjoin.apply_rf.ex_plan' */
static void (*__pyx_f_16py_stringsimjoin_8apply_rf_7ex_plan_compute_predicate_cost_and_coverage)(std::vector<std::string>  &, std::vector<std::string>  &, std::vector<Tree>  &, std::map<std::string,Coverage>  &, std::map<int,Coverage>  &); /*proto*/
static Node (*__pyx_f_16py_stringsimjoin_8apply_rf_7ex_plan_get_default_execution_plan)(std::vector<Tree>  &, std::map<std::string,Coverage>  &, std::map<int,Coverage>  &, int const , std::vector<Tree>  &, std::vector<Tree>  &); /*proto*/
static std::vector<Tree>  (*__pyx_f_16py_stringsimjoin_8apply_rf_7ex_plan_extract_pos_rules_from_rf)(PyObject *, PyObject *); /*proto*/
static void (*__pyx_f_16py_stringsimjoin_8apply_rf_7ex_plan_generate_local_optimal_plans)(std::vector<Tree>  &, std::map<std::string,Coverage>  &, int, std::vector<Node>  &, std::vector<int>  &); /*proto*/
static Node (*__pyx_f_16py_stringsimjoin_8apply_rf_7ex_plan_generate_overall_plan)(std::vector<Node> ); /*proto*/
static std::vector<Node>  (*__pyx_f_16py_stringsimjoin_8apply_rf_7ex_plan_generate_ex_plan_for_stage2)(std::vector<std::pair<int,int> >  &, std::vector<std::string>  &, std::vector<std::string>  &, std::vector<Tree>  &, int); /*proto*/

/* Module declarations from 'executor' */
static void __pyx_f_8executor_load_strings(PyObject *, PyObject *, std::vector<std::string>  &); /*proto*/
static void __pyx_f_8executor_execute_plan(Node &, std::vector<Tree>  &, std::vector<std::string>  &, std::vector<std::string>  &, std::string const &, int); /*proto*/
static std::pair<std::vector<std::pair<int,int> > ,std::vector<int> >  __pyx_f_8executor_execute_join_subtree(std::vector<std::pair<int,int> >  &, std::vector<double>  &, std::vector<std::string>  &, std::vector<std::string>  &, Node &, int, std::string const &); /*proto*/
static std::pair<std::vector<std::pair<int,int> > ,std::vector<int> >  __pyx_f_8executor_merge_candsets(int, std::vector<Tree>  &, std::string const &); /*proto*/
static void __pyx_f_8executor_write_candset(std::vector<std::pair<int,int> >  &, int, int, std::string const &); /*proto*/
static void __pyx_f_8executor_write_candset_using_pair_ids(std::vector<std::pair<int,int> >  &, std::vector<int>  &, int, int, std::string const &); /*proto*/
static void __pyx_f_8executor_write_output_pairs(std::vector<std::pair<int,int> >  &, std::string const &, int); /*proto*/
static std::pair<std::vector<std::pair<int,int> > ,std::vector<double> >  __pyx_f_8executor_execute_join_node(std::vector<std::string>  &, std::vector<std::string>  &, Predicatecpp, int, std::string const &); /*proto*/
static void __pyx_f_8executor_execute_filter_node_part(std::pair<int,int> , std::vector<std::pair<int,int> >  &, std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, std::vector<std::string>  &, std::vector<std::string>  &, Predicatecpp &, int, int, std::vector<std::pair<int,int> >  &); /*proto*/
static std::pair<std::vector<std::pair<int,int> > ,std::vector<int> >  __pyx_f_8executor_execute_tree_plan(std::pair<std::vector<std::pair<int,int> > ,std::vector<int> >  &, std::vector<std::string>  &, std::vector<std::string>  &, Node &, int, int, int, int, std::string const &); /*proto*/
static std::vector<double>  __pyx_f_8executor_execute_feature_node(std::vector<std::pair<int,int> >  &, std::vector<int>  &, bool, std::vector<std::string>  &, std::vector<std::string>  &, Predicatecpp, int, std::string const &); /*proto*/
static std::vector<int>  __pyx_f_8executor_execute_select_node(std::vector<int>  &, std::vector<double>  &, Predicatecpp &); /*proto*/
static std::vector<int>  __pyx_f_8executor_execute_select_node_candset(int, std::vector<double>  &, Predicatecpp &); /*proto*/
static std::vector<int>  __pyx_f_8executor_execute_filter_node1(std::vector<std::pair<int,int> >  &, std::vector<int>  &, bool, std::vector<std::string>  &, std::vector<std::string>  &, Predicatecpp, int, std::string const &); /*proto*/
static void __pyx_f_8executor_execute_filter_node_part1(std::pair<int,int> , std::vector<std::pair<int,int> >  &, std::vector<int>  &, bool, std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, std::vector<std::string>  &, std::vector<std::string>  &, Predicatecpp &, int, int, std::vector<int>  &); /*proto*/
static std::vector<int>  __pyx_f_8executor_split(std::string); /*proto*/
static void __pyx_f_8executor_tokenize_strings(std::vector<Tree>  &, std::vector<std::string>  &, std::vector<std::string>  &, std::string const &); /*proto*/
static void __pyx_f_8executor_convert_to_vector1(PyObject *, std::vector<std::string>  &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "executor"
extern int __pyx_module_is_main_executor;
int __pyx_module_is_main_executor = 0;

/* Implementation of 'executor' */
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_xrange;
static const char __pyx_k_[] = ",";
static const char __pyx_k_a[] = "a+";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_l[] = "l";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_w[] = "w";
static const char __pyx_k__2[] = "\n";
static const char __pyx_k_ft[] = "ft";
static const char __pyx_k_gh[] = "gh";
static const char __pyx_k_ix[] = "ix";
static const char __pyx_k_l1[] = "l1";
static const char __pyx_k_l2[] = "l2";
static const char __pyx_k_pd[] = "pd";
static const char __pyx_k_rf[] = "rf";
static const char __pyx_k_st[] = "st";
static const char __pyx_k_t5[] = "t5";
static const char __pyx_k_ws[] = "ws";
static const char __pyx_k_cnt[] = "cnt";
static const char __pyx_k_df1[] = "df1";
static const char __pyx_k_df2[] = "df2";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_id1[] = "id1";
static const char __pyx_k_id2[] = "id2";
static const char __pyx_k_idx[] = "idx";
static const char __pyx_k_ldf[] = "ldf";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_rdf[] = "rdf";
static const char __pyx_k_row[] = "row";
static const char __pyx_k_DICE[] = "DICE";
static const char __pyx_k_JOIN[] = "JOIN";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_root[] = "root";
static const char __pyx_k_rule[] = "rule";
static const char __pyx_k_str1[] = "str1";
static const char __pyx_k_str2[] = "str2";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_tree[] = "/tree_";
static const char __pyx_k_attr1[] = "attr1";
static const char __pyx_k_attr2[] = "attr2";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_entry[] = "entry";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_label[] = "label";
static const char __pyx_k_path1[] = "path1";
static const char __pyx_k_path2[] = "path2";
static const char __pyx_k_plans[] = "plans";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_score[] = "score";
static const char __pyx_k_trees[] = "trees";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_COSINE[] = "COSINE";
static const char __pyx_k_FILTER[] = "FILTER";
static const char __pyx_k_OUTPUT[] = "OUTPUT";
static const char __pyx_k_SELECT[] = "SELECT";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_n_jobs[] = "n_jobs";
static const char __pyx_k_output[] = "/output_";
static const char __pyx_k_pandas[] = "pandas";
static const char __pyx_k_random[] = "random";
static const char __pyx_k_time_2[] = "time : ";
static const char __pyx_k_tree_2[] = "tree";
static const char __pyx_k_trees1[] = "trees1 : ";
static const char __pyx_k_trees2[] = "trees2 : ";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_FEATURE[] = "FEATURE";
static const char __pyx_k_JACCARD[] = "JACCARD";
static const char __pyx_k_candset[] = "candset";
static const char __pyx_k_columns[] = "columns";
static const char __pyx_k_ltokens[] = "ltokens";
static const char __pyx_k_output1[] = "output1";
static const char __pyx_k_pair_id[] = "pair_id";
static const char __pyx_k_predict[] = "predict";
static const char __pyx_k_qg2_bag[] = "qg2_bag";
static const char __pyx_k_rtokens[] = "rtokens";
static const char __pyx_k_tokens1[] = "tokens1";
static const char __pyx_k_tokens2[] = "tokens2";
static const char __pyx_k_children[] = "children";
static const char __pyx_k_coverage[] = "coverage";
static const char __pyx_k_executor[] = "executor";
static const char __pyx_k_iterrows[] = "iterrows";
static const char __pyx_k_lstrings[] = "lstrings";
static const char __pyx_k_output_2[] = "output";
static const char __pyx_k_read_csv[] = "read_csv";
static const char __pyx_k_rstrings[] = "rstrings";
static const char __pyx_k_sim_type[] = "sim_type";
static const char __pyx_k_test_jac[] = "test_jac";
static const char __pyx_k_tok_type[] = "tok_type";
static const char __pyx_k_tree_cov[] = "tree_cov";
static const char __pyx_k_trees1_2[] = "trees1";
static const char __pyx_k_trees2_2[] = "trees2";
static const char __pyx_k_DataFrame[] = "DataFrame";
static const char __pyx_k_Predicate[] = "Predicate";
static const char __pyx_k_feat_name[] = "feat_name";
static const char __pyx_k_join_node[] = "join_node";
static const char __pyx_k_node_type[] = "node_type";
static const char __pyx_k_num_preds[] = "num preds : ";
static const char __pyx_k_num_rules[] = "num rules : ";
static const char __pyx_k_num_trees[] = "num trees : ";
static const char __pyx_k_output_df[] = "output_df";
static const char __pyx_k_predicate[] = "predicate";
static const char __pyx_k_test_tok1[] = "test_tok1";
static const char __pyx_k_threshold[] = "threshold";
static const char __pyx_k_before_tok[] = "before tok";
static const char __pyx_k_execute_rf[] = "execute_rf";
static const char __pyx_k_loaded_tok[] = "loaded tok";
static const char __pyx_k_start_time[] = "start_time";
static const char __pyx_k_tokenizers[] = "tokenizers";
static const char __pyx_k_tokenizing[] = "tokenizing";
static const char __pyx_k_total_time[] = "total time : ";
static const char __pyx_k_global_plan[] = "global_plan";
static const char __pyx_k_num_preds_2[] = "num_preds";
static const char __pyx_k_num_rules_2[] = "num_rules";
static const char __pyx_k_output_size[] = "output size : ";
static const char __pyx_k_sample_size[] = "sample_size";
static const char __pyx_k_working_dir[] = "working_dir";
static const char __pyx_k_executor_pyx[] = "executor.pyx";
static const char __pyx_k_feature_info[] = "feature_info";
static const char __pyx_k_output_pairs[] = "output_pairs";
static const char __pyx_k_parallen_end[] = "parallen end";
static const char __pyx_k_perform_join[] = "perform_join";
static const char __pyx_k_EDIT_DISTANCE[] = "EDIT_DISTANCE";
static const char __pyx_k_candset_votes[] = "candset_votes";
static const char __pyx_k_feature_table[] = "feature_table";
static const char __pyx_k_num_join_nodes[] = "num join nodes : ";
static const char __pyx_k_parallen_begin[] = "parallen begin";
static const char __pyx_k_tokenizer_type[] = "tokenizer_type";
static const char __pyx_k_generate_tokens[] = "generate_tokens";
static const char __pyx_k_generating_plan[] = "generating plan";
static const char __pyx_k_num_total_trees[] = "num_total_trees";
static const char __pyx_k_test_execute_rf[] = "test_execute_rf";
static const char __pyx_k_tokenizing_done[] = "tokenizing done.";
static const char __pyx_k_execute_rf_naive[] = "execute_rf_naive";
static const char __pyx_k_sim_measure_type[] = "sim_measure_type";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_computing_coverage[] = "computing coverage";
static const char __pyx_k_get_predicate_dict[] = "get_predicate_dict";
static const char __pyx_k_tokenizing_strings[] = "tokenizing strings";
static const char __pyx_k_OVERLAP_COEFFICIENT[] = "OVERLAP_COEFFICIENT";
static const char __pyx_k_num_trees_processed[] = "num_trees_processed";
static const char __pyx_k_executing_remaining_trees[] = "executing remaining trees";
static const char __pyx_k_join_completed_starting_subtree[] = "join completed. starting subtree execution.";
static const char __pyx_k_finished_tokenizing_executing_pl[] = "finished tokenizing. executing plan";
static const char __pyx_k_join_subtree_execution_completed[] = "join subtree execution completed";
static const char __pyx_k_py_stringsimjoin_apply_rf_execut[] = "py_stringsimjoin.apply_rf.execution_plan";
static const char __pyx_k_py_stringsimjoin_apply_rf_predic[] = "py_stringsimjoin.apply_rf.predicate";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_n_s_COSINE;
static PyObject *__pyx_n_s_DICE;
static PyObject *__pyx_n_s_DataFrame;
static PyObject *__pyx_n_s_EDIT_DISTANCE;
static PyObject *__pyx_n_s_FEATURE;
static PyObject *__pyx_n_s_FILTER;
static PyObject *__pyx_n_s_JACCARD;
static PyObject *__pyx_n_s_JOIN;
static PyObject *__pyx_n_s_OUTPUT;
static PyObject *__pyx_n_s_OVERLAP_COEFFICIENT;
static PyObject *__pyx_n_s_Predicate;
static PyObject *__pyx_n_s_SELECT;
static PyObject *__pyx_kp_s__2;
static PyObject *__pyx_kp_s_a;
static PyObject *__pyx_n_s_attr1;
static PyObject *__pyx_n_s_attr2;
static PyObject *__pyx_kp_s_before_tok;
static PyObject *__pyx_n_s_candset;
static PyObject *__pyx_n_s_candset_votes;
static PyObject *__pyx_n_s_children;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_cnt;
static PyObject *__pyx_n_s_columns;
static PyObject *__pyx_kp_s_computing_coverage;
static PyObject *__pyx_n_s_coverage;
static PyObject *__pyx_n_s_df1;
static PyObject *__pyx_n_s_df2;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_entry;
static PyObject *__pyx_n_s_execute_rf;
static PyObject *__pyx_n_s_execute_rf_naive;
static PyObject *__pyx_kp_s_executing_remaining_trees;
static PyObject *__pyx_n_s_executor;
static PyObject *__pyx_kp_s_executor_pyx;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_feat_name;
static PyObject *__pyx_n_s_feature_info;
static PyObject *__pyx_n_s_feature_table;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_kp_s_finished_tokenizing_executing_pl;
static PyObject *__pyx_n_s_ft;
static PyObject *__pyx_n_s_generate_tokens;
static PyObject *__pyx_kp_s_generating_plan;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_get_predicate_dict;
static PyObject *__pyx_n_s_global_plan;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_id1;
static PyObject *__pyx_n_s_id2;
static PyObject *__pyx_n_s_idx;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_iterrows;
static PyObject *__pyx_n_s_ix;
static PyObject *__pyx_kp_s_join_completed_starting_subtree;
static PyObject *__pyx_n_s_join_node;
static PyObject *__pyx_kp_s_join_subtree_execution_completed;
static PyObject *__pyx_n_s_l;
static PyObject *__pyx_n_s_l1;
static PyObject *__pyx_n_s_l2;
static PyObject *__pyx_n_s_label;
static PyObject *__pyx_n_s_ldf;
static PyObject *__pyx_kp_s_loaded_tok;
static PyObject *__pyx_n_s_lstrings;
static PyObject *__pyx_n_s_ltokens;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_n_jobs;
static PyObject *__pyx_n_s_node_type;
static PyObject *__pyx_kp_s_num_join_nodes;
static PyObject *__pyx_kp_s_num_preds;
static PyObject *__pyx_n_s_num_preds_2;
static PyObject *__pyx_kp_s_num_rules;
static PyObject *__pyx_n_s_num_rules_2;
static PyObject *__pyx_n_s_num_total_trees;
static PyObject *__pyx_kp_s_num_trees;
static PyObject *__pyx_n_s_num_trees_processed;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_kp_s_output;
static PyObject *__pyx_n_s_output1;
static PyObject *__pyx_n_s_output_2;
static PyObject *__pyx_n_s_output_df;
static PyObject *__pyx_n_s_output_pairs;
static PyObject *__pyx_kp_s_output_size;
static PyObject *__pyx_n_s_pair_id;
static PyObject *__pyx_n_s_pandas;
static PyObject *__pyx_kp_s_parallen_begin;
static PyObject *__pyx_kp_s_parallen_end;
static PyObject *__pyx_n_s_path1;
static PyObject *__pyx_n_s_path2;
static PyObject *__pyx_n_s_pd;
static PyObject *__pyx_n_s_perform_join;
static PyObject *__pyx_n_s_plans;
static PyObject *__pyx_n_s_pop;
static PyObject *__pyx_n_s_predicate;
static PyObject *__pyx_n_s_predict;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_py_stringsimjoin_apply_rf_execut;
static PyObject *__pyx_n_s_py_stringsimjoin_apply_rf_predic;
static PyObject *__pyx_n_s_qg2_bag;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_random;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rdf;
static PyObject *__pyx_n_s_read_csv;
static PyObject *__pyx_n_s_rf;
static PyObject *__pyx_n_s_root;
static PyObject *__pyx_n_s_row;
static PyObject *__pyx_n_s_rstrings;
static PyObject *__pyx_n_s_rtokens;
static PyObject *__pyx_n_s_rule;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_sample_size;
static PyObject *__pyx_n_s_score;
static PyObject *__pyx_n_s_sim_measure_type;
static PyObject *__pyx_n_s_sim_type;
static PyObject *__pyx_n_s_st;
static PyObject *__pyx_n_s_start_time;
static PyObject *__pyx_n_s_str1;
static PyObject *__pyx_n_s_str2;
static PyObject *__pyx_n_s_t5;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_test_execute_rf;
static PyObject *__pyx_n_s_test_jac;
static PyObject *__pyx_n_s_test_tok1;
static PyObject *__pyx_n_s_threshold;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_kp_s_time_2;
static PyObject *__pyx_n_s_tok_type;
static PyObject *__pyx_n_s_tokenizer_type;
static PyObject *__pyx_n_s_tokenizers;
static PyObject *__pyx_n_s_tokenizing;
static PyObject *__pyx_kp_s_tokenizing_done;
static PyObject *__pyx_kp_s_tokenizing_strings;
static PyObject *__pyx_n_s_tokens1;
static PyObject *__pyx_n_s_tokens2;
static PyObject *__pyx_kp_s_total_time;
static PyObject *__pyx_kp_s_tree;
static PyObject *__pyx_n_s_tree_2;
static PyObject *__pyx_n_s_tree_cov;
static PyObject *__pyx_n_s_trees;
static PyObject *__pyx_kp_s_trees1;
static PyObject *__pyx_n_s_trees1_2;
static PyObject *__pyx_kp_s_trees2;
static PyObject *__pyx_n_s_trees2_2;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_working_dir;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_n_s_ws;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_pf_8executor_test_execute_rf(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_rf, PyObject *__pyx_v_feature_table, PyObject *__pyx_v_l1, PyObject *__pyx_v_l2, PyObject *__pyx_v_path1, PyObject *__pyx_v_attr1, PyObject *__pyx_v_path2, PyObject *__pyx_v_attr2, PyObject *__pyx_v_working_dir, PyObject *__pyx_v_n_jobs); /* proto */
static PyObject *__pyx_pf_8executor_2execute_rf(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_rf, PyObject *__pyx_v_feature_table, PyObject *__pyx_v_l1, PyObject *__pyx_v_l2, PyObject *__pyx_v_path1, PyObject *__pyx_v_attr1, PyObject *__pyx_v_path2, PyObject *__pyx_v_attr2, PyObject *__pyx_v_working_dir, PyObject *__pyx_v_n_jobs); /* proto */
static PyObject *__pyx_pf_8executor_4test_tok1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_df1, PyObject *__pyx_v_attr1, PyObject *__pyx_v_df2, PyObject *__pyx_v_attr2); /* proto */
static PyObject *__pyx_pf_8executor_6generate_tokens(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ft, PyObject *__pyx_v_path1, PyObject *__pyx_v_attr1, PyObject *__pyx_v_path2, PyObject *__pyx_v_attr2, std::string __pyx_v_working_dir); /* proto */
static PyObject *__pyx_pf_8executor_8perform_join(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_path1, PyObject *__pyx_v_attr1, PyObject *__pyx_v_path2, PyObject *__pyx_v_attr2, PyObject *__pyx_v_tok_type, PyObject *__pyx_v_sim_type, PyObject *__pyx_v_threshold, std::string __pyx_v_working_dir); /* proto */
static PyObject *__pyx_pf_8executor_10test_jac(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_sim_type, PyObject *__pyx_v_threshold); /* proto */
static PyObject *__pyx_pf_8executor_12execute_rf_naive(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_rf, PyObject *__pyx_v_feature_table, PyObject *__pyx_v_ldf, PyObject *__pyx_v_attr1, PyObject *__pyx_v_rdf, PyObject *__pyx_v_attr2); /* proto */
static PyObject *__pyx_float_0_0001;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_codeobj__4;
static PyObject *__pyx_codeobj__6;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_codeobj__10;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__16;
/* Late includes */

/* "executor.pyx":36
 *     char *strtok (char *inp_str, const char *delimiters)
 * 
 * cdef void load_strings(data_path, attr, vector[string]& strings):             # <<<<<<<<<<<<<<
 *     df = pd.read_csv(data_path)
 *     convert_to_vector1(df[attr], strings)
 */

static void __pyx_f_8executor_load_strings(PyObject *__pyx_v_data_path, PyObject *__pyx_v_attr, std::vector<std::string>  &__pyx_v_strings) {
  PyObject *__pyx_v_df = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("load_strings", 0);

  /* "executor.pyx":37
 * 
 * cdef void load_strings(data_path, attr, vector[string]& strings):
 *     df = pd.read_csv(data_path)             # <<<<<<<<<<<<<<
 *     convert_to_vector1(df[attr], strings)
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_read_csv); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_data_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_data_path};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_data_path};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 37, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_v_data_path);
      __Pyx_GIVEREF(__pyx_v_data_path);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_data_path);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_df = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "executor.pyx":38
 * cdef void load_strings(data_path, attr, vector[string]& strings):
 *     df = pd.read_csv(data_path)
 *     convert_to_vector1(df[attr], strings)             # <<<<<<<<<<<<<<
 * 
 * def test_execute_rf(rf, feature_table, l1, l2, path1, attr1, path2, attr2, working_dir, n_jobs):
 */
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_df, __pyx_v_attr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_f_8executor_convert_to_vector1(__pyx_t_1, __pyx_v_strings);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":36
 *     char *strtok (char *inp_str, const char *delimiters)
 * 
 * cdef void load_strings(data_path, attr, vector[string]& strings):             # <<<<<<<<<<<<<<
 *     df = pd.read_csv(data_path)
 *     convert_to_vector1(df[attr], strings)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("executor.load_strings", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_df);
  __Pyx_RefNannyFinishContext();
}

/* "executor.pyx":40
 *     convert_to_vector1(df[attr], strings)
 * 
 * def test_execute_rf(rf, feature_table, l1, l2, path1, attr1, path2, attr2, working_dir, n_jobs):             # <<<<<<<<<<<<<<
 *     start_time = time.time()
 *     cdef vector[Tree] trees, trees1, trees2
 */

/* Python wrapper */
static PyObject *__pyx_pw_8executor_1test_execute_rf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8executor_1test_execute_rf = {"test_execute_rf", (PyCFunction)__pyx_pw_8executor_1test_execute_rf, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8executor_1test_execute_rf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rf = 0;
  PyObject *__pyx_v_feature_table = 0;
  PyObject *__pyx_v_l1 = 0;
  PyObject *__pyx_v_l2 = 0;
  PyObject *__pyx_v_path1 = 0;
  PyObject *__pyx_v_attr1 = 0;
  PyObject *__pyx_v_path2 = 0;
  PyObject *__pyx_v_attr2 = 0;
  PyObject *__pyx_v_working_dir = 0;
  PyObject *__pyx_v_n_jobs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("test_execute_rf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rf,&__pyx_n_s_feature_table,&__pyx_n_s_l1,&__pyx_n_s_l2,&__pyx_n_s_path1,&__pyx_n_s_attr1,&__pyx_n_s_path2,&__pyx_n_s_attr2,&__pyx_n_s_working_dir,&__pyx_n_s_n_jobs,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rf)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_feature_table)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_execute_rf", 1, 10, 10, 1); __PYX_ERR(0, 40, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_execute_rf", 1, 10, 10, 2); __PYX_ERR(0, 40, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_execute_rf", 1, 10, 10, 3); __PYX_ERR(0, 40, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_path1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_execute_rf", 1, 10, 10, 4); __PYX_ERR(0, 40, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attr1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_execute_rf", 1, 10, 10, 5); __PYX_ERR(0, 40, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_path2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_execute_rf", 1, 10, 10, 6); __PYX_ERR(0, 40, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attr2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_execute_rf", 1, 10, 10, 7); __PYX_ERR(0, 40, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_working_dir)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_execute_rf", 1, 10, 10, 8); __PYX_ERR(0, 40, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_jobs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_execute_rf", 1, 10, 10, 9); __PYX_ERR(0, 40, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "test_execute_rf") < 0)) __PYX_ERR(0, 40, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_rf = values[0];
    __pyx_v_feature_table = values[1];
    __pyx_v_l1 = values[2];
    __pyx_v_l2 = values[3];
    __pyx_v_path1 = values[4];
    __pyx_v_attr1 = values[5];
    __pyx_v_path2 = values[6];
    __pyx_v_attr2 = values[7];
    __pyx_v_working_dir = values[8];
    __pyx_v_n_jobs = values[9];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("test_execute_rf", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 40, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("executor.test_execute_rf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8executor_test_execute_rf(__pyx_self, __pyx_v_rf, __pyx_v_feature_table, __pyx_v_l1, __pyx_v_l2, __pyx_v_path1, __pyx_v_attr1, __pyx_v_path2, __pyx_v_attr2, __pyx_v_working_dir, __pyx_v_n_jobs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8executor_test_execute_rf(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_rf, PyObject *__pyx_v_feature_table, PyObject *__pyx_v_l1, PyObject *__pyx_v_l2, PyObject *__pyx_v_path1, PyObject *__pyx_v_attr1, PyObject *__pyx_v_path2, PyObject *__pyx_v_attr2, PyObject *__pyx_v_working_dir, PyObject *__pyx_v_n_jobs) {
  PyObject *__pyx_v_start_time = NULL;
  std::vector<Tree>  __pyx_v_trees;
  std::vector<Tree>  __pyx_v_trees1;
  std::vector<Tree>  __pyx_v_trees2;
  CYTHON_UNUSED int __pyx_v_i;
  int __pyx_v_num_total_trees;
  std::vector<std::string>  __pyx_v_lstrings;
  std::vector<std::string>  __pyx_v_rstrings;
  std::map<std::string,Coverage>  __pyx_v_coverage;
  std::map<int,Coverage>  __pyx_v_tree_cov;
  std::vector<std::string>  __pyx_v_l;
  std::vector<std::string>  __pyx_v_r;
  PyObject *__pyx_v_s = NULL;
  Node __pyx_v_global_plan;
  Node __pyx_v_join_node;
  CYTHON_UNUSED std::pair<std::vector<std::pair<int,int> > ,std::vector<int> >  __pyx_v_candset_votes;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  std::vector<std::string> ::size_type __pyx_t_6;
  std::vector<Node> ::iterator __pyx_t_7;
  std::vector<Node>  *__pyx_t_8;
  Node __pyx_t_9;
  std::string __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("test_execute_rf", 0);

  /* "executor.pyx":41
 * 
 * def test_execute_rf(rf, feature_table, l1, l2, path1, attr1, path2, attr2, working_dir, n_jobs):
 *     start_time = time.time()             # <<<<<<<<<<<<<<
 *     cdef vector[Tree] trees, trees1, trees2
 *     trees = extract_pos_rules_from_rf(rf, feature_table)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_start_time = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "executor.pyx":43
 *     start_time = time.time()
 *     cdef vector[Tree] trees, trees1, trees2
 *     trees = extract_pos_rules_from_rf(rf, feature_table)             # <<<<<<<<<<<<<<
 * 
 *     cdef int i=0, num_total_trees = trees.size()
 */
  __pyx_v_trees = __pyx_f_16py_stringsimjoin_8apply_rf_7ex_plan_extract_pos_rules_from_rf(__pyx_v_rf, __pyx_v_feature_table);

  /* "executor.pyx":45
 *     trees = extract_pos_rules_from_rf(rf, feature_table)
 * 
 *     cdef int i=0, num_total_trees = trees.size()             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[string] lstrings, rstrings
 */
  __pyx_v_i = 0;
  __pyx_v_num_total_trees = __pyx_v_trees.size();

  /* "executor.pyx":48
 * 
 *     cdef vector[string] lstrings, rstrings
 *     load_strings(path1, attr1, lstrings)             # <<<<<<<<<<<<<<
 *     load_strings(path2, attr2, rstrings)
 * 
 */
  __pyx_f_8executor_load_strings(__pyx_v_path1, __pyx_v_attr1, __pyx_v_lstrings);

  /* "executor.pyx":49
 *     cdef vector[string] lstrings, rstrings
 *     load_strings(path1, attr1, lstrings)
 *     load_strings(path2, attr2, rstrings)             # <<<<<<<<<<<<<<
 * 
 *     cdef omap[string, Coverage] coverage
 */
  __pyx_f_8executor_load_strings(__pyx_v_path2, __pyx_v_attr2, __pyx_v_rstrings);

  /* "executor.pyx":54
 *     cdef omap[int, Coverage] tree_cov
 *     cdef vector[string] l, r
 *     for s in l1:             # <<<<<<<<<<<<<<
 *         l.push_back(lstrings[int(s)])
 *     for s in l2:
 */
  if (likely(PyList_CheckExact(__pyx_v_l1)) || PyTuple_CheckExact(__pyx_v_l1)) {
    __pyx_t_1 = __pyx_v_l1; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_l1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 54, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 54, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 54, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 54, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 54, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 54, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "executor.pyx":55
 *     cdef vector[string] l, r
 *     for s in l1:
 *         l.push_back(lstrings[int(s)])             # <<<<<<<<<<<<<<
 *     for s in l2:
 *         r.push_back(rstrings[int(s)])
 */
    __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_v_s); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 55, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    try {
      __pyx_v_l.push_back((__pyx_v_lstrings[__pyx_t_6]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 55, __pyx_L1_error)
    }

    /* "executor.pyx":54
 *     cdef omap[int, Coverage] tree_cov
 *     cdef vector[string] l, r
 *     for s in l1:             # <<<<<<<<<<<<<<
 *         l.push_back(lstrings[int(s)])
 *     for s in l2:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":56
 *     for s in l1:
 *         l.push_back(lstrings[int(s)])
 *     for s in l2:             # <<<<<<<<<<<<<<
 *         r.push_back(rstrings[int(s)])
 *     print 'computing coverage'
 */
  if (likely(PyList_CheckExact(__pyx_v_l2)) || PyTuple_CheckExact(__pyx_v_l2)) {
    __pyx_t_1 = __pyx_v_l2; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_l2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 56, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 56, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 56, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 56, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 56, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 56, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "executor.pyx":57
 *         l.push_back(lstrings[int(s)])
 *     for s in l2:
 *         r.push_back(rstrings[int(s)])             # <<<<<<<<<<<<<<
 *     print 'computing coverage'
 *     compute_predicate_cost_and_coverage(l, r, trees, coverage, tree_cov)
 */
    __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_v_s); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 57, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    try {
      __pyx_v_r.push_back((__pyx_v_rstrings[__pyx_t_6]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 57, __pyx_L1_error)
    }

    /* "executor.pyx":56
 *     for s in l1:
 *         l.push_back(lstrings[int(s)])
 *     for s in l2:             # <<<<<<<<<<<<<<
 *         r.push_back(rstrings[int(s)])
 *     print 'computing coverage'
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":58
 *     for s in l2:
 *         r.push_back(rstrings[int(s)])
 *     print 'computing coverage'             # <<<<<<<<<<<<<<
 *     compute_predicate_cost_and_coverage(l, r, trees, coverage, tree_cov)
 *     cdef Node global_plan, join_node
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_computing_coverage) < 0) __PYX_ERR(0, 58, __pyx_L1_error)

  /* "executor.pyx":59
 *         r.push_back(rstrings[int(s)])
 *     print 'computing coverage'
 *     compute_predicate_cost_and_coverage(l, r, trees, coverage, tree_cov)             # <<<<<<<<<<<<<<
 *     cdef Node global_plan, join_node
 *     global_plan = get_default_execution_plan(trees, coverage, tree_cov,
 */
  __pyx_f_16py_stringsimjoin_8apply_rf_7ex_plan_compute_predicate_cost_and_coverage(__pyx_v_l, __pyx_v_r, __pyx_v_trees, __pyx_v_coverage, __pyx_v_tree_cov);

  /* "executor.pyx":61
 *     compute_predicate_cost_and_coverage(l, r, trees, coverage, tree_cov)
 *     cdef Node global_plan, join_node
 *     global_plan = get_default_execution_plan(trees, coverage, tree_cov,             # <<<<<<<<<<<<<<
 *                                              l.size(), trees1, trees2)
 * 
 */
  __pyx_v_global_plan = __pyx_f_16py_stringsimjoin_8apply_rf_7ex_plan_get_default_execution_plan(__pyx_v_trees, __pyx_v_coverage, __pyx_v_tree_cov, __pyx_v_l.size(), __pyx_v_trees1, __pyx_v_trees2);

  /* "executor.pyx":64
 *                                              l.size(), trees1, trees2)
 * 
 *     print 'num join nodes : ', global_plan.children.size()             # <<<<<<<<<<<<<<
 *     for join_node in global_plan.children:
 *          print 'JOIN', join_node.predicates[0].pred_name
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_global_plan.children.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_s_num_join_nodes);
  __Pyx_GIVEREF(__pyx_kp_s_num_join_nodes);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_num_join_nodes);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  if (__Pyx_Print(0, __pyx_t_3, 1) < 0) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "executor.pyx":65
 * 
 *     print 'num join nodes : ', global_plan.children.size()
 *     for join_node in global_plan.children:             # <<<<<<<<<<<<<<
 *          print 'JOIN', join_node.predicates[0].pred_name
 * 
 */
  __pyx_t_8 = &__pyx_v_global_plan.children;
  __pyx_t_7 = __pyx_t_8->begin();
  for (;;) {
    if (!(__pyx_t_7 != __pyx_t_8->end())) break;
    __pyx_t_9 = *__pyx_t_7;
    ++__pyx_t_7;
    __pyx_v_join_node = __pyx_t_9;

    /* "executor.pyx":66
 *     print 'num join nodes : ', global_plan.children.size()
 *     for join_node in global_plan.children:
 *          print 'JOIN', join_node.predicates[0].pred_name             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_join_node.predicates[0]).pred_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_JOIN);
    __Pyx_GIVEREF(__pyx_n_s_JOIN);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_JOIN);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
    __pyx_t_3 = 0;
    if (__Pyx_Print(0, __pyx_t_1, 1) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "executor.pyx":65
 * 
 *     print 'num join nodes : ', global_plan.children.size()
 *     for join_node in global_plan.children:             # <<<<<<<<<<<<<<
 *          print 'JOIN', join_node.predicates[0].pred_name
 * 
 */
  }

  /* "executor.pyx":69
 * 
 * 
 *     print 'tokenizing strings'             # <<<<<<<<<<<<<<
 *     tokenize_strings(trees, lstrings, rstrings, working_dir)
 *     print 'finished tokenizing. executing plan'
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_tokenizing_strings) < 0) __PYX_ERR(0, 69, __pyx_L1_error)

  /* "executor.pyx":70
 * 
 *     print 'tokenizing strings'
 *     tokenize_strings(trees, lstrings, rstrings, working_dir)             # <<<<<<<<<<<<<<
 *     print 'finished tokenizing. executing plan'
 * 
 */
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_v_working_dir); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 70, __pyx_L1_error)
  __pyx_f_8executor_tokenize_strings(__pyx_v_trees, __pyx_v_lstrings, __pyx_v_rstrings, __pyx_t_10);

  /* "executor.pyx":71
 *     print 'tokenizing strings'
 *     tokenize_strings(trees, lstrings, rstrings, working_dir)
 *     print 'finished tokenizing. executing plan'             # <<<<<<<<<<<<<<
 * 
 *     execute_plan(global_plan, trees1, lstrings, rstrings, working_dir, n_jobs)
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_finished_tokenizing_executing_pl) < 0) __PYX_ERR(0, 71, __pyx_L1_error)

  /* "executor.pyx":73
 *     print 'finished tokenizing. executing plan'
 * 
 *     execute_plan(global_plan, trees1, lstrings, rstrings, working_dir, n_jobs)             # <<<<<<<<<<<<<<
 * 
 *     cdef pair[vector[pair[int, int]], vector[int]] candset_votes
 */
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_v_working_dir); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L1_error)
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_n_jobs); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L1_error)
  __pyx_f_8executor_execute_plan(__pyx_v_global_plan, __pyx_v_trees1, __pyx_v_lstrings, __pyx_v_rstrings, __pyx_t_10, __pyx_t_11);

  /* "executor.pyx":77
 *     cdef pair[vector[pair[int, int]], vector[int]] candset_votes
 *     candset_votes = merge_candsets(num_total_trees, trees1,
 *                                    working_dir)             # <<<<<<<<<<<<<<
 *     '''
 *     cdef int sample_size = 5000
 */
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_v_working_dir); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 77, __pyx_L1_error)

  /* "executor.pyx":76
 * 
 *     cdef pair[vector[pair[int, int]], vector[int]] candset_votes
 *     candset_votes = merge_candsets(num_total_trees, trees1,             # <<<<<<<<<<<<<<
 *                                    working_dir)
 *     '''
 */
  __pyx_v_candset_votes = __pyx_f_8executor_merge_candsets(__pyx_v_num_total_trees, __pyx_v_trees1, __pyx_t_10);

  /* "executor.pyx":95
 *         label += 1
 *     '''
 *     print 'total time : ', time.time() - start_time             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_v_start_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_kp_s_total_time);
  __Pyx_GIVEREF(__pyx_kp_s_total_time);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_total_time);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  if (__Pyx_Print(0, __pyx_t_1, 1) < 0) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":40
 *     convert_to_vector1(df[attr], strings)
 * 
 * def test_execute_rf(rf, feature_table, l1, l2, path1, attr1, path2, attr2, working_dir, n_jobs):             # <<<<<<<<<<<<<<
 *     start_time = time.time()
 *     cdef vector[Tree] trees, trees1, trees2
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("executor.test_execute_rf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_start_time);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "executor.pyx":98
 * 
 * 
 * def execute_rf(rf, feature_table, l1, l2, path1, attr1, path2, attr2, working_dir, n_jobs):             # <<<<<<<<<<<<<<
 *     start_time = time.time()
 *     cdef vector[Tree] trees, trees1, trees2
 */

/* Python wrapper */
static PyObject *__pyx_pw_8executor_3execute_rf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8executor_3execute_rf = {"execute_rf", (PyCFunction)__pyx_pw_8executor_3execute_rf, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8executor_3execute_rf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rf = 0;
  PyObject *__pyx_v_feature_table = 0;
  PyObject *__pyx_v_l1 = 0;
  PyObject *__pyx_v_l2 = 0;
  PyObject *__pyx_v_path1 = 0;
  PyObject *__pyx_v_attr1 = 0;
  PyObject *__pyx_v_path2 = 0;
  PyObject *__pyx_v_attr2 = 0;
  PyObject *__pyx_v_working_dir = 0;
  PyObject *__pyx_v_n_jobs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("execute_rf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rf,&__pyx_n_s_feature_table,&__pyx_n_s_l1,&__pyx_n_s_l2,&__pyx_n_s_path1,&__pyx_n_s_attr1,&__pyx_n_s_path2,&__pyx_n_s_attr2,&__pyx_n_s_working_dir,&__pyx_n_s_n_jobs,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rf)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_feature_table)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_rf", 1, 10, 10, 1); __PYX_ERR(0, 98, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_rf", 1, 10, 10, 2); __PYX_ERR(0, 98, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_rf", 1, 10, 10, 3); __PYX_ERR(0, 98, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_path1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_rf", 1, 10, 10, 4); __PYX_ERR(0, 98, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attr1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_rf", 1, 10, 10, 5); __PYX_ERR(0, 98, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_path2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_rf", 1, 10, 10, 6); __PYX_ERR(0, 98, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attr2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_rf", 1, 10, 10, 7); __PYX_ERR(0, 98, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_working_dir)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_rf", 1, 10, 10, 8); __PYX_ERR(0, 98, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_jobs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_rf", 1, 10, 10, 9); __PYX_ERR(0, 98, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "execute_rf") < 0)) __PYX_ERR(0, 98, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_rf = values[0];
    __pyx_v_feature_table = values[1];
    __pyx_v_l1 = values[2];
    __pyx_v_l2 = values[3];
    __pyx_v_path1 = values[4];
    __pyx_v_attr1 = values[5];
    __pyx_v_path2 = values[6];
    __pyx_v_attr2 = values[7];
    __pyx_v_working_dir = values[8];
    __pyx_v_n_jobs = values[9];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("execute_rf", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 98, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("executor.execute_rf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8executor_2execute_rf(__pyx_self, __pyx_v_rf, __pyx_v_feature_table, __pyx_v_l1, __pyx_v_l2, __pyx_v_path1, __pyx_v_attr1, __pyx_v_path2, __pyx_v_attr2, __pyx_v_working_dir, __pyx_v_n_jobs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8executor_2execute_rf(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_rf, PyObject *__pyx_v_feature_table, PyObject *__pyx_v_l1, PyObject *__pyx_v_l2, PyObject *__pyx_v_path1, PyObject *__pyx_v_attr1, PyObject *__pyx_v_path2, PyObject *__pyx_v_attr2, PyObject *__pyx_v_working_dir, PyObject *__pyx_v_n_jobs) {
  PyObject *__pyx_v_start_time = NULL;
  std::vector<Tree>  __pyx_v_trees;
  std::vector<Tree>  __pyx_v_trees1;
  std::vector<Tree>  __pyx_v_trees2;
  int __pyx_v_i;
  int __pyx_v_num_total_trees;
  int __pyx_v_num_trees_processed;
  PyObject *__pyx_v_num_rules = NULL;
  PyObject *__pyx_v_num_preds = NULL;
  Tree __pyx_v_tree;
  Rule __pyx_v_rule;
  std::vector<std::string>  __pyx_v_lstrings;
  std::vector<std::string>  __pyx_v_rstrings;
  std::vector<std::string>  __pyx_v_l;
  std::vector<std::string>  __pyx_v_r;
  PyObject *__pyx_v_s = NULL;
  std::vector<Node>  __pyx_v_plans;
  Node __pyx_v_global_plan;
  std::pair<std::vector<std::pair<int,int> > ,std::vector<int> >  __pyx_v_candset_votes;
  int __pyx_v_sample_size;
  int __pyx_v_label;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  std::vector<Tree> ::iterator __pyx_t_5;
  Tree __pyx_t_6;
  std::vector<Rule> ::iterator __pyx_t_7;
  std::vector<Rule>  *__pyx_t_8;
  Rule __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  std::vector<std::string> ::size_type __pyx_t_12;
  std::string __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  __Pyx_RefNannySetupContext("execute_rf", 0);

  /* "executor.pyx":99
 * 
 * def execute_rf(rf, feature_table, l1, l2, path1, attr1, path2, attr2, working_dir, n_jobs):
 *     start_time = time.time()             # <<<<<<<<<<<<<<
 *     cdef vector[Tree] trees, trees1, trees2
 *     trees = extract_pos_rules_from_rf(rf, feature_table)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_start_time = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "executor.pyx":101
 *     start_time = time.time()
 *     cdef vector[Tree] trees, trees1, trees2
 *     trees = extract_pos_rules_from_rf(rf, feature_table)             # <<<<<<<<<<<<<<
 * 
 *     cdef int i=0, num_total_trees = trees.size(), num_trees_processed
 */
  __pyx_v_trees = __pyx_f_16py_stringsimjoin_8apply_rf_7ex_plan_extract_pos_rules_from_rf(__pyx_v_rf, __pyx_v_feature_table);

  /* "executor.pyx":103
 *     trees = extract_pos_rules_from_rf(rf, feature_table)
 * 
 *     cdef int i=0, num_total_trees = trees.size(), num_trees_processed             # <<<<<<<<<<<<<<
 *     num_trees_processed = (num_total_trees / 2) + 1
 * #    num_trees_processed = 3
 */
  __pyx_v_i = 0;
  __pyx_v_num_total_trees = __pyx_v_trees.size();

  /* "executor.pyx":104
 * 
 *     cdef int i=0, num_total_trees = trees.size(), num_trees_processed
 *     num_trees_processed = (num_total_trees / 2) + 1             # <<<<<<<<<<<<<<
 * #    num_trees_processed = 3
 *     while i < num_trees_processed:
 */
  __pyx_v_num_trees_processed = (__Pyx_div_long(__pyx_v_num_total_trees, 2) + 1);

  /* "executor.pyx":106
 *     num_trees_processed = (num_total_trees / 2) + 1
 * #    num_trees_processed = 3
 *     while i < num_trees_processed:             # <<<<<<<<<<<<<<
 *         trees1.push_back(trees[i])
 *         i += 1
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_num_trees_processed) != 0);
    if (!__pyx_t_4) break;

    /* "executor.pyx":107
 * #    num_trees_processed = 3
 *     while i < num_trees_processed:
 *         trees1.push_back(trees[i])             # <<<<<<<<<<<<<<
 *         i += 1
 * 
 */
    try {
      __pyx_v_trees1.push_back((__pyx_v_trees[__pyx_v_i]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 107, __pyx_L1_error)
    }

    /* "executor.pyx":108
 *     while i < num_trees_processed:
 *         trees1.push_back(trees[i])
 *         i += 1             # <<<<<<<<<<<<<<
 * 
 *     while i < num_total_trees:
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "executor.pyx":110
 *         i += 1
 * 
 *     while i < num_total_trees:             # <<<<<<<<<<<<<<
 *         trees2.push_back(trees[i])
 *         i += 1
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_num_total_trees) != 0);
    if (!__pyx_t_4) break;

    /* "executor.pyx":111
 * 
 *     while i < num_total_trees:
 *         trees2.push_back(trees[i])             # <<<<<<<<<<<<<<
 *         i += 1
 *     print 'trees1 : ', trees1.size()
 */
    try {
      __pyx_v_trees2.push_back((__pyx_v_trees[__pyx_v_i]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 111, __pyx_L1_error)
    }

    /* "executor.pyx":112
 *     while i < num_total_trees:
 *         trees2.push_back(trees[i])
 *         i += 1             # <<<<<<<<<<<<<<
 *     print 'trees1 : ', trees1.size()
 *     print 'trees2 : ', trees2.size()
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "executor.pyx":113
 *         trees2.push_back(trees[i])
 *         i += 1
 *     print 'trees1 : ', trees1.size()             # <<<<<<<<<<<<<<
 *     print 'trees2 : ', trees2.size()
 *     print 'num trees : ', trees.size()
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_trees1.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_s_trees1);
  __Pyx_GIVEREF(__pyx_kp_s_trees1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_trees1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  if (__Pyx_Print(0, __pyx_t_3, 1) < 0) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "executor.pyx":114
 *         i += 1
 *     print 'trees1 : ', trees1.size()
 *     print 'trees2 : ', trees2.size()             # <<<<<<<<<<<<<<
 *     print 'num trees : ', trees.size()
 *     num_rules = 0
 */
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_trees2.size()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_kp_s_trees2);
  __Pyx_GIVEREF(__pyx_kp_s_trees2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_trees2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  if (__Pyx_Print(0, __pyx_t_1, 1) < 0) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":115
 *     print 'trees1 : ', trees1.size()
 *     print 'trees2 : ', trees2.size()
 *     print 'num trees : ', trees.size()             # <<<<<<<<<<<<<<
 *     num_rules = 0
 *     num_preds = 0
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_trees.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_s_num_trees);
  __Pyx_GIVEREF(__pyx_kp_s_num_trees);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_num_trees);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  if (__Pyx_Print(0, __pyx_t_3, 1) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "executor.pyx":116
 *     print 'trees2 : ', trees2.size()
 *     print 'num trees : ', trees.size()
 *     num_rules = 0             # <<<<<<<<<<<<<<
 *     num_preds = 0
 *     cdef Tree tree
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_num_rules = __pyx_int_0;

  /* "executor.pyx":117
 *     print 'num trees : ', trees.size()
 *     num_rules = 0
 *     num_preds = 0             # <<<<<<<<<<<<<<
 *     cdef Tree tree
 *     cdef Rule rule
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_num_preds = __pyx_int_0;

  /* "executor.pyx":120
 *     cdef Tree tree
 *     cdef Rule rule
 *     for tree in trees:             # <<<<<<<<<<<<<<
 *         num_rules += tree.rules.size()
 *         for rule in tree.rules:
 */
  __pyx_t_5 = __pyx_v_trees.begin();
  for (;;) {
    if (!(__pyx_t_5 != __pyx_v_trees.end())) break;
    __pyx_t_6 = *__pyx_t_5;
    ++__pyx_t_5;
    __pyx_v_tree = __pyx_t_6;

    /* "executor.pyx":121
 *     cdef Rule rule
 *     for tree in trees:
 *         num_rules += tree.rules.size()             # <<<<<<<<<<<<<<
 *         for rule in tree.rules:
 *             num_preds += rule.predicates.size()
 */
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_tree.rules.size()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_num_rules, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_num_rules, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "executor.pyx":122
 *     for tree in trees:
 *         num_rules += tree.rules.size()
 *         for rule in tree.rules:             # <<<<<<<<<<<<<<
 *             num_preds += rule.predicates.size()
 *     print 'num rules : ', num_rules
 */
    __pyx_t_8 = &__pyx_v_tree.rules;
    __pyx_t_7 = __pyx_t_8->begin();
    for (;;) {
      if (!(__pyx_t_7 != __pyx_t_8->end())) break;
      __pyx_t_9 = *__pyx_t_7;
      ++__pyx_t_7;
      __pyx_v_rule = __pyx_t_9;

      /* "executor.pyx":123
 *         num_rules += tree.rules.size()
 *         for rule in tree.rules:
 *             num_preds += rule.predicates.size()             # <<<<<<<<<<<<<<
 *     print 'num rules : ', num_rules
 *     print 'num preds : ', num_preds
 */
      __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_rule.predicates.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_num_preds, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_num_preds, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "executor.pyx":122
 *     for tree in trees:
 *         num_rules += tree.rules.size()
 *         for rule in tree.rules:             # <<<<<<<<<<<<<<
 *             num_preds += rule.predicates.size()
 *     print 'num rules : ', num_rules
 */
    }

    /* "executor.pyx":120
 *     cdef Tree tree
 *     cdef Rule rule
 *     for tree in trees:             # <<<<<<<<<<<<<<
 *         num_rules += tree.rules.size()
 *         for rule in tree.rules:
 */
  }

  /* "executor.pyx":124
 *         for rule in tree.rules:
 *             num_preds += rule.predicates.size()
 *     print 'num rules : ', num_rules             # <<<<<<<<<<<<<<
 *     print 'num preds : ', num_preds
 * 
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_s_num_rules);
  __Pyx_GIVEREF(__pyx_kp_s_num_rules);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_num_rules);
  __Pyx_INCREF(__pyx_v_num_rules);
  __Pyx_GIVEREF(__pyx_v_num_rules);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_num_rules);
  if (__Pyx_Print(0, __pyx_t_3, 1) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "executor.pyx":125
 *             num_preds += rule.predicates.size()
 *     print 'num rules : ', num_rules
 *     print 'num preds : ', num_preds             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[string] lstrings, rstrings
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_s_num_preds);
  __Pyx_GIVEREF(__pyx_kp_s_num_preds);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_num_preds);
  __Pyx_INCREF(__pyx_v_num_preds);
  __Pyx_GIVEREF(__pyx_v_num_preds);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_num_preds);
  if (__Pyx_Print(0, __pyx_t_3, 1) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "executor.pyx":128
 * 
 *     cdef vector[string] lstrings, rstrings
 *     load_strings(path1, attr1, lstrings)             # <<<<<<<<<<<<<<
 *     load_strings(path2, attr2, rstrings)
 * 
 */
  __pyx_f_8executor_load_strings(__pyx_v_path1, __pyx_v_attr1, __pyx_v_lstrings);

  /* "executor.pyx":129
 *     cdef vector[string] lstrings, rstrings
 *     load_strings(path1, attr1, lstrings)
 *     load_strings(path2, attr2, rstrings)             # <<<<<<<<<<<<<<
 * 
 *     cdef omap[string, Coverage] coverage
 */
  __pyx_f_8executor_load_strings(__pyx_v_path2, __pyx_v_attr2, __pyx_v_rstrings);

  /* "executor.pyx":133
 *     cdef omap[string, Coverage] coverage
 *     cdef vector[string] l, r
 *     for s in l1:             # <<<<<<<<<<<<<<
 *         l.push_back(lstrings[int(s) - 1])
 *     for s in l2:
 */
  if (likely(PyList_CheckExact(__pyx_v_l1)) || PyTuple_CheckExact(__pyx_v_l1)) {
    __pyx_t_3 = __pyx_v_l1; __Pyx_INCREF(__pyx_t_3); __pyx_t_10 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_10 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_l1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 133, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_1); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 133, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_1); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 133, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_11(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 133, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "executor.pyx":134
 *     cdef vector[string] l, r
 *     for s in l1:
 *         l.push_back(lstrings[int(s) - 1])             # <<<<<<<<<<<<<<
 *     for s in l2:
 *         r.push_back(rstrings[int(s) - 1])
 */
    __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_12 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_12 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 134, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    try {
      __pyx_v_l.push_back((__pyx_v_lstrings[__pyx_t_12]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 134, __pyx_L1_error)
    }

    /* "executor.pyx":133
 *     cdef omap[string, Coverage] coverage
 *     cdef vector[string] l, r
 *     for s in l1:             # <<<<<<<<<<<<<<
 *         l.push_back(lstrings[int(s) - 1])
 *     for s in l2:
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "executor.pyx":135
 *     for s in l1:
 *         l.push_back(lstrings[int(s) - 1])
 *     for s in l2:             # <<<<<<<<<<<<<<
 *         r.push_back(rstrings[int(s) - 1])
 *     print 'computing coverage'
 */
  if (likely(PyList_CheckExact(__pyx_v_l2)) || PyTuple_CheckExact(__pyx_v_l2)) {
    __pyx_t_3 = __pyx_v_l2; __Pyx_INCREF(__pyx_t_3); __pyx_t_10 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_10 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_l2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 135, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_2); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 135, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_2); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 135, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_11(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 135, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "executor.pyx":136
 *         l.push_back(lstrings[int(s) - 1])
 *     for s in l2:
 *         r.push_back(rstrings[int(s) - 1])             # <<<<<<<<<<<<<<
 *     print 'computing coverage'
 * #    compute_predicate_cost_and_coverage(l, r, trees1, coverage)
 */
    __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_v_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_12 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_12 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    try {
      __pyx_v_r.push_back((__pyx_v_rstrings[__pyx_t_12]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 136, __pyx_L1_error)
    }

    /* "executor.pyx":135
 *     for s in l1:
 *         l.push_back(lstrings[int(s) - 1])
 *     for s in l2:             # <<<<<<<<<<<<<<
 *         r.push_back(rstrings[int(s) - 1])
 *     print 'computing coverage'
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "executor.pyx":137
 *     for s in l2:
 *         r.push_back(rstrings[int(s) - 1])
 *     print 'computing coverage'             # <<<<<<<<<<<<<<
 * #    compute_predicate_cost_and_coverage(l, r, trees1, coverage)
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_computing_coverage) < 0) __PYX_ERR(0, 137, __pyx_L1_error)

  /* "executor.pyx":145
 * 
 *     cdef Node global_plan
 *     global_plan = generate_overall_plan(plans)             # <<<<<<<<<<<<<<
 * 
 *     print 'tokenizing strings'
 */
  __pyx_v_global_plan = __pyx_f_16py_stringsimjoin_8apply_rf_7ex_plan_generate_overall_plan(__pyx_v_plans);

  /* "executor.pyx":147
 *     global_plan = generate_overall_plan(plans)
 * 
 *     print 'tokenizing strings'             # <<<<<<<<<<<<<<
 *     tokenize_strings(trees, lstrings, rstrings, working_dir)
 *     print 'finished tokenizing. executing plan'
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_tokenizing_strings) < 0) __PYX_ERR(0, 147, __pyx_L1_error)

  /* "executor.pyx":148
 * 
 *     print 'tokenizing strings'
 *     tokenize_strings(trees, lstrings, rstrings, working_dir)             # <<<<<<<<<<<<<<
 *     print 'finished tokenizing. executing plan'
 *     execute_plan(global_plan, trees1, lstrings, rstrings, working_dir, n_jobs)
 */
  __pyx_t_13 = __pyx_convert_string_from_py_std__in_string(__pyx_v_working_dir); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L1_error)
  __pyx_f_8executor_tokenize_strings(__pyx_v_trees, __pyx_v_lstrings, __pyx_v_rstrings, __pyx_t_13);

  /* "executor.pyx":149
 *     print 'tokenizing strings'
 *     tokenize_strings(trees, lstrings, rstrings, working_dir)
 *     print 'finished tokenizing. executing plan'             # <<<<<<<<<<<<<<
 *     execute_plan(global_plan, trees1, lstrings, rstrings, working_dir, n_jobs)
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_finished_tokenizing_executing_pl) < 0) __PYX_ERR(0, 149, __pyx_L1_error)

  /* "executor.pyx":150
 *     tokenize_strings(trees, lstrings, rstrings, working_dir)
 *     print 'finished tokenizing. executing plan'
 *     execute_plan(global_plan, trees1, lstrings, rstrings, working_dir, n_jobs)             # <<<<<<<<<<<<<<
 * 
 *     cdef pair[vector[pair[int, int]], vector[int]] candset_votes
 */
  __pyx_t_13 = __pyx_convert_string_from_py_std__in_string(__pyx_v_working_dir); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 150, __pyx_L1_error)
  __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_v_n_jobs); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 150, __pyx_L1_error)
  __pyx_f_8executor_execute_plan(__pyx_v_global_plan, __pyx_v_trees1, __pyx_v_lstrings, __pyx_v_rstrings, __pyx_t_13, __pyx_t_14);

  /* "executor.pyx":154
 *     cdef pair[vector[pair[int, int]], vector[int]] candset_votes
 *     candset_votes = merge_candsets(num_total_trees, trees1,
 *                                    working_dir)             # <<<<<<<<<<<<<<
 *     cdef int sample_size = 5000
 *     print 'generating plan'
 */
  __pyx_t_13 = __pyx_convert_string_from_py_std__in_string(__pyx_v_working_dir); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 154, __pyx_L1_error)

  /* "executor.pyx":153
 * 
 *     cdef pair[vector[pair[int, int]], vector[int]] candset_votes
 *     candset_votes = merge_candsets(num_total_trees, trees1,             # <<<<<<<<<<<<<<
 *                                    working_dir)
 *     cdef int sample_size = 5000
 */
  __pyx_v_candset_votes = __pyx_f_8executor_merge_candsets(__pyx_v_num_total_trees, __pyx_v_trees1, __pyx_t_13);

  /* "executor.pyx":155
 *     candset_votes = merge_candsets(num_total_trees, trees1,
 *                                    working_dir)
 *     cdef int sample_size = 5000             # <<<<<<<<<<<<<<
 *     print 'generating plan'
 *     plans = generate_ex_plan_for_stage2(candset_votes.first,
 */
  __pyx_v_sample_size = 0x1388;

  /* "executor.pyx":156
 *                                    working_dir)
 *     cdef int sample_size = 5000
 *     print 'generating plan'             # <<<<<<<<<<<<<<
 *     plans = generate_ex_plan_for_stage2(candset_votes.first,
 *                                                           lstrings, rstrings,
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_generating_plan) < 0) __PYX_ERR(0, 156, __pyx_L1_error)

  /* "executor.pyx":157
 *     cdef int sample_size = 5000
 *     print 'generating plan'
 *     plans = generate_ex_plan_for_stage2(candset_votes.first,             # <<<<<<<<<<<<<<
 *                                                           lstrings, rstrings,
 *                                                           trees2, sample_size)
 */
  __pyx_v_plans = __pyx_f_16py_stringsimjoin_8apply_rf_7ex_plan_generate_ex_plan_for_stage2(__pyx_v_candset_votes.first, __pyx_v_lstrings, __pyx_v_rstrings, __pyx_v_trees2, __pyx_v_sample_size);

  /* "executor.pyx":160
 *                                                           lstrings, rstrings,
 *                                                           trees2, sample_size)
 *     print 'executing remaining trees'             # <<<<<<<<<<<<<<
 *     cdef int label = 1
 *     i = 0
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_executing_remaining_trees) < 0) __PYX_ERR(0, 160, __pyx_L1_error)

  /* "executor.pyx":161
 *                                                           trees2, sample_size)
 *     print 'executing remaining trees'
 *     cdef int label = 1             # <<<<<<<<<<<<<<
 *     i = 0
 *     while candset_votes.first.size() > 0 and i < plans.size():
 */
  __pyx_v_label = 1;

  /* "executor.pyx":162
 *     print 'executing remaining trees'
 *     cdef int label = 1
 *     i = 0             # <<<<<<<<<<<<<<
 *     while candset_votes.first.size() > 0 and i < plans.size():
 *         candset_votes = execute_tree_plan(candset_votes, lstrings, rstrings, plans[i],
 */
  __pyx_v_i = 0;

  /* "executor.pyx":163
 *     cdef int label = 1
 *     i = 0
 *     while candset_votes.first.size() > 0 and i < plans.size():             # <<<<<<<<<<<<<<
 *         candset_votes = execute_tree_plan(candset_votes, lstrings, rstrings, plans[i],
 *                                   num_total_trees, num_trees_processed, label,
 */
  while (1) {
    __pyx_t_15 = ((__pyx_v_candset_votes.first.size() > 0) != 0);
    if (__pyx_t_15) {
    } else {
      __pyx_t_4 = __pyx_t_15;
      goto __pyx_L17_bool_binop_done;
    }
    __pyx_t_15 = ((__pyx_v_i < __pyx_v_plans.size()) != 0);
    __pyx_t_4 = __pyx_t_15;
    __pyx_L17_bool_binop_done:;
    if (!__pyx_t_4) break;

    /* "executor.pyx":166
 *         candset_votes = execute_tree_plan(candset_votes, lstrings, rstrings, plans[i],
 *                                   num_total_trees, num_trees_processed, label,
 *                                   n_jobs, working_dir)             # <<<<<<<<<<<<<<
 *         num_trees_processed += 1
 *         label += 1
 */
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_v_n_jobs); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 166, __pyx_L1_error)
    __pyx_t_13 = __pyx_convert_string_from_py_std__in_string(__pyx_v_working_dir); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 166, __pyx_L1_error)

    /* "executor.pyx":164
 *     i = 0
 *     while candset_votes.first.size() > 0 and i < plans.size():
 *         candset_votes = execute_tree_plan(candset_votes, lstrings, rstrings, plans[i],             # <<<<<<<<<<<<<<
 *                                   num_total_trees, num_trees_processed, label,
 *                                   n_jobs, working_dir)
 */
    __pyx_v_candset_votes = __pyx_f_8executor_execute_tree_plan(__pyx_v_candset_votes, __pyx_v_lstrings, __pyx_v_rstrings, (__pyx_v_plans[__pyx_v_i]), __pyx_v_num_total_trees, __pyx_v_num_trees_processed, __pyx_v_label, __pyx_t_14, __pyx_t_13);

    /* "executor.pyx":167
 *                                   num_total_trees, num_trees_processed, label,
 *                                   n_jobs, working_dir)
 *         num_trees_processed += 1             # <<<<<<<<<<<<<<
 *         label += 1
 *     print 'total time : ', time.time() - start_time
 */
    __pyx_v_num_trees_processed = (__pyx_v_num_trees_processed + 1);

    /* "executor.pyx":168
 *                                   n_jobs, working_dir)
 *         num_trees_processed += 1
 *         label += 1             # <<<<<<<<<<<<<<
 *     print 'total time : ', time.time() - start_time
 * 
 */
    __pyx_v_label = (__pyx_v_label + 1);
  }

  /* "executor.pyx":169
 *         num_trees_processed += 1
 *         label += 1
 *     print 'total time : ', time.time() - start_time             # <<<<<<<<<<<<<<
 * 
 * cdef void execute_plan(Node& root, vector[Tree]& trees, vector[string]& lstrings,
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 169, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 169, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_3, __pyx_v_start_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_s_total_time);
  __Pyx_GIVEREF(__pyx_kp_s_total_time);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_total_time);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  if (__Pyx_Print(0, __pyx_t_3, 1) < 0) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "executor.pyx":98
 * 
 * 
 * def execute_rf(rf, feature_table, l1, l2, path1, attr1, path2, attr2, working_dir, n_jobs):             # <<<<<<<<<<<<<<
 *     start_time = time.time()
 *     cdef vector[Tree] trees, trees1, trees2
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("executor.execute_rf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_start_time);
  __Pyx_XDECREF(__pyx_v_num_rules);
  __Pyx_XDECREF(__pyx_v_num_preds);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "executor.pyx":171
 *     print 'total time : ', time.time() - start_time
 * 
 * cdef void execute_plan(Node& root, vector[Tree]& trees, vector[string]& lstrings,             # <<<<<<<<<<<<<<
 *         vector[string]& rstrings, const string& working_dir, int n_jobs):
 * #    tokenize_strings(trees, lstrings, rstrings, working_dir)
 */

static void __pyx_f_8executor_execute_plan(Node &__pyx_v_root, CYTHON_UNUSED std::vector<Tree>  &__pyx_v_trees, std::vector<std::string>  &__pyx_v_lstrings, std::vector<std::string>  &__pyx_v_rstrings, std::string const &__pyx_v_working_dir, int __pyx_v_n_jobs) {
  std::pair<std::vector<std::pair<int,int> > ,std::vector<double> >  __pyx_v_candset;
  Node __pyx_v_join_node;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::vector<Node> ::iterator __pyx_t_5;
  std::vector<Node>  *__pyx_t_6;
  Node __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("execute_plan", 0);

  /* "executor.pyx":177
 *     cdef pair[vector[pair[int, int]], vector[double]] candset
 * #    cdef Node root
 *     print root.children.size(), root.children[0].children.size()             # <<<<<<<<<<<<<<
 * 
 *     cdef Node join_node, child_node, curr_node
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_root.children.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((__pyx_v_root.children[0]).children.size()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  if (__Pyx_Print(0, __pyx_t_3, 1) < 0) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "executor.pyx":180
 * 
 *     cdef Node join_node, child_node, curr_node
 *     print root.node_type, root.predicates.size(), root.children.size()             # <<<<<<<<<<<<<<
 *     for join_node in root.children:
 *          print 'JOIN', join_node.predicates[0].sim_measure_type, join_node.predicates[0].tokenizer_type, join_node.predicates[0].comp_op, join_node.predicates[0].threshold
 */
  __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_root.node_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_root.predicates.size()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_root.children.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  if (__Pyx_Print(0, __pyx_t_4, 1) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "executor.pyx":181
 *     cdef Node join_node, child_node, curr_node
 *     print root.node_type, root.predicates.size(), root.children.size()
 *     for join_node in root.children:             # <<<<<<<<<<<<<<
 *          print 'JOIN', join_node.predicates[0].sim_measure_type, join_node.predicates[0].tokenizer_type, join_node.predicates[0].comp_op, join_node.predicates[0].threshold
 *          candset = execute_join_node(lstrings, rstrings, join_node.predicates[0],
 */
  __pyx_t_6 = &__pyx_v_root.children;
  __pyx_t_5 = __pyx_t_6->begin();
  for (;;) {
    if (!(__pyx_t_5 != __pyx_t_6->end())) break;
    __pyx_t_7 = *__pyx_t_5;
    ++__pyx_t_5;
    __pyx_v_join_node = __pyx_t_7;

    /* "executor.pyx":182
 *     print root.node_type, root.predicates.size(), root.children.size()
 *     for join_node in root.children:
 *          print 'JOIN', join_node.predicates[0].sim_measure_type, join_node.predicates[0].tokenizer_type, join_node.predicates[0].comp_op, join_node.predicates[0].threshold             # <<<<<<<<<<<<<<
 *          candset = execute_join_node(lstrings, rstrings, join_node.predicates[0],
 *                                      n_jobs, working_dir)
 */
    __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_join_node.predicates[0]).sim_measure_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_join_node.predicates[0]).tokenizer_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_join_node.predicates[0]).comp_op); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyFloat_FromDouble((__pyx_v_join_node.predicates[0]).threshold); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = PyTuple_New(5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_n_s_JOIN);
    __Pyx_GIVEREF(__pyx_n_s_JOIN);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_JOIN);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    if (__Pyx_Print(0, __pyx_t_8, 1) < 0) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "executor.pyx":183
 *     for join_node in root.children:
 *          print 'JOIN', join_node.predicates[0].sim_measure_type, join_node.predicates[0].tokenizer_type, join_node.predicates[0].comp_op, join_node.predicates[0].threshold
 *          candset = execute_join_node(lstrings, rstrings, join_node.predicates[0],             # <<<<<<<<<<<<<<
 *                                      n_jobs, working_dir)
 *          print 'join completed. starting subtree execution.'
 */
    __pyx_v_candset = __pyx_f_8executor_execute_join_node(__pyx_v_lstrings, __pyx_v_rstrings, (__pyx_v_join_node.predicates[0]), __pyx_v_n_jobs, __pyx_v_working_dir);

    /* "executor.pyx":185
 *          candset = execute_join_node(lstrings, rstrings, join_node.predicates[0],
 *                                      n_jobs, working_dir)
 *          print 'join completed. starting subtree execution.'             # <<<<<<<<<<<<<<
 *          execute_join_subtree(candset.first, candset.second, lstrings, rstrings, join_node, n_jobs, working_dir)
 *          print 'join subtree execution completed'
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_join_completed_starting_subtree) < 0) __PYX_ERR(0, 185, __pyx_L1_error)

    /* "executor.pyx":186
 *                                      n_jobs, working_dir)
 *          print 'join completed. starting subtree execution.'
 *          execute_join_subtree(candset.first, candset.second, lstrings, rstrings, join_node, n_jobs, working_dir)             # <<<<<<<<<<<<<<
 *          print 'join subtree execution completed'
 * 
 */
    (void)(__pyx_f_8executor_execute_join_subtree(__pyx_v_candset.first, __pyx_v_candset.second, __pyx_v_lstrings, __pyx_v_rstrings, __pyx_v_join_node, __pyx_v_n_jobs, __pyx_v_working_dir));

    /* "executor.pyx":187
 *          print 'join completed. starting subtree execution.'
 *          execute_join_subtree(candset.first, candset.second, lstrings, rstrings, join_node, n_jobs, working_dir)
 *          print 'join subtree execution completed'             # <<<<<<<<<<<<<<
 * 
 * 
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_join_subtree_execution_completed) < 0) __PYX_ERR(0, 187, __pyx_L1_error)

    /* "executor.pyx":181
 *     cdef Node join_node, child_node, curr_node
 *     print root.node_type, root.predicates.size(), root.children.size()
 *     for join_node in root.children:             # <<<<<<<<<<<<<<
 *          print 'JOIN', join_node.predicates[0].sim_measure_type, join_node.predicates[0].tokenizer_type, join_node.predicates[0].comp_op, join_node.predicates[0].threshold
 *          candset = execute_join_node(lstrings, rstrings, join_node.predicates[0],
 */
  }

  /* "executor.pyx":171
 *     print 'total time : ', time.time() - start_time
 * 
 * cdef void execute_plan(Node& root, vector[Tree]& trees, vector[string]& lstrings,             # <<<<<<<<<<<<<<
 *         vector[string]& rstrings, const string& working_dir, int n_jobs):
 * #    tokenize_strings(trees, lstrings, rstrings, working_dir)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("executor.execute_plan", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "executor.pyx":190
 * 
 * 
 * cdef pair[vector[pair[int, int]], vector[int]] execute_join_subtree(             # <<<<<<<<<<<<<<
 *                     vector[pair[int, int]]& candset,
 *                     vector[double]& feature_values,
 */

static std::pair<std::vector<std::pair<int,int> > ,std::vector<int> >  __pyx_f_8executor_execute_join_subtree(std::vector<std::pair<int,int> >  &__pyx_v_candset, std::vector<double>  &__pyx_v_feature_values, std::vector<std::string>  &__pyx_v_lstrings, std::vector<std::string>  &__pyx_v_rstrings, Node &__pyx_v_join_subtree, int __pyx_v_n_jobs, std::string const &__pyx_v_working_dir) {
  Node __pyx_v_child_node;
  Node __pyx_v_grand_child_node;
  Node __pyx_v_curr_node;
  std::vector<std::pair<Node,int> >  __pyx_v_queue;
  std::pair<Node,int>  __pyx_v_curr_entry;
  std::vector<int>  __pyx_v_pair_ids;
  std::vector<int>  __pyx_v_curr_pair_ids;
  std::map<int,std::vector<int> >  __pyx_v_cached_pair_ids;
  std::map<int,int>  __pyx_v_cache_usage;
  int __pyx_v_curr_index;
  bool __pyx_v_top_level_node;
  std::vector<double>  __pyx_v_curr_feature_values;
  std::pair<std::vector<std::pair<int,int> > ,std::vector<int> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  std::vector<Node> ::iterator __pyx_t_1;
  std::vector<Node>  *__pyx_t_2;
  Node __pyx_t_3;
  std::pair<Node,int>  __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  std::vector<Node> ::iterator __pyx_t_13;
  std::vector<Node>  *__pyx_t_14;
  __Pyx_RefNannySetupContext("execute_join_subtree", 0);

  /* "executor.pyx":201
 *     cdef vector[int] pair_ids, curr_pair_ids
 * 
 *     for child_node in join_subtree.children:             # <<<<<<<<<<<<<<
 *         queue.push_back(pair[Node, int](child_node, -1))
 * 
 */
  __pyx_t_2 = &__pyx_v_join_subtree.children;
  __pyx_t_1 = __pyx_t_2->begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_t_2->end())) break;
    __pyx_t_3 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_v_child_node = __pyx_t_3;

    /* "executor.pyx":202
 * 
 *     for child_node in join_subtree.children:
 *         queue.push_back(pair[Node, int](child_node, -1))             # <<<<<<<<<<<<<<
 * 
 *     cdef omap[int, vector[int]] cached_pair_ids
 */
    try {
      __pyx_t_4 = std::pair<Node,int> (__pyx_v_child_node, -1);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 202, __pyx_L1_error)
    }
    try {
      __pyx_v_queue.push_back(__pyx_t_4);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 202, __pyx_L1_error)
    }

    /* "executor.pyx":201
 *     cdef vector[int] pair_ids, curr_pair_ids
 * 
 *     for child_node in join_subtree.children:             # <<<<<<<<<<<<<<
 *         queue.push_back(pair[Node, int](child_node, -1))
 * 
 */
  }

  /* "executor.pyx":206
 *     cdef omap[int, vector[int]] cached_pair_ids
 *     cdef omap[int , int] cache_usage
 *     cdef int curr_index = 0             # <<<<<<<<<<<<<<
 *     cdef bool top_level_node = False
 *     cdef vector[double] curr_feature_values
 */
  __pyx_v_curr_index = 0;

  /* "executor.pyx":207
 *     cdef omap[int , int] cache_usage
 *     cdef int curr_index = 0
 *     cdef bool top_level_node = False             # <<<<<<<<<<<<<<
 *     cdef vector[double] curr_feature_values
 * 
 */
  __pyx_v_top_level_node = 0;

  /* "executor.pyx":210
 *     cdef vector[double] curr_feature_values
 * 
 *     while queue.size() > 0:             # <<<<<<<<<<<<<<
 *         curr_entry = queue.back()
 *         queue.pop_back();
 */
  while (1) {
    __pyx_t_5 = ((__pyx_v_queue.size() > 0) != 0);
    if (!__pyx_t_5) break;

    /* "executor.pyx":211
 * 
 *     while queue.size() > 0:
 *         curr_entry = queue.back()             # <<<<<<<<<<<<<<
 *         queue.pop_back();
 *         curr_node = curr_entry.first
 */
    __pyx_v_curr_entry = __pyx_v_queue.back();

    /* "executor.pyx":212
 *     while queue.size() > 0:
 *         curr_entry = queue.back()
 *         queue.pop_back();             # <<<<<<<<<<<<<<
 *         curr_node = curr_entry.first
 * 
 */
    __pyx_v_queue.pop_back();

    /* "executor.pyx":213
 *         curr_entry = queue.back()
 *         queue.pop_back();
 *         curr_node = curr_entry.first             # <<<<<<<<<<<<<<
 * 
 *         top_level_node = False
 */
    __pyx_t_3 = __pyx_v_curr_entry.first;
    __pyx_v_curr_node = __pyx_t_3;

    /* "executor.pyx":215
 *         curr_node = curr_entry.first
 * 
 *         top_level_node = False             # <<<<<<<<<<<<<<
 * 
 *         if curr_entry.second == -1:
 */
    __pyx_v_top_level_node = 0;

    /* "executor.pyx":217
 *         top_level_node = False
 * 
 *         if curr_entry.second == -1:             # <<<<<<<<<<<<<<
 *             top_level_node = True
 *         else:
 */
    __pyx_t_5 = ((__pyx_v_curr_entry.second == -1L) != 0);
    if (__pyx_t_5) {

      /* "executor.pyx":218
 * 
 *         if curr_entry.second == -1:
 *             top_level_node = True             # <<<<<<<<<<<<<<
 *         else:
 *             pair_ids = cached_pair_ids[curr_entry.second]
 */
      __pyx_v_top_level_node = 1;

      /* "executor.pyx":217
 *         top_level_node = False
 * 
 *         if curr_entry.second == -1:             # <<<<<<<<<<<<<<
 *             top_level_node = True
 *         else:
 */
      goto __pyx_L7;
    }

    /* "executor.pyx":220
 *             top_level_node = True
 *         else:
 *             pair_ids = cached_pair_ids[curr_entry.second]             # <<<<<<<<<<<<<<
 *             cache_usage[curr_entry.second] -= 1
 * 
 */
    /*else*/ {
      __pyx_v_pair_ids = (__pyx_v_cached_pair_ids[__pyx_v_curr_entry.second]);

      /* "executor.pyx":221
 *         else:
 *             pair_ids = cached_pair_ids[curr_entry.second]
 *             cache_usage[curr_entry.second] -= 1             # <<<<<<<<<<<<<<
 * 
 *             if cache_usage[curr_entry.second]  == 0:
 */
      __pyx_t_6 = __pyx_v_curr_entry.second;
      (__pyx_v_cache_usage[__pyx_t_6]) = ((__pyx_v_cache_usage[__pyx_t_6]) - 1);

      /* "executor.pyx":223
 *             cache_usage[curr_entry.second] -= 1
 * 
 *             if cache_usage[curr_entry.second]  == 0:             # <<<<<<<<<<<<<<
 *                 cache_usage.erase(curr_entry.second)
 *                 cached_pair_ids.erase(curr_entry.second)
 */
      __pyx_t_5 = (((__pyx_v_cache_usage[__pyx_v_curr_entry.second]) == 0) != 0);
      if (__pyx_t_5) {

        /* "executor.pyx":224
 * 
 *             if cache_usage[curr_entry.second]  == 0:
 *                 cache_usage.erase(curr_entry.second)             # <<<<<<<<<<<<<<
 *                 cached_pair_ids.erase(curr_entry.second)
 * 
 */
        (void)(__pyx_v_cache_usage.erase(__pyx_v_curr_entry.second));

        /* "executor.pyx":225
 *             if cache_usage[curr_entry.second]  == 0:
 *                 cache_usage.erase(curr_entry.second)
 *                 cached_pair_ids.erase(curr_entry.second)             # <<<<<<<<<<<<<<
 * 
 *         if top_level_node and curr_node.node_type.compare("SELECT") == 0:
 */
        (void)(__pyx_v_cached_pair_ids.erase(__pyx_v_curr_entry.second));

        /* "executor.pyx":223
 *             cache_usage[curr_entry.second] -= 1
 * 
 *             if cache_usage[curr_entry.second]  == 0:             # <<<<<<<<<<<<<<
 *                 cache_usage.erase(curr_entry.second)
 *                 cached_pair_ids.erase(curr_entry.second)
 */
      }
    }
    __pyx_L7:;

    /* "executor.pyx":227
 *                 cached_pair_ids.erase(curr_entry.second)
 * 
 *         if top_level_node and curr_node.node_type.compare("SELECT") == 0:             # <<<<<<<<<<<<<<
 *             print 'SELECT', curr_node.predicates[0].sim_measure_type, curr_node.predicates[0].tokenizer_type, curr_node.predicates[0].comp_op, curr_node.predicates[0].threshold
 *             curr_pair_ids = execute_select_node_candset(candset.size(),
 */
    __pyx_t_7 = (__pyx_v_top_level_node != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_7 = ((__pyx_v_curr_node.node_type.compare(__pyx_k_SELECT) == 0) != 0);
    __pyx_t_5 = __pyx_t_7;
    __pyx_L10_bool_binop_done:;
    if (__pyx_t_5) {

      /* "executor.pyx":228
 * 
 *         if top_level_node and curr_node.node_type.compare("SELECT") == 0:
 *             print 'SELECT', curr_node.predicates[0].sim_measure_type, curr_node.predicates[0].tokenizer_type, curr_node.predicates[0].comp_op, curr_node.predicates[0].threshold             # <<<<<<<<<<<<<<
 *             curr_pair_ids = execute_select_node_candset(candset.size(),
 *                                     feature_values, curr_node.predicates[0])
 */
      __pyx_t_8 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_curr_node.predicates[0]).sim_measure_type); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 228, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_curr_node.predicates[0]).tokenizer_type); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 228, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_curr_node.predicates[0]).comp_op); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 228, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = PyFloat_FromDouble((__pyx_v_curr_node.predicates[0]).threshold); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 228, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyTuple_New(5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 228, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_INCREF(__pyx_n_s_SELECT);
      __Pyx_GIVEREF(__pyx_n_s_SELECT);
      PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_n_s_SELECT);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_12, 3, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_12, 4, __pyx_t_11);
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      __pyx_t_10 = 0;
      __pyx_t_11 = 0;
      if (__Pyx_Print(0, __pyx_t_12, 1) < 0) __PYX_ERR(0, 228, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "executor.pyx":229
 *         if top_level_node and curr_node.node_type.compare("SELECT") == 0:
 *             print 'SELECT', curr_node.predicates[0].sim_measure_type, curr_node.predicates[0].tokenizer_type, curr_node.predicates[0].comp_op, curr_node.predicates[0].threshold
 *             curr_pair_ids = execute_select_node_candset(candset.size(),             # <<<<<<<<<<<<<<
 *                                     feature_values, curr_node.predicates[0])
 * 
 */
      __pyx_v_curr_pair_ids = __pyx_f_8executor_execute_select_node_candset(__pyx_v_candset.size(), __pyx_v_feature_values, (__pyx_v_curr_node.predicates[0]));

      /* "executor.pyx":232
 *                                     feature_values, curr_node.predicates[0])
 * 
 *             for child_node in curr_node.children:             # <<<<<<<<<<<<<<
 *                queue.push_back(pair[Node, int](child_node, curr_index))
 * 
 */
      __pyx_t_2 = &__pyx_v_curr_node.children;
      __pyx_t_1 = __pyx_t_2->begin();
      for (;;) {
        if (!(__pyx_t_1 != __pyx_t_2->end())) break;
        __pyx_t_3 = *__pyx_t_1;
        ++__pyx_t_1;
        __pyx_v_child_node = __pyx_t_3;

        /* "executor.pyx":233
 * 
 *             for child_node in curr_node.children:
 *                queue.push_back(pair[Node, int](child_node, curr_index))             # <<<<<<<<<<<<<<
 * 
 *             cache_usage[curr_index] = curr_node.children.size()
 */
        try {
          __pyx_t_4 = std::pair<Node,int> (__pyx_v_child_node, __pyx_v_curr_index);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 233, __pyx_L1_error)
        }
        try {
          __pyx_v_queue.push_back(__pyx_t_4);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 233, __pyx_L1_error)
        }

        /* "executor.pyx":232
 *                                     feature_values, curr_node.predicates[0])
 * 
 *             for child_node in curr_node.children:             # <<<<<<<<<<<<<<
 *                queue.push_back(pair[Node, int](child_node, curr_index))
 * 
 */
      }

      /* "executor.pyx":235
 *                queue.push_back(pair[Node, int](child_node, curr_index))
 * 
 *             cache_usage[curr_index] = curr_node.children.size()             # <<<<<<<<<<<<<<
 *             cached_pair_ids[curr_index] = curr_pair_ids
 *             curr_index += 1
 */
      (__pyx_v_cache_usage[__pyx_v_curr_index]) = __pyx_v_curr_node.children.size();

      /* "executor.pyx":236
 * 
 *             cache_usage[curr_index] = curr_node.children.size()
 *             cached_pair_ids[curr_index] = curr_pair_ids             # <<<<<<<<<<<<<<
 *             curr_index += 1
 *             continue
 */
      (__pyx_v_cached_pair_ids[__pyx_v_curr_index]) = __pyx_v_curr_pair_ids;

      /* "executor.pyx":237
 *             cache_usage[curr_index] = curr_node.children.size()
 *             cached_pair_ids[curr_index] = curr_pair_ids
 *             curr_index += 1             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
      __pyx_v_curr_index = (__pyx_v_curr_index + 1);

      /* "executor.pyx":238
 *             cached_pair_ids[curr_index] = curr_pair_ids
 *             curr_index += 1
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         while (curr_node.node_type.compare("OUTPUT") != 0 and
 */
      goto __pyx_L5_continue;

      /* "executor.pyx":227
 *                 cached_pair_ids.erase(curr_entry.second)
 * 
 *         if top_level_node and curr_node.node_type.compare("SELECT") == 0:             # <<<<<<<<<<<<<<
 *             print 'SELECT', curr_node.predicates[0].sim_measure_type, curr_node.predicates[0].tokenizer_type, curr_node.predicates[0].comp_op, curr_node.predicates[0].threshold
 *             curr_pair_ids = execute_select_node_candset(candset.size(),
 */
    }

    /* "executor.pyx":240
 *             continue
 * 
 *         while (curr_node.node_type.compare("OUTPUT") != 0 and             # <<<<<<<<<<<<<<
 *                curr_node.node_type.compare("FILTER") == 0 and
 *                curr_node.children.size() < 2):
 */
    while (1) {
      __pyx_t_7 = ((__pyx_v_curr_node.node_type.compare(__pyx_k_OUTPUT) != 0) != 0);
      if (__pyx_t_7) {
      } else {
        __pyx_t_5 = __pyx_t_7;
        goto __pyx_L16_bool_binop_done;
      }

      /* "executor.pyx":241
 * 
 *         while (curr_node.node_type.compare("OUTPUT") != 0 and
 *                curr_node.node_type.compare("FILTER") == 0 and             # <<<<<<<<<<<<<<
 *                curr_node.children.size() < 2):
 *             print 'FILTER', curr_node.predicates[0].sim_measure_type, curr_node.predicates[0].tokenizer_type, curr_node.predicates[0].comp_op, curr_node.predicates[0].threshold
 */
      __pyx_t_7 = ((__pyx_v_curr_node.node_type.compare(__pyx_k_FILTER) == 0) != 0);
      if (__pyx_t_7) {
      } else {
        __pyx_t_5 = __pyx_t_7;
        goto __pyx_L16_bool_binop_done;
      }

      /* "executor.pyx":242
 *         while (curr_node.node_type.compare("OUTPUT") != 0 and
 *                curr_node.node_type.compare("FILTER") == 0 and
 *                curr_node.children.size() < 2):             # <<<<<<<<<<<<<<
 *             print 'FILTER', curr_node.predicates[0].sim_measure_type, curr_node.predicates[0].tokenizer_type, curr_node.predicates[0].comp_op, curr_node.predicates[0].threshold
 *             pair_ids = execute_filter_node1(candset, pair_ids, top_level_node,
 */
      __pyx_t_7 = ((__pyx_v_curr_node.children.size() < 2) != 0);
      __pyx_t_5 = __pyx_t_7;
      __pyx_L16_bool_binop_done:;
      if (!__pyx_t_5) break;

      /* "executor.pyx":243
 *                curr_node.node_type.compare("FILTER") == 0 and
 *                curr_node.children.size() < 2):
 *             print 'FILTER', curr_node.predicates[0].sim_measure_type, curr_node.predicates[0].tokenizer_type, curr_node.predicates[0].comp_op, curr_node.predicates[0].threshold             # <<<<<<<<<<<<<<
 *             pair_ids = execute_filter_node1(candset, pair_ids, top_level_node,
 *                                             lstrings, rstrings,
 */
      __pyx_t_12 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_curr_node.predicates[0]).sim_measure_type); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 243, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_11 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_curr_node.predicates[0]).tokenizer_type); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 243, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_10 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_curr_node.predicates[0]).comp_op); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 243, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = PyFloat_FromDouble((__pyx_v_curr_node.predicates[0]).threshold); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 243, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = PyTuple_New(5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 243, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_n_s_FILTER);
      __Pyx_GIVEREF(__pyx_n_s_FILTER);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_FILTER);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_t_9);
      __pyx_t_12 = 0;
      __pyx_t_11 = 0;
      __pyx_t_10 = 0;
      __pyx_t_9 = 0;
      if (__Pyx_Print(0, __pyx_t_8, 1) < 0) __PYX_ERR(0, 243, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "executor.pyx":244
 *                curr_node.children.size() < 2):
 *             print 'FILTER', curr_node.predicates[0].sim_measure_type, curr_node.predicates[0].tokenizer_type, curr_node.predicates[0].comp_op, curr_node.predicates[0].threshold
 *             pair_ids = execute_filter_node1(candset, pair_ids, top_level_node,             # <<<<<<<<<<<<<<
 *                                             lstrings, rstrings,
 *                                             curr_node.predicates[0], n_jobs, working_dir)
 */
      __pyx_v_pair_ids = __pyx_f_8executor_execute_filter_node1(__pyx_v_candset, __pyx_v_pair_ids, __pyx_v_top_level_node, __pyx_v_lstrings, __pyx_v_rstrings, (__pyx_v_curr_node.predicates[0]), __pyx_v_n_jobs, __pyx_v_working_dir);

      /* "executor.pyx":247
 *                                             lstrings, rstrings,
 *                                             curr_node.predicates[0], n_jobs, working_dir)
 *             curr_node = curr_node.children[0]             # <<<<<<<<<<<<<<
 *             top_level_node = False
 * 
 */
      __pyx_v_curr_node = (__pyx_v_curr_node.children[0]);

      /* "executor.pyx":248
 *                                             curr_node.predicates[0], n_jobs, working_dir)
 *             curr_node = curr_node.children[0]
 *             top_level_node = False             # <<<<<<<<<<<<<<
 * 
 *         if curr_node.node_type.compare("OUTPUT") == 0:
 */
      __pyx_v_top_level_node = 0;
    }

    /* "executor.pyx":250
 *             top_level_node = False
 * 
 *         if curr_node.node_type.compare("OUTPUT") == 0:             # <<<<<<<<<<<<<<
 *             if top_level_node:
 *                 write_candset(candset, curr_node.tree_id, curr_node.rule_id,
 */
    __pyx_t_5 = ((__pyx_v_curr_node.node_type.compare(__pyx_k_OUTPUT) == 0) != 0);
    if (__pyx_t_5) {

      /* "executor.pyx":251
 * 
 *         if curr_node.node_type.compare("OUTPUT") == 0:
 *             if top_level_node:             # <<<<<<<<<<<<<<
 *                 write_candset(candset, curr_node.tree_id, curr_node.rule_id,
 *                               working_dir)
 */
      __pyx_t_5 = (__pyx_v_top_level_node != 0);
      if (__pyx_t_5) {

        /* "executor.pyx":252
 *         if curr_node.node_type.compare("OUTPUT") == 0:
 *             if top_level_node:
 *                 write_candset(candset, curr_node.tree_id, curr_node.rule_id,             # <<<<<<<<<<<<<<
 *                               working_dir)
 *             else:
 */
        __pyx_f_8executor_write_candset(__pyx_v_candset, __pyx_v_curr_node.tree_id, __pyx_v_curr_node.rule_id, __pyx_v_working_dir);

        /* "executor.pyx":251
 * 
 *         if curr_node.node_type.compare("OUTPUT") == 0:
 *             if top_level_node:             # <<<<<<<<<<<<<<
 *                 write_candset(candset, curr_node.tree_id, curr_node.rule_id,
 *                               working_dir)
 */
        goto __pyx_L20;
      }

      /* "executor.pyx":255
 *                               working_dir)
 *             else:
 *                 write_candset_using_pair_ids(candset, pair_ids,             # <<<<<<<<<<<<<<
 *                                              curr_node.tree_id,
 *                                              curr_node.rule_id, working_dir)
 */
      /*else*/ {

        /* "executor.pyx":257
 *                 write_candset_using_pair_ids(candset, pair_ids,
 *                                              curr_node.tree_id,
 *                                              curr_node.rule_id, working_dir)             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
        __pyx_f_8executor_write_candset_using_pair_ids(__pyx_v_candset, __pyx_v_pair_ids, __pyx_v_curr_node.tree_id, __pyx_v_curr_node.rule_id, __pyx_v_working_dir);
      }
      __pyx_L20:;

      /* "executor.pyx":258
 *                                              curr_node.tree_id,
 *                                              curr_node.rule_id, working_dir)
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         if curr_node.node_type.compare("FEATURE") == 0:
 */
      goto __pyx_L5_continue;

      /* "executor.pyx":250
 *             top_level_node = False
 * 
 *         if curr_node.node_type.compare("OUTPUT") == 0:             # <<<<<<<<<<<<<<
 *             if top_level_node:
 *                 write_candset(candset, curr_node.tree_id, curr_node.rule_id,
 */
    }

    /* "executor.pyx":260
 *             continue
 * 
 *         if curr_node.node_type.compare("FEATURE") == 0:             # <<<<<<<<<<<<<<
 *            print 'FEATURE', curr_node.predicates[0].sim_measure_type
 *            curr_feature_values = execute_feature_node(candset, pair_ids, top_level_node,
 */
    __pyx_t_5 = ((__pyx_v_curr_node.node_type.compare(__pyx_k_FEATURE) == 0) != 0);
    if (__pyx_t_5) {

      /* "executor.pyx":261
 * 
 *         if curr_node.node_type.compare("FEATURE") == 0:
 *            print 'FEATURE', curr_node.predicates[0].sim_measure_type             # <<<<<<<<<<<<<<
 *            curr_feature_values = execute_feature_node(candset, pair_ids, top_level_node,
 *                                                  lstrings, rstrings,
 */
      __pyx_t_8 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_curr_node.predicates[0]).sim_measure_type); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 261, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 261, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_n_s_FEATURE);
      __Pyx_GIVEREF(__pyx_n_s_FEATURE);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_FEATURE);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
      __pyx_t_8 = 0;
      if (__Pyx_Print(0, __pyx_t_9, 1) < 0) __PYX_ERR(0, 261, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "executor.pyx":262
 *         if curr_node.node_type.compare("FEATURE") == 0:
 *            print 'FEATURE', curr_node.predicates[0].sim_measure_type
 *            curr_feature_values = execute_feature_node(candset, pair_ids, top_level_node,             # <<<<<<<<<<<<<<
 *                                                  lstrings, rstrings,
 *                                                 curr_node.predicates[0], n_jobs,
 */
      __pyx_v_curr_feature_values = __pyx_f_8executor_execute_feature_node(__pyx_v_candset, __pyx_v_pair_ids, __pyx_v_top_level_node, __pyx_v_lstrings, __pyx_v_rstrings, (__pyx_v_curr_node.predicates[0]), __pyx_v_n_jobs, __pyx_v_working_dir);

      /* "executor.pyx":266
 *                                                 curr_node.predicates[0], n_jobs,
 *                                                 working_dir)
 *            for child_node in curr_node.children:             # <<<<<<<<<<<<<<
 *                print 'SELECT', child_node.predicates[0].sim_measure_type, child_node.predicates[0].tokenizer_type, child_node.predicates[0].comp_op, child_node.predicates[0].threshold
 *                if top_level_node:
 */
      __pyx_t_2 = &__pyx_v_curr_node.children;
      __pyx_t_1 = __pyx_t_2->begin();
      for (;;) {
        if (!(__pyx_t_1 != __pyx_t_2->end())) break;
        __pyx_t_3 = *__pyx_t_1;
        ++__pyx_t_1;
        __pyx_v_child_node = __pyx_t_3;

        /* "executor.pyx":267
 *                                                 working_dir)
 *            for child_node in curr_node.children:
 *                print 'SELECT', child_node.predicates[0].sim_measure_type, child_node.predicates[0].tokenizer_type, child_node.predicates[0].comp_op, child_node.predicates[0].threshold             # <<<<<<<<<<<<<<
 *                if top_level_node:
 *                    curr_pair_ids = execute_select_node_candset(candset.size(), curr_feature_values,
 */
        __pyx_t_9 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_child_node.predicates[0]).sim_measure_type); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 267, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_child_node.predicates[0]).tokenizer_type); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 267, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_child_node.predicates[0]).comp_op); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 267, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = PyFloat_FromDouble((__pyx_v_child_node.predicates[0]).threshold); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 267, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = PyTuple_New(5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 267, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_INCREF(__pyx_n_s_SELECT);
        __Pyx_GIVEREF(__pyx_n_s_SELECT);
        PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_n_s_SELECT);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_12, 3, __pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_12, 4, __pyx_t_11);
        __pyx_t_9 = 0;
        __pyx_t_8 = 0;
        __pyx_t_10 = 0;
        __pyx_t_11 = 0;
        if (__Pyx_Print(0, __pyx_t_12, 1) < 0) __PYX_ERR(0, 267, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

        /* "executor.pyx":268
 *            for child_node in curr_node.children:
 *                print 'SELECT', child_node.predicates[0].sim_measure_type, child_node.predicates[0].tokenizer_type, child_node.predicates[0].comp_op, child_node.predicates[0].threshold
 *                if top_level_node:             # <<<<<<<<<<<<<<
 *                    curr_pair_ids = execute_select_node_candset(candset.size(), curr_feature_values,
 *                                                    child_node.predicates[0])
 */
        __pyx_t_5 = (__pyx_v_top_level_node != 0);
        if (__pyx_t_5) {

          /* "executor.pyx":269
 *                print 'SELECT', child_node.predicates[0].sim_measure_type, child_node.predicates[0].tokenizer_type, child_node.predicates[0].comp_op, child_node.predicates[0].threshold
 *                if top_level_node:
 *                    curr_pair_ids = execute_select_node_candset(candset.size(), curr_feature_values,             # <<<<<<<<<<<<<<
 *                                                    child_node.predicates[0])
 *                else:
 */
          __pyx_v_curr_pair_ids = __pyx_f_8executor_execute_select_node_candset(__pyx_v_candset.size(), __pyx_v_curr_feature_values, (__pyx_v_child_node.predicates[0]));

          /* "executor.pyx":268
 *            for child_node in curr_node.children:
 *                print 'SELECT', child_node.predicates[0].sim_measure_type, child_node.predicates[0].tokenizer_type, child_node.predicates[0].comp_op, child_node.predicates[0].threshold
 *                if top_level_node:             # <<<<<<<<<<<<<<
 *                    curr_pair_ids = execute_select_node_candset(candset.size(), curr_feature_values,
 *                                                    child_node.predicates[0])
 */
          goto __pyx_L24;
        }

        /* "executor.pyx":272
 *                                                    child_node.predicates[0])
 *                else:
 *                    curr_pair_ids = execute_select_node(pair_ids, curr_feature_values,             # <<<<<<<<<<<<<<
 *                                                    child_node.predicates[0])
 * 
 */
        /*else*/ {

          /* "executor.pyx":273
 *                else:
 *                    curr_pair_ids = execute_select_node(pair_ids, curr_feature_values,
 *                                                    child_node.predicates[0])             # <<<<<<<<<<<<<<
 * 
 *                for grand_child_node in child_node.children:
 */
          __pyx_v_curr_pair_ids = __pyx_f_8executor_execute_select_node(__pyx_v_pair_ids, __pyx_v_curr_feature_values, (__pyx_v_child_node.predicates[0]));
        }
        __pyx_L24:;

        /* "executor.pyx":275
 *                                                    child_node.predicates[0])
 * 
 *                for grand_child_node in child_node.children:             # <<<<<<<<<<<<<<
 *                    queue.push_back(pair[Node, int](grand_child_node, curr_index))
 * 
 */
        __pyx_t_14 = &__pyx_v_child_node.children;
        __pyx_t_13 = __pyx_t_14->begin();
        for (;;) {
          if (!(__pyx_t_13 != __pyx_t_14->end())) break;
          __pyx_t_3 = *__pyx_t_13;
          ++__pyx_t_13;
          __pyx_v_grand_child_node = __pyx_t_3;

          /* "executor.pyx":276
 * 
 *                for grand_child_node in child_node.children:
 *                    queue.push_back(pair[Node, int](grand_child_node, curr_index))             # <<<<<<<<<<<<<<
 * 
 *                cache_usage[curr_index] = child_node.children.size()
 */
          try {
            __pyx_t_4 = std::pair<Node,int> (__pyx_v_grand_child_node, __pyx_v_curr_index);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 276, __pyx_L1_error)
          }
          try {
            __pyx_v_queue.push_back(__pyx_t_4);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 276, __pyx_L1_error)
          }

          /* "executor.pyx":275
 *                                                    child_node.predicates[0])
 * 
 *                for grand_child_node in child_node.children:             # <<<<<<<<<<<<<<
 *                    queue.push_back(pair[Node, int](grand_child_node, curr_index))
 * 
 */
        }

        /* "executor.pyx":278
 *                    queue.push_back(pair[Node, int](grand_child_node, curr_index))
 * 
 *                cache_usage[curr_index] = child_node.children.size()             # <<<<<<<<<<<<<<
 *                cached_pair_ids[curr_index] = curr_pair_ids
 *                curr_index += 1
 */
        (__pyx_v_cache_usage[__pyx_v_curr_index]) = __pyx_v_child_node.children.size();

        /* "executor.pyx":279
 * 
 *                cache_usage[curr_index] = child_node.children.size()
 *                cached_pair_ids[curr_index] = curr_pair_ids             # <<<<<<<<<<<<<<
 *                curr_index += 1
 *         elif curr_node.node_type.compare("FILTER") == 0:
 */
        (__pyx_v_cached_pair_ids[__pyx_v_curr_index]) = __pyx_v_curr_pair_ids;

        /* "executor.pyx":280
 *                cache_usage[curr_index] = child_node.children.size()
 *                cached_pair_ids[curr_index] = curr_pair_ids
 *                curr_index += 1             # <<<<<<<<<<<<<<
 *         elif curr_node.node_type.compare("FILTER") == 0:
 *             print 'FILTER', curr_node.predicates[0].sim_measure_type, curr_node.predicates[0].tokenizer_type, curr_node.predicates[0].comp_op, curr_node.predicates[0].threshold
 */
        __pyx_v_curr_index = (__pyx_v_curr_index + 1);

        /* "executor.pyx":266
 *                                                 curr_node.predicates[0], n_jobs,
 *                                                 working_dir)
 *            for child_node in curr_node.children:             # <<<<<<<<<<<<<<
 *                print 'SELECT', child_node.predicates[0].sim_measure_type, child_node.predicates[0].tokenizer_type, child_node.predicates[0].comp_op, child_node.predicates[0].threshold
 *                if top_level_node:
 */
      }

      /* "executor.pyx":260
 *             continue
 * 
 *         if curr_node.node_type.compare("FEATURE") == 0:             # <<<<<<<<<<<<<<
 *            print 'FEATURE', curr_node.predicates[0].sim_measure_type
 *            curr_feature_values = execute_feature_node(candset, pair_ids, top_level_node,
 */
      goto __pyx_L21;
    }

    /* "executor.pyx":281
 *                cached_pair_ids[curr_index] = curr_pair_ids
 *                curr_index += 1
 *         elif curr_node.node_type.compare("FILTER") == 0:             # <<<<<<<<<<<<<<
 *             print 'FILTER', curr_node.predicates[0].sim_measure_type, curr_node.predicates[0].tokenizer_type, curr_node.predicates[0].comp_op, curr_node.predicates[0].threshold
 *             pair_ids = execute_filter_node1(candset, pair_ids, top_level_node,
 */
    __pyx_t_5 = ((__pyx_v_curr_node.node_type.compare(__pyx_k_FILTER) == 0) != 0);
    if (__pyx_t_5) {

      /* "executor.pyx":282
 *                curr_index += 1
 *         elif curr_node.node_type.compare("FILTER") == 0:
 *             print 'FILTER', curr_node.predicates[0].sim_measure_type, curr_node.predicates[0].tokenizer_type, curr_node.predicates[0].comp_op, curr_node.predicates[0].threshold             # <<<<<<<<<<<<<<
 *             pair_ids = execute_filter_node1(candset, pair_ids, top_level_node,
 *                                            lstrings, rstrings,
 */
      __pyx_t_12 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_curr_node.predicates[0]).sim_measure_type); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_11 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_curr_node.predicates[0]).tokenizer_type); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_10 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_curr_node.predicates[0]).comp_op); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_8 = PyFloat_FromDouble((__pyx_v_curr_node.predicates[0]).threshold); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyTuple_New(5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_n_s_FILTER);
      __Pyx_GIVEREF(__pyx_n_s_FILTER);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_FILTER);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_9, 4, __pyx_t_8);
      __pyx_t_12 = 0;
      __pyx_t_11 = 0;
      __pyx_t_10 = 0;
      __pyx_t_8 = 0;
      if (__Pyx_Print(0, __pyx_t_9, 1) < 0) __PYX_ERR(0, 282, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "executor.pyx":283
 *         elif curr_node.node_type.compare("FILTER") == 0:
 *             print 'FILTER', curr_node.predicates[0].sim_measure_type, curr_node.predicates[0].tokenizer_type, curr_node.predicates[0].comp_op, curr_node.predicates[0].threshold
 *             pair_ids = execute_filter_node1(candset, pair_ids, top_level_node,             # <<<<<<<<<<<<<<
 *                                            lstrings, rstrings,
 *                                            curr_node.predicates[0], n_jobs, working_dir)
 */
      __pyx_v_pair_ids = __pyx_f_8executor_execute_filter_node1(__pyx_v_candset, __pyx_v_pair_ids, __pyx_v_top_level_node, __pyx_v_lstrings, __pyx_v_rstrings, (__pyx_v_curr_node.predicates[0]), __pyx_v_n_jobs, __pyx_v_working_dir);

      /* "executor.pyx":286
 *                                            lstrings, rstrings,
 *                                            curr_node.predicates[0], n_jobs, working_dir)
 *             for child_node in curr_node.children:             # <<<<<<<<<<<<<<
 *                 queue.push_back(pair[Node, int](child_node, curr_index))
 * 
 */
      __pyx_t_2 = &__pyx_v_curr_node.children;
      __pyx_t_1 = __pyx_t_2->begin();
      for (;;) {
        if (!(__pyx_t_1 != __pyx_t_2->end())) break;
        __pyx_t_3 = *__pyx_t_1;
        ++__pyx_t_1;
        __pyx_v_child_node = __pyx_t_3;

        /* "executor.pyx":287
 *                                            curr_node.predicates[0], n_jobs, working_dir)
 *             for child_node in curr_node.children:
 *                 queue.push_back(pair[Node, int](child_node, curr_index))             # <<<<<<<<<<<<<<
 * 
 *             cache_usage[curr_index] = curr_node.children.size()
 */
        try {
          __pyx_t_4 = std::pair<Node,int> (__pyx_v_child_node, __pyx_v_curr_index);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 287, __pyx_L1_error)
        }
        try {
          __pyx_v_queue.push_back(__pyx_t_4);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 287, __pyx_L1_error)
        }

        /* "executor.pyx":286
 *                                            lstrings, rstrings,
 *                                            curr_node.predicates[0], n_jobs, working_dir)
 *             for child_node in curr_node.children:             # <<<<<<<<<<<<<<
 *                 queue.push_back(pair[Node, int](child_node, curr_index))
 * 
 */
      }

      /* "executor.pyx":289
 *                 queue.push_back(pair[Node, int](child_node, curr_index))
 * 
 *             cache_usage[curr_index] = curr_node.children.size()             # <<<<<<<<<<<<<<
 *             cached_pair_ids[curr_index] = pair_ids
 *             curr_index += 1
 */
      (__pyx_v_cache_usage[__pyx_v_curr_index]) = __pyx_v_curr_node.children.size();

      /* "executor.pyx":290
 * 
 *             cache_usage[curr_index] = curr_node.children.size()
 *             cached_pair_ids[curr_index] = pair_ids             # <<<<<<<<<<<<<<
 *             curr_index += 1
 * 
 */
      (__pyx_v_cached_pair_ids[__pyx_v_curr_index]) = __pyx_v_pair_ids;

      /* "executor.pyx":291
 *             cache_usage[curr_index] = curr_node.children.size()
 *             cached_pair_ids[curr_index] = pair_ids
 *             curr_index += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_curr_index = (__pyx_v_curr_index + 1);

      /* "executor.pyx":281
 *                cached_pair_ids[curr_index] = curr_pair_ids
 *                curr_index += 1
 *         elif curr_node.node_type.compare("FILTER") == 0:             # <<<<<<<<<<<<<<
 *             print 'FILTER', curr_node.predicates[0].sim_measure_type, curr_node.predicates[0].tokenizer_type, curr_node.predicates[0].comp_op, curr_node.predicates[0].threshold
 *             pair_ids = execute_filter_node1(candset, pair_ids, top_level_node,
 */
    }
    __pyx_L21:;
    __pyx_L5_continue:;
  }

  /* "executor.pyx":190
 * 
 * 
 * cdef pair[vector[pair[int, int]], vector[int]] execute_join_subtree(             # <<<<<<<<<<<<<<
 *                     vector[pair[int, int]]& candset,
 *                     vector[double]& feature_values,
 */

  /* function exit code */
  __Pyx_pretend_to_initialize(&__pyx_r);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("executor.execute_join_subtree", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "executor.pyx":294
 * 
 * 
 * cdef pair[vector[pair[int, int]], vector[int]] merge_candsets(             # <<<<<<<<<<<<<<
 *                                            int num_total_trees,
 *                                            vector[Tree]& processed_trees,
 */

static std::pair<std::vector<std::pair<int,int> > ,std::vector<int> >  __pyx_f_8executor_merge_candsets(int __pyx_v_num_total_trees, std::vector<Tree>  &__pyx_v_processed_trees, std::string const &__pyx_v_working_dir) {
  CYTHON_UNUSED int __pyx_v_i;
  std::string __pyx_v_string_pair;
  std::set<std::string>  __pyx_v_curr_pairs;
  std::map<std::string,int>  __pyx_v_merged_candset;
  std::pair<std::string,int>  __pyx_v_entry;
  Tree __pyx_v_tree;
  PyObject *__pyx_v_file_name = NULL;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_line = NULL;
  CYTHON_UNUSED long __pyx_v_cnt;
  std::vector<std::pair<int,int> >  __pyx_v_candset_to_be_processed;
  std::vector<std::pair<int,int> >  __pyx_v_output_pairs;
  std::vector<int>  __pyx_v_votes;
  std::vector<int>  __pyx_v_pair_id;
  std::pair<std::vector<std::pair<int,int> > ,std::vector<int> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  std::vector<Tree> ::iterator __pyx_t_1;
  Tree __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  std::string __pyx_t_8;
  std::set<std::string> ::iterator __pyx_t_9;
  std::map<std::string,int> ::iterator __pyx_t_10;
  std::pair<std::string,int>  __pyx_t_11;
  int __pyx_t_12;
  std::pair<int,int>  __pyx_t_13;
  std::pair<std::vector<std::pair<int,int> > ,std::vector<int> >  __pyx_t_14;
  __Pyx_RefNannySetupContext("merge_candsets", 0);

  /* "executor.pyx":299
 *                                            const string& working_dir):
 * 
 *     cdef int i=0             # <<<<<<<<<<<<<<
 *     cdef string string_pair
 *     cdef oset[string] curr_pairs
 */
  __pyx_v_i = 0;

  /* "executor.pyx":305
 *     cdef pair[string, int] entry
 *     cdef Tree tree
 *     for tree in processed_trees:             # <<<<<<<<<<<<<<
 *         file_name = working_dir + "/tree_" + str(tree.tree_id)
 *         print file_name
 */
  __pyx_t_1 = __pyx_v_processed_trees.begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_v_processed_trees.end())) break;
    __pyx_t_2 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_v_tree = __pyx_t_2;

    /* "executor.pyx":306
 *     cdef Tree tree
 *     for tree in processed_trees:
 *         file_name = working_dir + "/tree_" + str(tree.tree_id)             # <<<<<<<<<<<<<<
 *         print file_name
 *         f = open(file_name, 'r')
 */
    __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_working_dir); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_tree); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_tree.tree_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_file_name, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "executor.pyx":307
 *     for tree in processed_trees:
 *         file_name = working_dir + "/tree_" + str(tree.tree_id)
 *         print file_name             # <<<<<<<<<<<<<<
 *         f = open(file_name, 'r')
 *         for line in f:
 */
    if (__Pyx_PrintOne(0, __pyx_v_file_name) < 0) __PYX_ERR(0, 307, __pyx_L1_error)

    /* "executor.pyx":308
 *         file_name = working_dir + "/tree_" + str(tree.tree_id)
 *         print file_name
 *         f = open(file_name, 'r')             # <<<<<<<<<<<<<<
 *         for line in f:
 *             curr_pairs.insert(line)
 */
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_file_name);
    __Pyx_GIVEREF(__pyx_v_file_name);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_file_name);
    __Pyx_INCREF(__pyx_n_s_r);
    __Pyx_GIVEREF(__pyx_n_s_r);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_r);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "executor.pyx":309
 *         print file_name
 *         f = open(file_name, 'r')
 *         for line in f:             # <<<<<<<<<<<<<<
 *             curr_pairs.insert(line)
 *         f.close()
 */
    if (likely(PyList_CheckExact(__pyx_v_f)) || PyTuple_CheckExact(__pyx_v_f)) {
      __pyx_t_5 = __pyx_v_f; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_f); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 309, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 309, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 309, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 309, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 309, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 309, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 309, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "executor.pyx":310
 *         f = open(file_name, 'r')
 *         for line in f:
 *             curr_pairs.insert(line)             # <<<<<<<<<<<<<<
 *         f.close()
 *         for string_pair in curr_pairs:
 */
      __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_v_line); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L1_error)
      try {
        __pyx_v_curr_pairs.insert(__pyx_t_8);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 310, __pyx_L1_error)
      }

      /* "executor.pyx":309
 *         print file_name
 *         f = open(file_name, 'r')
 *         for line in f:             # <<<<<<<<<<<<<<
 *             curr_pairs.insert(line)
 *         f.close()
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "executor.pyx":311
 *         for line in f:
 *             curr_pairs.insert(line)
 *         f.close()             # <<<<<<<<<<<<<<
 *         for string_pair in curr_pairs:
 *             merged_candset[string_pair] += 1
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_close); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 311, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 311, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "executor.pyx":312
 *             curr_pairs.insert(line)
 *         f.close()
 *         for string_pair in curr_pairs:             # <<<<<<<<<<<<<<
 *             merged_candset[string_pair] += 1
 *         curr_pairs.clear()
 */
    __pyx_t_9 = __pyx_v_curr_pairs.begin();
    for (;;) {
      if (!(__pyx_t_9 != __pyx_v_curr_pairs.end())) break;
      __pyx_t_8 = *__pyx_t_9;
      ++__pyx_t_9;
      __pyx_v_string_pair = __pyx_t_8;

      /* "executor.pyx":313
 *         f.close()
 *         for string_pair in curr_pairs:
 *             merged_candset[string_pair] += 1             # <<<<<<<<<<<<<<
 *         curr_pairs.clear()
 *     cnt = 0
 */
      __pyx_t_8 = __pyx_v_string_pair;
      (__pyx_v_merged_candset[__pyx_t_8]) = ((__pyx_v_merged_candset[__pyx_t_8]) + 1);

      /* "executor.pyx":312
 *             curr_pairs.insert(line)
 *         f.close()
 *         for string_pair in curr_pairs:             # <<<<<<<<<<<<<<
 *             merged_candset[string_pair] += 1
 *         curr_pairs.clear()
 */
    }

    /* "executor.pyx":314
 *         for string_pair in curr_pairs:
 *             merged_candset[string_pair] += 1
 *         curr_pairs.clear()             # <<<<<<<<<<<<<<
 *     cnt = 0
 *     cdef vector[pair[int, int]] candset_to_be_processed, output_pairs
 */
    __pyx_v_curr_pairs.clear();

    /* "executor.pyx":305
 *     cdef pair[string, int] entry
 *     cdef Tree tree
 *     for tree in processed_trees:             # <<<<<<<<<<<<<<
 *         file_name = working_dir + "/tree_" + str(tree.tree_id)
 *         print file_name
 */
  }

  /* "executor.pyx":315
 *             merged_candset[string_pair] += 1
 *         curr_pairs.clear()
 *     cnt = 0             # <<<<<<<<<<<<<<
 *     cdef vector[pair[int, int]] candset_to_be_processed, output_pairs
 *     cdef vector[int] votes, pair_id
 */
  __pyx_v_cnt = 0;

  /* "executor.pyx":319
 *     cdef vector[int] votes, pair_id
 * 
 *     for entry in merged_candset:             # <<<<<<<<<<<<<<
 *         pair_id = split(entry.first)
 *         if <double>entry.second >= (<double>num_total_trees/2.0):
 */
  __pyx_t_10 = __pyx_v_merged_candset.begin();
  for (;;) {
    if (!(__pyx_t_10 != __pyx_v_merged_candset.end())) break;
    __pyx_t_11 = *__pyx_t_10;
    ++__pyx_t_10;
    __pyx_v_entry = __pyx_t_11;

    /* "executor.pyx":320
 * 
 *     for entry in merged_candset:
 *         pair_id = split(entry.first)             # <<<<<<<<<<<<<<
 *         if <double>entry.second >= (<double>num_total_trees/2.0):
 *             output_pairs.push_back(pair[int, int](pair_id[0], pair_id[1]))
 */
    __pyx_v_pair_id = __pyx_f_8executor_split(__pyx_v_entry.first);

    /* "executor.pyx":321
 *     for entry in merged_candset:
 *         pair_id = split(entry.first)
 *         if <double>entry.second >= (<double>num_total_trees/2.0):             # <<<<<<<<<<<<<<
 *             output_pairs.push_back(pair[int, int](pair_id[0], pair_id[1]))
 *         else:
 */
    __pyx_t_12 = ((((double)__pyx_v_entry.second) >= (((double)__pyx_v_num_total_trees) / 2.0)) != 0);
    if (__pyx_t_12) {

      /* "executor.pyx":322
 *         pair_id = split(entry.first)
 *         if <double>entry.second >= (<double>num_total_trees/2.0):
 *             output_pairs.push_back(pair[int, int](pair_id[0], pair_id[1]))             # <<<<<<<<<<<<<<
 *         else:
 *             candset_to_be_processed.push_back(pair[int, int](pair_id[0],
 */
      try {
        __pyx_t_13 = std::pair<int,int> ((__pyx_v_pair_id[0]), (__pyx_v_pair_id[1]));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 322, __pyx_L1_error)
      }
      try {
        __pyx_v_output_pairs.push_back(__pyx_t_13);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 322, __pyx_L1_error)
      }

      /* "executor.pyx":321
 *     for entry in merged_candset:
 *         pair_id = split(entry.first)
 *         if <double>entry.second >= (<double>num_total_trees/2.0):             # <<<<<<<<<<<<<<
 *             output_pairs.push_back(pair[int, int](pair_id[0], pair_id[1]))
 *         else:
 */
      goto __pyx_L11;
    }

    /* "executor.pyx":324
 *             output_pairs.push_back(pair[int, int](pair_id[0], pair_id[1]))
 *         else:
 *             candset_to_be_processed.push_back(pair[int, int](pair_id[0],             # <<<<<<<<<<<<<<
 *                                                              pair_id[1]))
 *             votes.push_back(entry.second)
 */
    /*else*/ {

      /* "executor.pyx":325
 *         else:
 *             candset_to_be_processed.push_back(pair[int, int](pair_id[0],
 *                                                              pair_id[1]))             # <<<<<<<<<<<<<<
 *             votes.push_back(entry.second)
 * 
 */
      try {
        __pyx_t_13 = std::pair<int,int> ((__pyx_v_pair_id[0]), (__pyx_v_pair_id[1]));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 324, __pyx_L1_error)
      }

      /* "executor.pyx":324
 *             output_pairs.push_back(pair[int, int](pair_id[0], pair_id[1]))
 *         else:
 *             candset_to_be_processed.push_back(pair[int, int](pair_id[0],             # <<<<<<<<<<<<<<
 *                                                              pair_id[1]))
 *             votes.push_back(entry.second)
 */
      try {
        __pyx_v_candset_to_be_processed.push_back(__pyx_t_13);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 324, __pyx_L1_error)
      }

      /* "executor.pyx":326
 *             candset_to_be_processed.push_back(pair[int, int](pair_id[0],
 *                                                              pair_id[1]))
 *             votes.push_back(entry.second)             # <<<<<<<<<<<<<<
 * 
 *     write_output_pairs(output_pairs, working_dir, 0)
 */
      try {
        __pyx_v_votes.push_back(__pyx_v_entry.second);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 326, __pyx_L1_error)
      }
    }
    __pyx_L11:;

    /* "executor.pyx":319
 *     cdef vector[int] votes, pair_id
 * 
 *     for entry in merged_candset:             # <<<<<<<<<<<<<<
 *         pair_id = split(entry.first)
 *         if <double>entry.second >= (<double>num_total_trees/2.0):
 */
  }

  /* "executor.pyx":328
 *             votes.push_back(entry.second)
 * 
 *     write_output_pairs(output_pairs, working_dir, 0)             # <<<<<<<<<<<<<<
 * 
 *     return pair[vector[pair[int, int]], vector[int]](candset_to_be_processed,
 */
  __pyx_f_8executor_write_output_pairs(__pyx_v_output_pairs, __pyx_v_working_dir, 0);

  /* "executor.pyx":330
 *     write_output_pairs(output_pairs, working_dir, 0)
 * 
 *     return pair[vector[pair[int, int]], vector[int]](candset_to_be_processed,             # <<<<<<<<<<<<<<
 *                                                      votes)
 * 
 */
  try {
    __pyx_t_14 = std::pair<std::vector<std::pair<int,int> > ,std::vector<int> > (__pyx_v_candset_to_be_processed, __pyx_v_votes);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 330, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_14;
  goto __pyx_L0;

  /* "executor.pyx":294
 * 
 * 
 * cdef pair[vector[pair[int, int]], vector[int]] merge_candsets(             # <<<<<<<<<<<<<<
 *                                            int num_total_trees,
 *                                            vector[Tree]& processed_trees,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("executor.merge_candsets", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_file_name);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "executor.pyx":334
 * 
 * 
 * cdef void write_candset(vector[pair[int,int]]& candset, int tree_id, int rule_id, const string& working_dir):             # <<<<<<<<<<<<<<
 *     file_path = working_dir + "/tree_" + str(tree_id)
 *     f = open(file_path, 'a+')
 */

static void __pyx_f_8executor_write_candset(std::vector<std::pair<int,int> >  &__pyx_v_candset, int __pyx_v_tree_id, CYTHON_UNUSED int __pyx_v_rule_id, std::string const &__pyx_v_working_dir) {
  PyObject *__pyx_v_file_path = NULL;
  PyObject *__pyx_v_f = NULL;
  std::pair<int,int>  __pyx_v_tuple_pair;
  PyObject *__pyx_v_s = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::vector<std::pair<int,int> > ::iterator __pyx_t_4;
  std::pair<int,int>  __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("write_candset", 0);

  /* "executor.pyx":335
 * 
 * cdef void write_candset(vector[pair[int,int]]& candset, int tree_id, int rule_id, const string& working_dir):
 *     file_path = working_dir + "/tree_" + str(tree_id)             # <<<<<<<<<<<<<<
 *     f = open(file_path, 'a+')
 *     cdef pair[int, int] tuple_pair
 */
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_working_dir); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_tree); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_tree_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_file_path = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "executor.pyx":336
 * cdef void write_candset(vector[pair[int,int]]& candset, int tree_id, int rule_id, const string& working_dir):
 *     file_path = working_dir + "/tree_" + str(tree_id)
 *     f = open(file_path, 'a+')             # <<<<<<<<<<<<<<
 *     cdef pair[int, int] tuple_pair
 *     for tuple_pair in candset:
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_file_path);
  __Pyx_GIVEREF(__pyx_v_file_path);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_file_path);
  __Pyx_INCREF(__pyx_kp_s_a);
  __Pyx_GIVEREF(__pyx_kp_s_a);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_s_a);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_f = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "executor.pyx":338
 *     f = open(file_path, 'a+')
 *     cdef pair[int, int] tuple_pair
 *     for tuple_pair in candset:             # <<<<<<<<<<<<<<
 *         s = str(tuple_pair.first) + ',' + str(tuple_pair.second)
 *         f.write(s + '\n')
 */
  __pyx_t_4 = __pyx_v_candset.begin();
  for (;;) {
    if (!(__pyx_t_4 != __pyx_v_candset.end())) break;
    __pyx_t_5 = *__pyx_t_4;
    ++__pyx_t_4;
    __pyx_v_tuple_pair = __pyx_t_5;

    /* "executor.pyx":339
 *     cdef pair[int, int] tuple_pair
 *     for tuple_pair in candset:
 *         s = str(tuple_pair.first) + ',' + str(tuple_pair.second)             # <<<<<<<<<<<<<<
 *         f.write(s + '\n')
 *     f.close()
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_tuple_pair.first); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_tuple_pair.second); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "executor.pyx":340
 *     for tuple_pair in candset:
 *         s = str(tuple_pair.first) + ',' + str(tuple_pair.second)
 *         f.write(s + '\n')             # <<<<<<<<<<<<<<
 *     f.close()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_v_s, __pyx_kp_s__2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 340, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "executor.pyx":338
 *     f = open(file_path, 'a+')
 *     cdef pair[int, int] tuple_pair
 *     for tuple_pair in candset:             # <<<<<<<<<<<<<<
 *         s = str(tuple_pair.first) + ',' + str(tuple_pair.second)
 *         f.write(s + '\n')
 */
  }

  /* "executor.pyx":341
 *         s = str(tuple_pair.first) + ',' + str(tuple_pair.second)
 *         f.write(s + '\n')
 *     f.close()             # <<<<<<<<<<<<<<
 * 
 * cdef void write_candset_using_pair_ids(vector[pair[int,int]]& candset, vector[int]& pair_ids,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_close); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":334
 * 
 * 
 * cdef void write_candset(vector[pair[int,int]]& candset, int tree_id, int rule_id, const string& working_dir):             # <<<<<<<<<<<<<<
 *     file_path = working_dir + "/tree_" + str(tree_id)
 *     f = open(file_path, 'a+')
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("executor.write_candset", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_file_path);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_RefNannyFinishContext();
}

/* "executor.pyx":343
 *     f.close()
 * 
 * cdef void write_candset_using_pair_ids(vector[pair[int,int]]& candset, vector[int]& pair_ids,             # <<<<<<<<<<<<<<
 *                                        int tree_id, int rule_id, const string& working_dir):
 *     file_path = working_dir + "/tree_" + str(tree_id)
 */

static void __pyx_f_8executor_write_candset_using_pair_ids(std::vector<std::pair<int,int> >  &__pyx_v_candset, std::vector<int>  &__pyx_v_pair_ids, int __pyx_v_tree_id, CYTHON_UNUSED int __pyx_v_rule_id, std::string const &__pyx_v_working_dir) {
  PyObject *__pyx_v_file_path = NULL;
  PyObject *__pyx_v_f = NULL;
  std::pair<int,int>  __pyx_v_tuple_pair;
  int __pyx_v_pair_id;
  PyObject *__pyx_v_s = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::vector<int> ::iterator __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("write_candset_using_pair_ids", 0);

  /* "executor.pyx":345
 * cdef void write_candset_using_pair_ids(vector[pair[int,int]]& candset, vector[int]& pair_ids,
 *                                        int tree_id, int rule_id, const string& working_dir):
 *     file_path = working_dir + "/tree_" + str(tree_id)             # <<<<<<<<<<<<<<
 *     f = open(file_path, 'a+')
 *     cdef pair[int, int] tuple_pair
 */
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_working_dir); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_tree); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_tree_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_file_path = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "executor.pyx":346
 *                                        int tree_id, int rule_id, const string& working_dir):
 *     file_path = working_dir + "/tree_" + str(tree_id)
 *     f = open(file_path, 'a+')             # <<<<<<<<<<<<<<
 *     cdef pair[int, int] tuple_pair
 *     cdef int pair_id
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_file_path);
  __Pyx_GIVEREF(__pyx_v_file_path);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_file_path);
  __Pyx_INCREF(__pyx_kp_s_a);
  __Pyx_GIVEREF(__pyx_kp_s_a);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_s_a);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_f = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "executor.pyx":349
 *     cdef pair[int, int] tuple_pair
 *     cdef int pair_id
 *     for pair_id in pair_ids:             # <<<<<<<<<<<<<<
 *         tuple_pair = candset[pair_id]
 *         s = str(tuple_pair.first) + ',' + str(tuple_pair.second)
 */
  __pyx_t_4 = __pyx_v_pair_ids.begin();
  for (;;) {
    if (!(__pyx_t_4 != __pyx_v_pair_ids.end())) break;
    __pyx_t_5 = *__pyx_t_4;
    ++__pyx_t_4;
    __pyx_v_pair_id = __pyx_t_5;

    /* "executor.pyx":350
 *     cdef int pair_id
 *     for pair_id in pair_ids:
 *         tuple_pair = candset[pair_id]             # <<<<<<<<<<<<<<
 *         s = str(tuple_pair.first) + ',' + str(tuple_pair.second)
 *         f.write(s + '\n')
 */
    __pyx_v_tuple_pair = (__pyx_v_candset[__pyx_v_pair_id]);

    /* "executor.pyx":351
 *     for pair_id in pair_ids:
 *         tuple_pair = candset[pair_id]
 *         s = str(tuple_pair.first) + ',' + str(tuple_pair.second)             # <<<<<<<<<<<<<<
 *         f.write(s + '\n')
 *     f.close()
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_tuple_pair.first); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_tuple_pair.second); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "executor.pyx":352
 *         tuple_pair = candset[pair_id]
 *         s = str(tuple_pair.first) + ',' + str(tuple_pair.second)
 *         f.write(s + '\n')             # <<<<<<<<<<<<<<
 *     f.close()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_v_s, __pyx_kp_s__2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 352, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "executor.pyx":349
 *     cdef pair[int, int] tuple_pair
 *     cdef int pair_id
 *     for pair_id in pair_ids:             # <<<<<<<<<<<<<<
 *         tuple_pair = candset[pair_id]
 *         s = str(tuple_pair.first) + ',' + str(tuple_pair.second)
 */
  }

  /* "executor.pyx":353
 *         s = str(tuple_pair.first) + ',' + str(tuple_pair.second)
 *         f.write(s + '\n')
 *     f.close()             # <<<<<<<<<<<<<<
 * 
 * cdef void write_output_pairs(vector[pair[int,int]]& output_pairs, const string& working_dir, int label):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_close); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":343
 *     f.close()
 * 
 * cdef void write_candset_using_pair_ids(vector[pair[int,int]]& candset, vector[int]& pair_ids,             # <<<<<<<<<<<<<<
 *                                        int tree_id, int rule_id, const string& working_dir):
 *     file_path = working_dir + "/tree_" + str(tree_id)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("executor.write_candset_using_pair_ids", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_file_path);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_RefNannyFinishContext();
}

/* "executor.pyx":355
 *     f.close()
 * 
 * cdef void write_output_pairs(vector[pair[int,int]]& output_pairs, const string& working_dir, int label):             # <<<<<<<<<<<<<<
 *     file_path = working_dir + "/output_" + str(label)
 *     f = open(file_path, 'w')
 */

static void __pyx_f_8executor_write_output_pairs(std::vector<std::pair<int,int> >  &__pyx_v_output_pairs, std::string const &__pyx_v_working_dir, int __pyx_v_label) {
  PyObject *__pyx_v_file_path = NULL;
  PyObject *__pyx_v_f = NULL;
  std::pair<int,int>  __pyx_v_tuple_pair;
  PyObject *__pyx_v_s = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::vector<std::pair<int,int> > ::iterator __pyx_t_4;
  std::pair<int,int>  __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("write_output_pairs", 0);

  /* "executor.pyx":356
 * 
 * cdef void write_output_pairs(vector[pair[int,int]]& output_pairs, const string& working_dir, int label):
 *     file_path = working_dir + "/output_" + str(label)             # <<<<<<<<<<<<<<
 *     f = open(file_path, 'w')
 *     cdef pair[int, int] tuple_pair
 */
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_working_dir); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_output); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_file_path = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "executor.pyx":357
 * cdef void write_output_pairs(vector[pair[int,int]]& output_pairs, const string& working_dir, int label):
 *     file_path = working_dir + "/output_" + str(label)
 *     f = open(file_path, 'w')             # <<<<<<<<<<<<<<
 *     cdef pair[int, int] tuple_pair
 *     for tuple_pair in output_pairs:
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_file_path);
  __Pyx_GIVEREF(__pyx_v_file_path);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_file_path);
  __Pyx_INCREF(__pyx_n_s_w);
  __Pyx_GIVEREF(__pyx_n_s_w);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_w);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_f = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "executor.pyx":359
 *     f = open(file_path, 'w')
 *     cdef pair[int, int] tuple_pair
 *     for tuple_pair in output_pairs:             # <<<<<<<<<<<<<<
 *         s = str(tuple_pair.first) + ',' + str(tuple_pair.second)
 *         f.write(s + '\n')
 */
  __pyx_t_4 = __pyx_v_output_pairs.begin();
  for (;;) {
    if (!(__pyx_t_4 != __pyx_v_output_pairs.end())) break;
    __pyx_t_5 = *__pyx_t_4;
    ++__pyx_t_4;
    __pyx_v_tuple_pair = __pyx_t_5;

    /* "executor.pyx":360
 *     cdef pair[int, int] tuple_pair
 *     for tuple_pair in output_pairs:
 *         s = str(tuple_pair.first) + ',' + str(tuple_pair.second)             # <<<<<<<<<<<<<<
 *         f.write(s + '\n')
 *     f.close()
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_tuple_pair.first); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_tuple_pair.second); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "executor.pyx":361
 *     for tuple_pair in output_pairs:
 *         s = str(tuple_pair.first) + ',' + str(tuple_pair.second)
 *         f.write(s + '\n')             # <<<<<<<<<<<<<<
 *     f.close()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_v_s, __pyx_kp_s__2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "executor.pyx":359
 *     f = open(file_path, 'w')
 *     cdef pair[int, int] tuple_pair
 *     for tuple_pair in output_pairs:             # <<<<<<<<<<<<<<
 *         s = str(tuple_pair.first) + ',' + str(tuple_pair.second)
 *         f.write(s + '\n')
 */
  }

  /* "executor.pyx":362
 *         s = str(tuple_pair.first) + ',' + str(tuple_pair.second)
 *         f.write(s + '\n')
 *     f.close()             # <<<<<<<<<<<<<<
 * 
 * cdef pair[vector[pair[int, int]], vector[double]] execute_join_node(vector[string]& lstrings, vector[string]& rstrings,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_close); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":355
 *     f.close()
 * 
 * cdef void write_output_pairs(vector[pair[int,int]]& output_pairs, const string& working_dir, int label):             # <<<<<<<<<<<<<<
 *     file_path = working_dir + "/output_" + str(label)
 *     f = open(file_path, 'w')
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("executor.write_output_pairs", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_file_path);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_RefNannyFinishContext();
}

/* "executor.pyx":364
 *     f.close()
 * 
 * cdef pair[vector[pair[int, int]], vector[double]] execute_join_node(vector[string]& lstrings, vector[string]& rstrings,             # <<<<<<<<<<<<<<
 *                             Predicatecpp predicate, int n_jobs, const string& working_dir):
 *     cdef vector[vector[int]] ltokens, rtokens
 */

static std::pair<std::vector<std::pair<int,int> > ,std::vector<double> >  __pyx_f_8executor_execute_join_node(std::vector<std::string>  &__pyx_v_lstrings, std::vector<std::string>  &__pyx_v_rstrings, Predicatecpp __pyx_v_predicate, int __pyx_v_n_jobs, std::string const &__pyx_v_working_dir) {
  std::vector<std::vector<int> >  __pyx_v_ltokens;
  std::vector<std::vector<int> >  __pyx_v_rtokens;
  std::pair<std::vector<std::pair<int,int> > ,std::vector<double> >  __pyx_v_output;
  std::pair<std::vector<std::pair<int,int> > ,std::vector<double> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("execute_join_node", 0);

  /* "executor.pyx":370
 *     cdef pair[vector[pair[int, int]], vector[double]] output
 * 
 *     if predicate.sim_measure_type.compare('COSINE') == 0:             # <<<<<<<<<<<<<<
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         output = set_sim_join(ltokens, rtokens, 0, predicate.threshold, n_jobs)
 */
  __pyx_t_1 = ((__pyx_v_predicate.sim_measure_type.compare(__pyx_k_COSINE) == 0) != 0);
  if (__pyx_t_1) {

    /* "executor.pyx":371
 * 
 *     if predicate.sim_measure_type.compare('COSINE') == 0:
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)             # <<<<<<<<<<<<<<
 *         output = set_sim_join(ltokens, rtokens, 0, predicate.threshold, n_jobs)
 *     elif predicate.sim_measure_type.compare('DICE') == 0:
 */
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_predicate.tokenizer_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_working_dir); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_load_tok(__pyx_t_2, __pyx_t_3, __pyx_v_ltokens, __pyx_v_rtokens, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "executor.pyx":372
 *     if predicate.sim_measure_type.compare('COSINE') == 0:
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         output = set_sim_join(ltokens, rtokens, 0, predicate.threshold, n_jobs)             # <<<<<<<<<<<<<<
 *     elif predicate.sim_measure_type.compare('DICE') == 0:
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 */
    __pyx_v_output = __pyx_f_16py_stringsimjoin_8apply_rf_12set_sim_join_set_sim_join(__pyx_v_ltokens, __pyx_v_rtokens, 0, __pyx_v_predicate.threshold, __pyx_v_n_jobs, 0);

    /* "executor.pyx":370
 *     cdef pair[vector[pair[int, int]], vector[double]] output
 * 
 *     if predicate.sim_measure_type.compare('COSINE') == 0:             # <<<<<<<<<<<<<<
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         output = set_sim_join(ltokens, rtokens, 0, predicate.threshold, n_jobs)
 */
    goto __pyx_L3;
  }

  /* "executor.pyx":373
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         output = set_sim_join(ltokens, rtokens, 0, predicate.threshold, n_jobs)
 *     elif predicate.sim_measure_type.compare('DICE') == 0:             # <<<<<<<<<<<<<<
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         output = set_sim_join(ltokens, rtokens, 1, predicate.threshold, n_jobs)
 */
  __pyx_t_1 = ((__pyx_v_predicate.sim_measure_type.compare(__pyx_k_DICE) == 0) != 0);
  if (__pyx_t_1) {

    /* "executor.pyx":374
 *         output = set_sim_join(ltokens, rtokens, 0, predicate.threshold, n_jobs)
 *     elif predicate.sim_measure_type.compare('DICE') == 0:
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)             # <<<<<<<<<<<<<<
 *         output = set_sim_join(ltokens, rtokens, 1, predicate.threshold, n_jobs)
 *     elif predicate.sim_measure_type.compare('JACCARD') == 0:
 */
    __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_predicate.tokenizer_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_working_dir); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_load_tok(__pyx_t_3, __pyx_t_2, __pyx_v_ltokens, __pyx_v_rtokens, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "executor.pyx":375
 *     elif predicate.sim_measure_type.compare('DICE') == 0:
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         output = set_sim_join(ltokens, rtokens, 1, predicate.threshold, n_jobs)             # <<<<<<<<<<<<<<
 *     elif predicate.sim_measure_type.compare('JACCARD') == 0:
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 */
    __pyx_v_output = __pyx_f_16py_stringsimjoin_8apply_rf_12set_sim_join_set_sim_join(__pyx_v_ltokens, __pyx_v_rtokens, 1, __pyx_v_predicate.threshold, __pyx_v_n_jobs, 0);

    /* "executor.pyx":373
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         output = set_sim_join(ltokens, rtokens, 0, predicate.threshold, n_jobs)
 *     elif predicate.sim_measure_type.compare('DICE') == 0:             # <<<<<<<<<<<<<<
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         output = set_sim_join(ltokens, rtokens, 1, predicate.threshold, n_jobs)
 */
    goto __pyx_L3;
  }

  /* "executor.pyx":376
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         output = set_sim_join(ltokens, rtokens, 1, predicate.threshold, n_jobs)
 *     elif predicate.sim_measure_type.compare('JACCARD') == 0:             # <<<<<<<<<<<<<<
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         output = set_sim_join(ltokens, rtokens, 2, predicate.threshold, n_jobs)
 */
  __pyx_t_1 = ((__pyx_v_predicate.sim_measure_type.compare(__pyx_k_JACCARD) == 0) != 0);
  if (__pyx_t_1) {

    /* "executor.pyx":377
 *         output = set_sim_join(ltokens, rtokens, 1, predicate.threshold, n_jobs)
 *     elif predicate.sim_measure_type.compare('JACCARD') == 0:
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)             # <<<<<<<<<<<<<<
 *         output = set_sim_join(ltokens, rtokens, 2, predicate.threshold, n_jobs)
 *     elif predicate.sim_measure_type.compare('OVERLAP_COEFFICIENT') == 0:
 */
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_predicate.tokenizer_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_working_dir); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_load_tok(__pyx_t_2, __pyx_t_3, __pyx_v_ltokens, __pyx_v_rtokens, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "executor.pyx":378
 *     elif predicate.sim_measure_type.compare('JACCARD') == 0:
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         output = set_sim_join(ltokens, rtokens, 2, predicate.threshold, n_jobs)             # <<<<<<<<<<<<<<
 *     elif predicate.sim_measure_type.compare('OVERLAP_COEFFICIENT') == 0:
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 */
    __pyx_v_output = __pyx_f_16py_stringsimjoin_8apply_rf_12set_sim_join_set_sim_join(__pyx_v_ltokens, __pyx_v_rtokens, 2, __pyx_v_predicate.threshold, __pyx_v_n_jobs, 0);

    /* "executor.pyx":376
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         output = set_sim_join(ltokens, rtokens, 1, predicate.threshold, n_jobs)
 *     elif predicate.sim_measure_type.compare('JACCARD') == 0:             # <<<<<<<<<<<<<<
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         output = set_sim_join(ltokens, rtokens, 2, predicate.threshold, n_jobs)
 */
    goto __pyx_L3;
  }

  /* "executor.pyx":379
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         output = set_sim_join(ltokens, rtokens, 2, predicate.threshold, n_jobs)
 *     elif predicate.sim_measure_type.compare('OVERLAP_COEFFICIENT') == 0:             # <<<<<<<<<<<<<<
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         output = ov_coeff_join(ltokens, rtokens, predicate.threshold, n_jobs)
 */
  __pyx_t_1 = ((__pyx_v_predicate.sim_measure_type.compare(__pyx_k_OVERLAP_COEFFICIENT) == 0) != 0);
  if (__pyx_t_1) {

    /* "executor.pyx":380
 *         output = set_sim_join(ltokens, rtokens, 2, predicate.threshold, n_jobs)
 *     elif predicate.sim_measure_type.compare('OVERLAP_COEFFICIENT') == 0:
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)             # <<<<<<<<<<<<<<
 *         output = ov_coeff_join(ltokens, rtokens, predicate.threshold, n_jobs)
 *     elif predicate.sim_measure_type.compare('EDIT_DISTANCE') == 0:
 */
    __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_predicate.tokenizer_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_working_dir); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_load_tok(__pyx_t_3, __pyx_t_2, __pyx_v_ltokens, __pyx_v_rtokens, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "executor.pyx":381
 *     elif predicate.sim_measure_type.compare('OVERLAP_COEFFICIENT') == 0:
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         output = ov_coeff_join(ltokens, rtokens, predicate.threshold, n_jobs)             # <<<<<<<<<<<<<<
 *     elif predicate.sim_measure_type.compare('EDIT_DISTANCE') == 0:
 *         load_tok('qg2_bag', working_dir, ltokens, rtokens)
 */
    __pyx_v_output = __pyx_f_16py_stringsimjoin_8apply_rf_24overlap_coefficient_join_ov_coeff_join(__pyx_v_ltokens, __pyx_v_rtokens, __pyx_v_predicate.threshold, __pyx_v_n_jobs, 0);

    /* "executor.pyx":379
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         output = set_sim_join(ltokens, rtokens, 2, predicate.threshold, n_jobs)
 *     elif predicate.sim_measure_type.compare('OVERLAP_COEFFICIENT') == 0:             # <<<<<<<<<<<<<<
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         output = ov_coeff_join(ltokens, rtokens, predicate.threshold, n_jobs)
 */
    goto __pyx_L3;
  }

  /* "executor.pyx":382
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         output = ov_coeff_join(ltokens, rtokens, predicate.threshold, n_jobs)
 *     elif predicate.sim_measure_type.compare('EDIT_DISTANCE') == 0:             # <<<<<<<<<<<<<<
 *         load_tok('qg2_bag', working_dir, ltokens, rtokens)
 *         output = ed_join(ltokens, rtokens, 2, predicate.threshold,
 */
  __pyx_t_1 = ((__pyx_v_predicate.sim_measure_type.compare(__pyx_k_EDIT_DISTANCE) == 0) != 0);
  if (__pyx_t_1) {

    /* "executor.pyx":383
 *         output = ov_coeff_join(ltokens, rtokens, predicate.threshold, n_jobs)
 *     elif predicate.sim_measure_type.compare('EDIT_DISTANCE') == 0:
 *         load_tok('qg2_bag', working_dir, ltokens, rtokens)             # <<<<<<<<<<<<<<
 *         output = ed_join(ltokens, rtokens, 2, predicate.threshold,
 *                          lstrings, rstrings, n_jobs)
 */
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_working_dir); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_load_tok(__pyx_n_s_qg2_bag, __pyx_t_2, __pyx_v_ltokens, __pyx_v_rtokens, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "executor.pyx":384
 *     elif predicate.sim_measure_type.compare('EDIT_DISTANCE') == 0:
 *         load_tok('qg2_bag', working_dir, ltokens, rtokens)
 *         output = ed_join(ltokens, rtokens, 2, predicate.threshold,             # <<<<<<<<<<<<<<
 *                          lstrings, rstrings, n_jobs)
 *     return output
 */
    __pyx_v_output = __pyx_f_16py_stringsimjoin_8apply_rf_18edit_distance_join_ed_join(__pyx_v_ltokens, __pyx_v_rtokens, 2, __pyx_v_predicate.threshold, __pyx_v_lstrings, __pyx_v_rstrings, __pyx_v_n_jobs, 0);

    /* "executor.pyx":382
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         output = ov_coeff_join(ltokens, rtokens, predicate.threshold, n_jobs)
 *     elif predicate.sim_measure_type.compare('EDIT_DISTANCE') == 0:             # <<<<<<<<<<<<<<
 *         load_tok('qg2_bag', working_dir, ltokens, rtokens)
 *         output = ed_join(ltokens, rtokens, 2, predicate.threshold,
 */
  }
  __pyx_L3:;

  /* "executor.pyx":386
 *         output = ed_join(ltokens, rtokens, 2, predicate.threshold,
 *                          lstrings, rstrings, n_jobs)
 *     return output             # <<<<<<<<<<<<<<
 * 
 * cdef vector[pair[int, int]] execute_filter_node(vector[pair[int, int]]& candset,
 */
  __pyx_r = __pyx_v_output;
  goto __pyx_L0;

  /* "executor.pyx":364
 *     f.close()
 * 
 * cdef pair[vector[pair[int, int]], vector[double]] execute_join_node(vector[string]& lstrings, vector[string]& rstrings,             # <<<<<<<<<<<<<<
 *                             Predicatecpp predicate, int n_jobs, const string& working_dir):
 *     cdef vector[vector[int]] ltokens, rtokens
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("executor.execute_join_node", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "executor.pyx":388
 *     return output
 * 
 * cdef vector[pair[int, int]] execute_filter_node(vector[pair[int, int]]& candset,             # <<<<<<<<<<<<<<
 *                             vector[string]& lstrings, vector[string]& rstrings,
 *                             Predicatecpp predicate, int n_jobs, const string& working_dir):
 */

static std::vector<std::pair<int,int> >  __pyx_f_8executor_execute_filter_node(std::vector<std::pair<int,int> >  &__pyx_v_candset, std::vector<std::string>  &__pyx_v_lstrings, std::vector<std::string>  &__pyx_v_rstrings, Predicatecpp __pyx_v_predicate, int __pyx_v_n_jobs, std::string const &__pyx_v_working_dir) {
  std::vector<std::vector<int> >  __pyx_v_ltokens;
  std::vector<std::vector<int> >  __pyx_v_rtokens;
  std::vector<std::pair<int,int> >  __pyx_v_partitions;
  std::vector<std::pair<int,int> >  __pyx_v_final_output_pairs;
  std::vector<std::pair<int,int> >  __pyx_v_part_pairs;
  std::vector<std::vector<std::pair<int,int> > >  __pyx_v_output_pairs;
  int __pyx_v_n;
  int __pyx_v_start;
  int __pyx_v_end;
  int __pyx_v_i;
  PyObject *__pyx_v_partition_size = NULL;
  int __pyx_v_sim_type;
  int __pyx_v_comp_type;
  std::vector<std::pair<int,int> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  std::pair<int,int>  __pyx_t_9;
  std::vector<std::pair<int,int> >  __pyx_t_10;
  std::vector<std::vector<std::pair<int,int> > > ::iterator __pyx_t_11;
  __Pyx_RefNannySetupContext("execute_filter_node", 0);

  /* "executor.pyx":392
 *                             Predicatecpp predicate, int n_jobs, const string& working_dir):
 *     cdef vector[vector[int]] ltokens, rtokens
 *     if predicate.is_tok_sim_measure:             # <<<<<<<<<<<<<<
 *         print 'before tok'
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 */
  __pyx_t_1 = (__pyx_v_predicate.is_tok_sim_measure != 0);
  if (__pyx_t_1) {

    /* "executor.pyx":393
 *     cdef vector[vector[int]] ltokens, rtokens
 *     if predicate.is_tok_sim_measure:
 *         print 'before tok'             # <<<<<<<<<<<<<<
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         print 'loaded tok'
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_before_tok) < 0) __PYX_ERR(0, 393, __pyx_L1_error)

    /* "executor.pyx":394
 *     if predicate.is_tok_sim_measure:
 *         print 'before tok'
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)             # <<<<<<<<<<<<<<
 *         print 'loaded tok'
 *     cdef vector[pair[int, int]] partitions, final_output_pairs, part_pairs
 */
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_predicate.tokenizer_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_working_dir); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_load_tok(__pyx_t_2, __pyx_t_3, __pyx_v_ltokens, __pyx_v_rtokens, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "executor.pyx":395
 *         print 'before tok'
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         print 'loaded tok'             # <<<<<<<<<<<<<<
 *     cdef vector[pair[int, int]] partitions, final_output_pairs, part_pairs
 *     cdef vector[vector[pair[int, int]]] output_pairs
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_loaded_tok) < 0) __PYX_ERR(0, 395, __pyx_L1_error)

    /* "executor.pyx":392
 *                             Predicatecpp predicate, int n_jobs, const string& working_dir):
 *     cdef vector[vector[int]] ltokens, rtokens
 *     if predicate.is_tok_sim_measure:             # <<<<<<<<<<<<<<
 *         print 'before tok'
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 */
  }

  /* "executor.pyx":398
 *     cdef vector[pair[int, int]] partitions, final_output_pairs, part_pairs
 *     cdef vector[vector[pair[int, int]]] output_pairs
 *     cdef int n = candset.size(), start=0, end, i             # <<<<<<<<<<<<<<
 * 
 *     partition_size = <int>(<float> n / <float> n_jobs)
 */
  __pyx_v_n = __pyx_v_candset.size();
  __pyx_v_start = 0;

  /* "executor.pyx":400
 *     cdef int n = candset.size(), start=0, end, i
 * 
 *     partition_size = <int>(<float> n / <float> n_jobs)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(n_jobs):
 */
  if (unlikely(((float)__pyx_v_n_jobs) == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 400, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_From_int(((int)(((float)__pyx_v_n) / ((float)__pyx_v_n_jobs)))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_partition_size = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "executor.pyx":402
 *     partition_size = <int>(<float> n / <float> n_jobs)
 * 
 *     for i in range(n_jobs):             # <<<<<<<<<<<<<<
 *         end = start + partition_size
 *         if end > n or i == n_jobs - 1:
 */
  __pyx_t_4 = __pyx_v_n_jobs;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "executor.pyx":403
 * 
 *     for i in range(n_jobs):
 *         end = start + partition_size             # <<<<<<<<<<<<<<
 *         if end > n or i == n_jobs - 1:
 *             end = n
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_start); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_v_partition_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_end = __pyx_t_7;

    /* "executor.pyx":404
 *     for i in range(n_jobs):
 *         end = start + partition_size
 *         if end > n or i == n_jobs - 1:             # <<<<<<<<<<<<<<
 *             end = n
 *         partitions.push_back(pair[int, int](start, end))
 */
    __pyx_t_8 = ((__pyx_v_end > __pyx_v_n) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_1 = __pyx_t_8;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_8 = ((__pyx_v_i == (__pyx_v_n_jobs - 1)) != 0);
    __pyx_t_1 = __pyx_t_8;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_1) {

      /* "executor.pyx":405
 *         end = start + partition_size
 *         if end > n or i == n_jobs - 1:
 *             end = n             # <<<<<<<<<<<<<<
 *         partitions.push_back(pair[int, int](start, end))
 * 
 */
      __pyx_v_end = __pyx_v_n;

      /* "executor.pyx":404
 *     for i in range(n_jobs):
 *         end = start + partition_size
 *         if end > n or i == n_jobs - 1:             # <<<<<<<<<<<<<<
 *             end = n
 *         partitions.push_back(pair[int, int](start, end))
 */
    }

    /* "executor.pyx":406
 *         if end > n or i == n_jobs - 1:
 *             end = n
 *         partitions.push_back(pair[int, int](start, end))             # <<<<<<<<<<<<<<
 * 
 *         start = end
 */
    try {
      __pyx_t_9 = std::pair<int,int> (__pyx_v_start, __pyx_v_end);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 406, __pyx_L1_error)
    }
    try {
      __pyx_v_partitions.push_back(__pyx_t_9);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 406, __pyx_L1_error)
    }

    /* "executor.pyx":408
 *         partitions.push_back(pair[int, int](start, end))
 * 
 *         start = end             # <<<<<<<<<<<<<<
 *         output_pairs.push_back(vector[pair[int, int]]())
 * 
 */
    __pyx_v_start = __pyx_v_end;

    /* "executor.pyx":409
 * 
 *         start = end
 *         output_pairs.push_back(vector[pair[int, int]]())             # <<<<<<<<<<<<<<
 * 
 *     cdef int sim_type, comp_type
 */
    try {
      __pyx_t_10 = std::vector<std::pair<int,int> > ();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 409, __pyx_L1_error)
    }
    try {
      __pyx_v_output_pairs.push_back(__pyx_t_10);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 409, __pyx_L1_error)
    }
  }

  /* "executor.pyx":413
 *     cdef int sim_type, comp_type
 * 
 *     sim_type = get_sim_type(predicate.sim_measure_type)             # <<<<<<<<<<<<<<
 *     comp_type = get_comp_type(predicate.comp_op)
 *     print 'parallen begin'
 */
  __pyx_v_sim_type = __pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_sim_type(__pyx_v_predicate.sim_measure_type);

  /* "executor.pyx":414
 * 
 *     sim_type = get_sim_type(predicate.sim_measure_type)
 *     comp_type = get_comp_type(predicate.comp_op)             # <<<<<<<<<<<<<<
 *     print 'parallen begin'
 *     for i in prange(n_jobs, nogil=True):
 */
  __pyx_v_comp_type = __pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_comp_type(__pyx_v_predicate.comp_op);

  /* "executor.pyx":415
 *     sim_type = get_sim_type(predicate.sim_measure_type)
 *     comp_type = get_comp_type(predicate.comp_op)
 *     print 'parallen begin'             # <<<<<<<<<<<<<<
 *     for i in prange(n_jobs, nogil=True):
 *         execute_filter_node_part(partitions[i], candset, ltokens, rtokens,
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_parallen_begin) < 0) __PYX_ERR(0, 415, __pyx_L1_error)

  /* "executor.pyx":416
 *     comp_type = get_comp_type(predicate.comp_op)
 *     print 'parallen begin'
 *     for i in prange(n_jobs, nogil=True):             # <<<<<<<<<<<<<<
 *         execute_filter_node_part(partitions[i], candset, ltokens, rtokens,
 *                                  lstrings, rstrings,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        __pyx_t_4 = __pyx_v_n_jobs;
        if (1 == 0) abort();
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_6 = (__pyx_t_4 - 0 + 1 - 1/abs(1)) / 1;
            if (__pyx_t_6 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #pragma omp for firstprivate(__pyx_v_i) lastprivate(__pyx_v_i)
                    #endif /* _OPENMP */
                    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_6; __pyx_t_5++){
                        {
                            __pyx_v_i = (int)(0 + 1 * __pyx_t_5);

                            /* "executor.pyx":417
 *     print 'parallen begin'
 *     for i in prange(n_jobs, nogil=True):
 *         execute_filter_node_part(partitions[i], candset, ltokens, rtokens,             # <<<<<<<<<<<<<<
 *                                  lstrings, rstrings,
 *                                  predicate, sim_type, comp_type, output_pairs[i])
 */
                            __pyx_f_8executor_execute_filter_node_part((__pyx_v_partitions[__pyx_v_i]), __pyx_v_candset, __pyx_v_ltokens, __pyx_v_rtokens, __pyx_v_lstrings, __pyx_v_rstrings, __pyx_v_predicate, __pyx_v_sim_type, __pyx_v_comp_type, (__pyx_v_output_pairs[__pyx_v_i]));
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "executor.pyx":416
 *     comp_type = get_comp_type(predicate.comp_op)
 *     print 'parallen begin'
 *     for i in prange(n_jobs, nogil=True):             # <<<<<<<<<<<<<<
 *         execute_filter_node_part(partitions[i], candset, ltokens, rtokens,
 *                                  lstrings, rstrings,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L11;
        }
        __pyx_L11:;
      }
  }

  /* "executor.pyx":420
 *                                  lstrings, rstrings,
 *                                  predicate, sim_type, comp_type, output_pairs[i])
 *     print 'parallen end'             # <<<<<<<<<<<<<<
 *     for part_pairs in output_pairs:
 *         final_output_pairs.insert(final_output_pairs.end(), part_pairs.begin(), part_pairs.end())
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_parallen_end) < 0) __PYX_ERR(0, 420, __pyx_L1_error)

  /* "executor.pyx":421
 *                                  predicate, sim_type, comp_type, output_pairs[i])
 *     print 'parallen end'
 *     for part_pairs in output_pairs:             # <<<<<<<<<<<<<<
 *         final_output_pairs.insert(final_output_pairs.end(), part_pairs.begin(), part_pairs.end())
 * 
 */
  __pyx_t_11 = __pyx_v_output_pairs.begin();
  for (;;) {
    if (!(__pyx_t_11 != __pyx_v_output_pairs.end())) break;
    __pyx_t_10 = *__pyx_t_11;
    ++__pyx_t_11;
    __pyx_v_part_pairs = __pyx_t_10;

    /* "executor.pyx":422
 *     print 'parallen end'
 *     for part_pairs in output_pairs:
 *         final_output_pairs.insert(final_output_pairs.end(), part_pairs.begin(), part_pairs.end())             # <<<<<<<<<<<<<<
 * 
 *     return final_output_pairs
 */
    try {
      __pyx_v_final_output_pairs.insert(__pyx_v_final_output_pairs.end(), __pyx_v_part_pairs.begin(), __pyx_v_part_pairs.end());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 422, __pyx_L1_error)
    }

    /* "executor.pyx":421
 *                                  predicate, sim_type, comp_type, output_pairs[i])
 *     print 'parallen end'
 *     for part_pairs in output_pairs:             # <<<<<<<<<<<<<<
 *         final_output_pairs.insert(final_output_pairs.end(), part_pairs.begin(), part_pairs.end())
 * 
 */
  }

  /* "executor.pyx":424
 *         final_output_pairs.insert(final_output_pairs.end(), part_pairs.begin(), part_pairs.end())
 * 
 *     return final_output_pairs             # <<<<<<<<<<<<<<
 * 
 * cdef void execute_filter_node_part(pair[int, int] partition,
 */
  __pyx_r = __pyx_v_final_output_pairs;
  goto __pyx_L0;

  /* "executor.pyx":388
 *     return output
 * 
 * cdef vector[pair[int, int]] execute_filter_node(vector[pair[int, int]]& candset,             # <<<<<<<<<<<<<<
 *                             vector[string]& lstrings, vector[string]& rstrings,
 *                             Predicatecpp predicate, int n_jobs, const string& working_dir):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("executor.execute_filter_node", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_partition_size);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "executor.pyx":426
 *     return final_output_pairs
 * 
 * cdef void execute_filter_node_part(pair[int, int] partition,             # <<<<<<<<<<<<<<
 *                                    vector[pair[int, int]]& candset,
 *                                    vector[vector[int]]& ltokens,
 */

static void __pyx_f_8executor_execute_filter_node_part(std::pair<int,int>  __pyx_v_partition, std::vector<std::pair<int,int> >  &__pyx_v_candset, std::vector<std::vector<int> >  &__pyx_v_ltokens, std::vector<std::vector<int> >  &__pyx_v_rtokens, std::vector<std::string>  &__pyx_v_lstrings, std::vector<std::string>  &__pyx_v_rstrings, Predicatecpp &__pyx_v_predicate, int __pyx_v_sim_type, int __pyx_v_comp_type, std::vector<std::pair<int,int> >  &__pyx_v_output_pairs) {
  std::pair<int,int>  __pyx_v_cand;
  int __pyx_v_i;
  __pyx_t_16py_stringsimjoin_8apply_rf_5utils_token_simfnptr __pyx_v_token_sim_fn;
  __pyx_t_16py_stringsimjoin_8apply_rf_5utils_str_simfnptr __pyx_v_str_sim_fn;
  __pyx_t_16py_stringsimjoin_8apply_rf_5utils_compfnptr __pyx_v_comp_fn;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "executor.pyx":441
 *     cdef token_simfnptr token_sim_fn
 *     cdef str_simfnptr str_sim_fn
 *     cdef compfnptr comp_fn = get_comparison_function(comp_type)             # <<<<<<<<<<<<<<
 * 
 *     if predicate.is_tok_sim_measure:
 */
  __pyx_v_comp_fn = __pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_comparison_function(__pyx_v_comp_type);

  /* "executor.pyx":443
 *     cdef compfnptr comp_fn = get_comparison_function(comp_type)
 * 
 *     if predicate.is_tok_sim_measure:             # <<<<<<<<<<<<<<
 *         token_sim_fn = get_token_sim_function(sim_type)
 *         for i in range(partition.first, partition.second):
 */
  __pyx_t_1 = (__pyx_v_predicate.is_tok_sim_measure != 0);
  if (__pyx_t_1) {

    /* "executor.pyx":444
 * 
 *     if predicate.is_tok_sim_measure:
 *         token_sim_fn = get_token_sim_function(sim_type)             # <<<<<<<<<<<<<<
 *         for i in range(partition.first, partition.second):
 *             cand  = candset[i]
 */
    __pyx_v_token_sim_fn = __pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_token_sim_function(__pyx_v_sim_type);

    /* "executor.pyx":445
 *     if predicate.is_tok_sim_measure:
 *         token_sim_fn = get_token_sim_function(sim_type)
 *         for i in range(partition.first, partition.second):             # <<<<<<<<<<<<<<
 *             cand  = candset[i]
 *             if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),
 */
    __pyx_t_2 = __pyx_v_partition.second;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = __pyx_v_partition.first; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "executor.pyx":446
 *         token_sim_fn = get_token_sim_function(sim_type)
 *         for i in range(partition.first, partition.second):
 *             cand  = candset[i]             # <<<<<<<<<<<<<<
 *             if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),
 *                        predicate.threshold):
 */
      __pyx_v_cand = (__pyx_v_candset[__pyx_v_i]);

      /* "executor.pyx":447
 *         for i in range(partition.first, partition.second):
 *             cand  = candset[i]
 *             if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),             # <<<<<<<<<<<<<<
 *                        predicate.threshold):
 *                 output_pairs.push_back(cand)
 */
      __pyx_t_1 = (__pyx_v_comp_fn(__pyx_v_token_sim_fn((__pyx_v_ltokens[__pyx_v_cand.first]), (__pyx_v_rtokens[__pyx_v_cand.second])), __pyx_v_predicate.threshold) != 0);
      if (__pyx_t_1) {

        /* "executor.pyx":449
 *             if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),
 *                        predicate.threshold):
 *                 output_pairs.push_back(cand)             # <<<<<<<<<<<<<<
 *     else:
 *         str_sim_fn = get_str_sim_function(sim_type)
 */
        try {
          __pyx_v_output_pairs.push_back(__pyx_v_cand);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 449, __pyx_L1_error)
        }

        /* "executor.pyx":447
 *         for i in range(partition.first, partition.second):
 *             cand  = candset[i]
 *             if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),             # <<<<<<<<<<<<<<
 *                        predicate.threshold):
 *                 output_pairs.push_back(cand)
 */
      }
    }

    /* "executor.pyx":443
 *     cdef compfnptr comp_fn = get_comparison_function(comp_type)
 * 
 *     if predicate.is_tok_sim_measure:             # <<<<<<<<<<<<<<
 *         token_sim_fn = get_token_sim_function(sim_type)
 *         for i in range(partition.first, partition.second):
 */
    goto __pyx_L3;
  }

  /* "executor.pyx":451
 *                 output_pairs.push_back(cand)
 *     else:
 *         str_sim_fn = get_str_sim_function(sim_type)             # <<<<<<<<<<<<<<
 *         for i in range(partition.first, partition.second):
 *             cand  = candset[i]
 */
  /*else*/ {
    __pyx_v_str_sim_fn = __pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_str_sim_function(__pyx_v_sim_type);

    /* "executor.pyx":452
 *     else:
 *         str_sim_fn = get_str_sim_function(sim_type)
 *         for i in range(partition.first, partition.second):             # <<<<<<<<<<<<<<
 *             cand  = candset[i]
 *             if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),
 */
    __pyx_t_2 = __pyx_v_partition.second;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = __pyx_v_partition.first; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "executor.pyx":453
 *         str_sim_fn = get_str_sim_function(sim_type)
 *         for i in range(partition.first, partition.second):
 *             cand  = candset[i]             # <<<<<<<<<<<<<<
 *             if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),
 *                        predicate.threshold):
 */
      __pyx_v_cand = (__pyx_v_candset[__pyx_v_i]);

      /* "executor.pyx":454
 *         for i in range(partition.first, partition.second):
 *             cand  = candset[i]
 *             if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),             # <<<<<<<<<<<<<<
 *                        predicate.threshold):
 *                 output_pairs.push_back(cand)
 */
      __pyx_t_1 = (__pyx_v_comp_fn(__pyx_v_str_sim_fn((__pyx_v_lstrings[__pyx_v_cand.first]), (__pyx_v_rstrings[__pyx_v_cand.second])), __pyx_v_predicate.threshold) != 0);
      if (__pyx_t_1) {

        /* "executor.pyx":456
 *             if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),
 *                        predicate.threshold):
 *                 output_pairs.push_back(cand)             # <<<<<<<<<<<<<<
 * 
 * 
 */
        try {
          __pyx_v_output_pairs.push_back(__pyx_v_cand);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 456, __pyx_L1_error)
        }

        /* "executor.pyx":454
 *         for i in range(partition.first, partition.second):
 *             cand  = candset[i]
 *             if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),             # <<<<<<<<<<<<<<
 *                        predicate.threshold):
 *                 output_pairs.push_back(cand)
 */
      }
    }
  }
  __pyx_L3:;

  /* "executor.pyx":426
 *     return final_output_pairs
 * 
 * cdef void execute_filter_node_part(pair[int, int] partition,             # <<<<<<<<<<<<<<
 *                                    vector[pair[int, int]]& candset,
 *                                    vector[vector[int]]& ltokens,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("executor.execute_filter_node_part", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
}

/* "executor.pyx":459
 * 
 * 
 * cdef pair[vector[pair[int, int]], vector[int]] execute_tree_plan(             # <<<<<<<<<<<<<<
 *                     pair[vector[pair[int, int]], vector[int]]& candset_votes,
 *                     vector[string]& lstrings, vector[string]& rstrings,
 */

static std::pair<std::vector<std::pair<int,int> > ,std::vector<int> >  __pyx_f_8executor_execute_tree_plan(std::pair<std::vector<std::pair<int,int> > ,std::vector<int> >  &__pyx_v_candset_votes, std::vector<std::string>  &__pyx_v_lstrings, std::vector<std::string>  &__pyx_v_rstrings, Node &__pyx_v_plan, int __pyx_v_num_total_trees, int __pyx_v_num_trees_processed, int __pyx_v_label, int __pyx_v_n_jobs, std::string const &__pyx_v_working_dir) {
  Node __pyx_v_child_node;
  Node __pyx_v_grand_child_node;
  Node __pyx_v_curr_node;
  std::vector<std::pair<Node,int> >  __pyx_v_queue;
  std::pair<Node,int>  __pyx_v_curr_entry;
  std::vector<int>  __pyx_v_pair_ids;
  std::vector<int>  __pyx_v_curr_pair_ids;
  std::vector<int>  __pyx_v_output_pair_ids;
  std::map<int,std::vector<int> >  __pyx_v_cached_pair_ids;
  std::map<int,int>  __pyx_v_cache_usage;
  int __pyx_v_curr_index;
  bool __pyx_v_top_level_node;
  std::vector<double>  __pyx_v_feature_values;
  int __pyx_v_pair_id;
  std::vector<std::pair<int,int> >  __pyx_v_next_candset;
  std::vector<std::pair<int,int> >  __pyx_v_output_pairs;
  std::vector<int>  __pyx_v_next_votes;
  int __pyx_v_curr_votes;
  double __pyx_v_reqd_votes;
  std::vector<int> ::size_type __pyx_v_i;
  std::pair<std::vector<std::pair<int,int> > ,std::vector<int> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  std::vector<Node> ::iterator __pyx_t_1;
  std::vector<Node>  *__pyx_t_2;
  Node __pyx_t_3;
  std::pair<Node,int>  __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  std::vector<Node> ::iterator __pyx_t_13;
  std::vector<Node>  *__pyx_t_14;
  std::vector<int> ::iterator __pyx_t_15;
  std::vector<int> ::size_type __pyx_t_16;
  std::vector<int> ::size_type __pyx_t_17;
  std::vector<int> ::size_type __pyx_t_18;
  std::pair<std::vector<std::pair<int,int> > ,std::vector<int> >  __pyx_t_19;
  __Pyx_RefNannySetupContext("execute_tree_plan", 0);

  /* "executor.pyx":470
 *     cdef vector[int] pair_ids, curr_pair_ids, output_pair_ids
 * 
 *     for child_node in plan.children:             # <<<<<<<<<<<<<<
 *         queue.push_back(pair[Node, int](child_node, -1))
 * 
 */
  __pyx_t_2 = &__pyx_v_plan.children;
  __pyx_t_1 = __pyx_t_2->begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_t_2->end())) break;
    __pyx_t_3 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_v_child_node = __pyx_t_3;

    /* "executor.pyx":471
 * 
 *     for child_node in plan.children:
 *         queue.push_back(pair[Node, int](child_node, -1))             # <<<<<<<<<<<<<<
 * 
 *     cdef omap[int, vector[int]] cached_pair_ids
 */
    try {
      __pyx_t_4 = std::pair<Node,int> (__pyx_v_child_node, -1);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 471, __pyx_L1_error)
    }
    try {
      __pyx_v_queue.push_back(__pyx_t_4);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 471, __pyx_L1_error)
    }

    /* "executor.pyx":470
 *     cdef vector[int] pair_ids, curr_pair_ids, output_pair_ids
 * 
 *     for child_node in plan.children:             # <<<<<<<<<<<<<<
 *         queue.push_back(pair[Node, int](child_node, -1))
 * 
 */
  }

  /* "executor.pyx":475
 *     cdef omap[int, vector[int]] cached_pair_ids
 *     cdef omap[int , int] cache_usage
 *     cdef int curr_index = 0             # <<<<<<<<<<<<<<
 *     cdef bool top_level_node = False
 *     cdef vector[double] feature_values
 */
  __pyx_v_curr_index = 0;

  /* "executor.pyx":476
 *     cdef omap[int , int] cache_usage
 *     cdef int curr_index = 0
 *     cdef bool top_level_node = False             # <<<<<<<<<<<<<<
 *     cdef vector[double] feature_values
 * 
 */
  __pyx_v_top_level_node = 0;

  /* "executor.pyx":479
 *     cdef vector[double] feature_values
 * 
 *     while queue.size() > 0:             # <<<<<<<<<<<<<<
 *         curr_entry = queue.back()
 *         queue.pop_back();
 */
  while (1) {
    __pyx_t_5 = ((__pyx_v_queue.size() > 0) != 0);
    if (!__pyx_t_5) break;

    /* "executor.pyx":480
 * 
 *     while queue.size() > 0:
 *         curr_entry = queue.back()             # <<<<<<<<<<<<<<
 *         queue.pop_back();
 *         curr_node = curr_entry.first
 */
    __pyx_v_curr_entry = __pyx_v_queue.back();

    /* "executor.pyx":481
 *     while queue.size() > 0:
 *         curr_entry = queue.back()
 *         queue.pop_back();             # <<<<<<<<<<<<<<
 *         curr_node = curr_entry.first
 * 
 */
    __pyx_v_queue.pop_back();

    /* "executor.pyx":482
 *         curr_entry = queue.back()
 *         queue.pop_back();
 *         curr_node = curr_entry.first             # <<<<<<<<<<<<<<
 * 
 *         top_level_node = False
 */
    __pyx_t_3 = __pyx_v_curr_entry.first;
    __pyx_v_curr_node = __pyx_t_3;

    /* "executor.pyx":484
 *         curr_node = curr_entry.first
 * 
 *         top_level_node = False             # <<<<<<<<<<<<<<
 * 
 *         if curr_entry.second == -1:
 */
    __pyx_v_top_level_node = 0;

    /* "executor.pyx":486
 *         top_level_node = False
 * 
 *         if curr_entry.second == -1:             # <<<<<<<<<<<<<<
 *             top_level_node = True
 *         else:
 */
    __pyx_t_5 = ((__pyx_v_curr_entry.second == -1L) != 0);
    if (__pyx_t_5) {

      /* "executor.pyx":487
 * 
 *         if curr_entry.second == -1:
 *             top_level_node = True             # <<<<<<<<<<<<<<
 *         else:
 *             pair_ids = cached_pair_ids[curr_entry.second]
 */
      __pyx_v_top_level_node = 1;

      /* "executor.pyx":486
 *         top_level_node = False
 * 
 *         if curr_entry.second == -1:             # <<<<<<<<<<<<<<
 *             top_level_node = True
 *         else:
 */
      goto __pyx_L7;
    }

    /* "executor.pyx":489
 *             top_level_node = True
 *         else:
 *             pair_ids = cached_pair_ids[curr_entry.second]             # <<<<<<<<<<<<<<
 *             cache_usage[curr_entry.second] -= 1
 * 
 */
    /*else*/ {
      __pyx_v_pair_ids = (__pyx_v_cached_pair_ids[__pyx_v_curr_entry.second]);

      /* "executor.pyx":490
 *         else:
 *             pair_ids = cached_pair_ids[curr_entry.second]
 *             cache_usage[curr_entry.second] -= 1             # <<<<<<<<<<<<<<
 * 
 *             if cache_usage[curr_entry.second]  == 0:
 */
      __pyx_t_6 = __pyx_v_curr_entry.second;
      (__pyx_v_cache_usage[__pyx_t_6]) = ((__pyx_v_cache_usage[__pyx_t_6]) - 1);

      /* "executor.pyx":492
 *             cache_usage[curr_entry.second] -= 1
 * 
 *             if cache_usage[curr_entry.second]  == 0:             # <<<<<<<<<<<<<<
 *                 cache_usage.erase(curr_entry.second)
 *                 cached_pair_ids.erase(curr_entry.second)
 */
      __pyx_t_5 = (((__pyx_v_cache_usage[__pyx_v_curr_entry.second]) == 0) != 0);
      if (__pyx_t_5) {

        /* "executor.pyx":493
 * 
 *             if cache_usage[curr_entry.second]  == 0:
 *                 cache_usage.erase(curr_entry.second)             # <<<<<<<<<<<<<<
 *                 cached_pair_ids.erase(curr_entry.second)
 * 
 */
        (void)(__pyx_v_cache_usage.erase(__pyx_v_curr_entry.second));

        /* "executor.pyx":494
 *             if cache_usage[curr_entry.second]  == 0:
 *                 cache_usage.erase(curr_entry.second)
 *                 cached_pair_ids.erase(curr_entry.second)             # <<<<<<<<<<<<<<
 * 
 *         while (curr_node.node_type.compare("OUTPUT") != 0 and
 */
        (void)(__pyx_v_cached_pair_ids.erase(__pyx_v_curr_entry.second));

        /* "executor.pyx":492
 *             cache_usage[curr_entry.second] -= 1
 * 
 *             if cache_usage[curr_entry.second]  == 0:             # <<<<<<<<<<<<<<
 *                 cache_usage.erase(curr_entry.second)
 *                 cached_pair_ids.erase(curr_entry.second)
 */
      }
    }
    __pyx_L7:;

    /* "executor.pyx":496
 *                 cached_pair_ids.erase(curr_entry.second)
 * 
 *         while (curr_node.node_type.compare("OUTPUT") != 0 and             # <<<<<<<<<<<<<<
 *                curr_node.node_type.compare("FILTER") == 0 and
 *                curr_node.children.size() < 2):
 */
    while (1) {
      __pyx_t_7 = ((__pyx_v_curr_node.node_type.compare(__pyx_k_OUTPUT) != 0) != 0);
      if (__pyx_t_7) {
      } else {
        __pyx_t_5 = __pyx_t_7;
        goto __pyx_L11_bool_binop_done;
      }

      /* "executor.pyx":497
 * 
 *         while (curr_node.node_type.compare("OUTPUT") != 0 and
 *                curr_node.node_type.compare("FILTER") == 0 and             # <<<<<<<<<<<<<<
 *                curr_node.children.size() < 2):
 *             print 'FILTER', curr_node.predicates[0].sim_measure_type, curr_node.predicates[0].tokenizer_type, curr_node.predicates[0].comp_op, curr_node.predicates[0].threshold
 */
      __pyx_t_7 = ((__pyx_v_curr_node.node_type.compare(__pyx_k_FILTER) == 0) != 0);
      if (__pyx_t_7) {
      } else {
        __pyx_t_5 = __pyx_t_7;
        goto __pyx_L11_bool_binop_done;
      }

      /* "executor.pyx":498
 *         while (curr_node.node_type.compare("OUTPUT") != 0 and
 *                curr_node.node_type.compare("FILTER") == 0 and
 *                curr_node.children.size() < 2):             # <<<<<<<<<<<<<<
 *             print 'FILTER', curr_node.predicates[0].sim_measure_type, curr_node.predicates[0].tokenizer_type, curr_node.predicates[0].comp_op, curr_node.predicates[0].threshold
 *             pair_ids = execute_filter_node1(candset_votes.first, pair_ids, top_level_node,
 */
      __pyx_t_7 = ((__pyx_v_curr_node.children.size() < 2) != 0);
      __pyx_t_5 = __pyx_t_7;
      __pyx_L11_bool_binop_done:;
      if (!__pyx_t_5) break;

      /* "executor.pyx":499
 *                curr_node.node_type.compare("FILTER") == 0 and
 *                curr_node.children.size() < 2):
 *             print 'FILTER', curr_node.predicates[0].sim_measure_type, curr_node.predicates[0].tokenizer_type, curr_node.predicates[0].comp_op, curr_node.predicates[0].threshold             # <<<<<<<<<<<<<<
 *             pair_ids = execute_filter_node1(candset_votes.first, pair_ids, top_level_node,
 *                                             lstrings, rstrings,
 */
      __pyx_t_8 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_curr_node.predicates[0]).sim_measure_type); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 499, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_curr_node.predicates[0]).tokenizer_type); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 499, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_curr_node.predicates[0]).comp_op); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 499, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = PyFloat_FromDouble((__pyx_v_curr_node.predicates[0]).threshold); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 499, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyTuple_New(5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 499, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_INCREF(__pyx_n_s_FILTER);
      __Pyx_GIVEREF(__pyx_n_s_FILTER);
      PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_n_s_FILTER);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_12, 3, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_12, 4, __pyx_t_11);
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      __pyx_t_10 = 0;
      __pyx_t_11 = 0;
      if (__Pyx_Print(0, __pyx_t_12, 1) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "executor.pyx":500
 *                curr_node.children.size() < 2):
 *             print 'FILTER', curr_node.predicates[0].sim_measure_type, curr_node.predicates[0].tokenizer_type, curr_node.predicates[0].comp_op, curr_node.predicates[0].threshold
 *             pair_ids = execute_filter_node1(candset_votes.first, pair_ids, top_level_node,             # <<<<<<<<<<<<<<
 *                                             lstrings, rstrings,
 *                                             curr_node.predicates[0], n_jobs, working_dir)
 */
      __pyx_v_pair_ids = __pyx_f_8executor_execute_filter_node1(__pyx_v_candset_votes.first, __pyx_v_pair_ids, __pyx_v_top_level_node, __pyx_v_lstrings, __pyx_v_rstrings, (__pyx_v_curr_node.predicates[0]), __pyx_v_n_jobs, __pyx_v_working_dir);

      /* "executor.pyx":503
 *                                             lstrings, rstrings,
 *                                             curr_node.predicates[0], n_jobs, working_dir)
 *             curr_node = curr_node.children[0]             # <<<<<<<<<<<<<<
 *             top_level_node = False
 * 
 */
      __pyx_v_curr_node = (__pyx_v_curr_node.children[0]);

      /* "executor.pyx":504
 *                                             curr_node.predicates[0], n_jobs, working_dir)
 *             curr_node = curr_node.children[0]
 *             top_level_node = False             # <<<<<<<<<<<<<<
 * 
 *         if curr_node.node_type.compare("OUTPUT") == 0:
 */
      __pyx_v_top_level_node = 0;
    }

    /* "executor.pyx":506
 *             top_level_node = False
 * 
 *         if curr_node.node_type.compare("OUTPUT") == 0:             # <<<<<<<<<<<<<<
 *             output_pair_ids.insert(output_pair_ids.end(), pair_ids.begin(),
 *                                                           pair_ids.end())
 */
    __pyx_t_5 = ((__pyx_v_curr_node.node_type.compare(__pyx_k_OUTPUT) == 0) != 0);
    if (__pyx_t_5) {

      /* "executor.pyx":507
 * 
 *         if curr_node.node_type.compare("OUTPUT") == 0:
 *             output_pair_ids.insert(output_pair_ids.end(), pair_ids.begin(),             # <<<<<<<<<<<<<<
 *                                                           pair_ids.end())
 *             continue
 */
      try {
        __pyx_v_output_pair_ids.insert(__pyx_v_output_pair_ids.end(), __pyx_v_pair_ids.begin(), __pyx_v_pair_ids.end());
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 507, __pyx_L1_error)
      }

      /* "executor.pyx":509
 *             output_pair_ids.insert(output_pair_ids.end(), pair_ids.begin(),
 *                                                           pair_ids.end())
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         if curr_node.node_type.compare("FEATURE") == 0:
 */
      goto __pyx_L5_continue;

      /* "executor.pyx":506
 *             top_level_node = False
 * 
 *         if curr_node.node_type.compare("OUTPUT") == 0:             # <<<<<<<<<<<<<<
 *             output_pair_ids.insert(output_pair_ids.end(), pair_ids.begin(),
 *                                                           pair_ids.end())
 */
    }

    /* "executor.pyx":511
 *             continue
 * 
 *         if curr_node.node_type.compare("FEATURE") == 0:             # <<<<<<<<<<<<<<
 *            print 'FEATURE', curr_node.predicates[0].sim_measure_type
 *            feature_values = execute_feature_node(candset_votes.first, pair_ids, top_level_node,
 */
    __pyx_t_5 = ((__pyx_v_curr_node.node_type.compare(__pyx_k_FEATURE) == 0) != 0);
    if (__pyx_t_5) {

      /* "executor.pyx":512
 * 
 *         if curr_node.node_type.compare("FEATURE") == 0:
 *            print 'FEATURE', curr_node.predicates[0].sim_measure_type             # <<<<<<<<<<<<<<
 *            feature_values = execute_feature_node(candset_votes.first, pair_ids, top_level_node,
 *                                                  lstrings, rstrings,
 */
      __pyx_t_12 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_curr_node.predicates[0]).sim_measure_type); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_n_s_FEATURE);
      __Pyx_GIVEREF(__pyx_n_s_FEATURE);
      PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_n_s_FEATURE);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_12);
      __pyx_t_12 = 0;
      if (__Pyx_Print(0, __pyx_t_11, 1) < 0) __PYX_ERR(0, 512, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "executor.pyx":513
 *         if curr_node.node_type.compare("FEATURE") == 0:
 *            print 'FEATURE', curr_node.predicates[0].sim_measure_type
 *            feature_values = execute_feature_node(candset_votes.first, pair_ids, top_level_node,             # <<<<<<<<<<<<<<
 *                                                  lstrings, rstrings,
 *                                                 curr_node.predicates[0], n_jobs,
 */
      __pyx_v_feature_values = __pyx_f_8executor_execute_feature_node(__pyx_v_candset_votes.first, __pyx_v_pair_ids, __pyx_v_top_level_node, __pyx_v_lstrings, __pyx_v_rstrings, (__pyx_v_curr_node.predicates[0]), __pyx_v_n_jobs, __pyx_v_working_dir);

      /* "executor.pyx":517
 *                                                 curr_node.predicates[0], n_jobs,
 *                                                 working_dir)
 *            for child_node in curr_node.children:             # <<<<<<<<<<<<<<
 *                print 'SELECT', child_node.predicates[0].sim_measure_type, child_node.predicates[0].tokenizer_type, child_node.predicates[0].comp_op, child_node.predicates[0].threshold
 * 
 */
      __pyx_t_2 = &__pyx_v_curr_node.children;
      __pyx_t_1 = __pyx_t_2->begin();
      for (;;) {
        if (!(__pyx_t_1 != __pyx_t_2->end())) break;
        __pyx_t_3 = *__pyx_t_1;
        ++__pyx_t_1;
        __pyx_v_child_node = __pyx_t_3;

        /* "executor.pyx":518
 *                                                 working_dir)
 *            for child_node in curr_node.children:
 *                print 'SELECT', child_node.predicates[0].sim_measure_type, child_node.predicates[0].tokenizer_type, child_node.predicates[0].comp_op, child_node.predicates[0].threshold             # <<<<<<<<<<<<<<
 * 
 *                if top_level_node:
 */
        __pyx_t_11 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_child_node.predicates[0]).sim_measure_type); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 518, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_child_node.predicates[0]).tokenizer_type); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 518, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_10 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_child_node.predicates[0]).comp_op); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 518, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_9 = PyFloat_FromDouble((__pyx_v_child_node.predicates[0]).threshold); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 518, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = PyTuple_New(5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 518, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_n_s_SELECT);
        __Pyx_GIVEREF(__pyx_n_s_SELECT);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_SELECT);
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_t_9);
        __pyx_t_11 = 0;
        __pyx_t_12 = 0;
        __pyx_t_10 = 0;
        __pyx_t_9 = 0;
        if (__Pyx_Print(0, __pyx_t_8, 1) < 0) __PYX_ERR(0, 518, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "executor.pyx":520
 *                print 'SELECT', child_node.predicates[0].sim_measure_type, child_node.predicates[0].tokenizer_type, child_node.predicates[0].comp_op, child_node.predicates[0].threshold
 * 
 *                if top_level_node:             # <<<<<<<<<<<<<<
 *                    curr_pair_ids = execute_select_node_candset(candset_votes.first.size(), feature_values,
 *                                                        child_node.predicates[0])
 */
        __pyx_t_5 = (__pyx_v_top_level_node != 0);
        if (__pyx_t_5) {

          /* "executor.pyx":521
 * 
 *                if top_level_node:
 *                    curr_pair_ids = execute_select_node_candset(candset_votes.first.size(), feature_values,             # <<<<<<<<<<<<<<
 *                                                        child_node.predicates[0])
 *                else:
 */
          __pyx_v_curr_pair_ids = __pyx_f_8executor_execute_select_node_candset(__pyx_v_candset_votes.first.size(), __pyx_v_feature_values, (__pyx_v_child_node.predicates[0]));

          /* "executor.pyx":520
 *                print 'SELECT', child_node.predicates[0].sim_measure_type, child_node.predicates[0].tokenizer_type, child_node.predicates[0].comp_op, child_node.predicates[0].threshold
 * 
 *                if top_level_node:             # <<<<<<<<<<<<<<
 *                    curr_pair_ids = execute_select_node_candset(candset_votes.first.size(), feature_values,
 *                                                        child_node.predicates[0])
 */
          goto __pyx_L18;
        }

        /* "executor.pyx":524
 *                                                        child_node.predicates[0])
 *                else:
 *                    curr_pair_ids = execute_select_node(pair_ids, feature_values,             # <<<<<<<<<<<<<<
 *                                                    child_node.predicates[0])
 * 
 */
        /*else*/ {

          /* "executor.pyx":525
 *                else:
 *                    curr_pair_ids = execute_select_node(pair_ids, feature_values,
 *                                                    child_node.predicates[0])             # <<<<<<<<<<<<<<
 * 
 *                for grand_child_node in child_node.children:
 */
          __pyx_v_curr_pair_ids = __pyx_f_8executor_execute_select_node(__pyx_v_pair_ids, __pyx_v_feature_values, (__pyx_v_child_node.predicates[0]));
        }
        __pyx_L18:;

        /* "executor.pyx":527
 *                                                    child_node.predicates[0])
 * 
 *                for grand_child_node in child_node.children:             # <<<<<<<<<<<<<<
 *                    queue.push_back(pair[Node, int](grand_child_node, curr_index))
 * 
 */
        __pyx_t_14 = &__pyx_v_child_node.children;
        __pyx_t_13 = __pyx_t_14->begin();
        for (;;) {
          if (!(__pyx_t_13 != __pyx_t_14->end())) break;
          __pyx_t_3 = *__pyx_t_13;
          ++__pyx_t_13;
          __pyx_v_grand_child_node = __pyx_t_3;

          /* "executor.pyx":528
 * 
 *                for grand_child_node in child_node.children:
 *                    queue.push_back(pair[Node, int](grand_child_node, curr_index))             # <<<<<<<<<<<<<<
 * 
 *                cache_usage[curr_index] = child_node.children.size()
 */
          try {
            __pyx_t_4 = std::pair<Node,int> (__pyx_v_grand_child_node, __pyx_v_curr_index);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 528, __pyx_L1_error)
          }
          try {
            __pyx_v_queue.push_back(__pyx_t_4);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 528, __pyx_L1_error)
          }

          /* "executor.pyx":527
 *                                                    child_node.predicates[0])
 * 
 *                for grand_child_node in child_node.children:             # <<<<<<<<<<<<<<
 *                    queue.push_back(pair[Node, int](grand_child_node, curr_index))
 * 
 */
        }

        /* "executor.pyx":530
 *                    queue.push_back(pair[Node, int](grand_child_node, curr_index))
 * 
 *                cache_usage[curr_index] = child_node.children.size()             # <<<<<<<<<<<<<<
 *                cached_pair_ids[curr_index] = curr_pair_ids
 *                curr_index += 1
 */
        (__pyx_v_cache_usage[__pyx_v_curr_index]) = __pyx_v_child_node.children.size();

        /* "executor.pyx":531
 * 
 *                cache_usage[curr_index] = child_node.children.size()
 *                cached_pair_ids[curr_index] = curr_pair_ids             # <<<<<<<<<<<<<<
 *                curr_index += 1
 *         elif curr_node.node_type.compare("FILTER") == 0:
 */
        (__pyx_v_cached_pair_ids[__pyx_v_curr_index]) = __pyx_v_curr_pair_ids;

        /* "executor.pyx":532
 *                cache_usage[curr_index] = child_node.children.size()
 *                cached_pair_ids[curr_index] = curr_pair_ids
 *                curr_index += 1             # <<<<<<<<<<<<<<
 *         elif curr_node.node_type.compare("FILTER") == 0:
 *             print 'FILTER', curr_node.predicates[0].sim_measure_type, curr_node.predicates[0].tokenizer_type, curr_node.predicates[0].comp_op, curr_node.predicates[0].threshold
 */
        __pyx_v_curr_index = (__pyx_v_curr_index + 1);

        /* "executor.pyx":517
 *                                                 curr_node.predicates[0], n_jobs,
 *                                                 working_dir)
 *            for child_node in curr_node.children:             # <<<<<<<<<<<<<<
 *                print 'SELECT', child_node.predicates[0].sim_measure_type, child_node.predicates[0].tokenizer_type, child_node.predicates[0].comp_op, child_node.predicates[0].threshold
 * 
 */
      }

      /* "executor.pyx":511
 *             continue
 * 
 *         if curr_node.node_type.compare("FEATURE") == 0:             # <<<<<<<<<<<<<<
 *            print 'FEATURE', curr_node.predicates[0].sim_measure_type
 *            feature_values = execute_feature_node(candset_votes.first, pair_ids, top_level_node,
 */
      goto __pyx_L15;
    }

    /* "executor.pyx":533
 *                cached_pair_ids[curr_index] = curr_pair_ids
 *                curr_index += 1
 *         elif curr_node.node_type.compare("FILTER") == 0:             # <<<<<<<<<<<<<<
 *             print 'FILTER', curr_node.predicates[0].sim_measure_type, curr_node.predicates[0].tokenizer_type, curr_node.predicates[0].comp_op, curr_node.predicates[0].threshold
 *             pair_ids = execute_filter_node1(candset_votes.first, pair_ids, top_level_node,
 */
    __pyx_t_5 = ((__pyx_v_curr_node.node_type.compare(__pyx_k_FILTER) == 0) != 0);
    if (__pyx_t_5) {

      /* "executor.pyx":534
 *                curr_index += 1
 *         elif curr_node.node_type.compare("FILTER") == 0:
 *             print 'FILTER', curr_node.predicates[0].sim_measure_type, curr_node.predicates[0].tokenizer_type, curr_node.predicates[0].comp_op, curr_node.predicates[0].threshold             # <<<<<<<<<<<<<<
 *             pair_ids = execute_filter_node1(candset_votes.first, pair_ids, top_level_node,
 *                                            lstrings, rstrings,
 */
      __pyx_t_8 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_curr_node.predicates[0]).sim_measure_type); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_curr_node.predicates[0]).tokenizer_type); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_curr_node.predicates[0]).comp_op); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_12 = PyFloat_FromDouble((__pyx_v_curr_node.predicates[0]).threshold); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_11 = PyTuple_New(5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_n_s_FILTER);
      __Pyx_GIVEREF(__pyx_n_s_FILTER);
      PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_n_s_FILTER);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_11, 3, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_11, 4, __pyx_t_12);
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      __pyx_t_10 = 0;
      __pyx_t_12 = 0;
      if (__Pyx_Print(0, __pyx_t_11, 1) < 0) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "executor.pyx":535
 *         elif curr_node.node_type.compare("FILTER") == 0:
 *             print 'FILTER', curr_node.predicates[0].sim_measure_type, curr_node.predicates[0].tokenizer_type, curr_node.predicates[0].comp_op, curr_node.predicates[0].threshold
 *             pair_ids = execute_filter_node1(candset_votes.first, pair_ids, top_level_node,             # <<<<<<<<<<<<<<
 *                                            lstrings, rstrings,
 *                                            curr_node.predicates[0], n_jobs, working_dir)
 */
      __pyx_v_pair_ids = __pyx_f_8executor_execute_filter_node1(__pyx_v_candset_votes.first, __pyx_v_pair_ids, __pyx_v_top_level_node, __pyx_v_lstrings, __pyx_v_rstrings, (__pyx_v_curr_node.predicates[0]), __pyx_v_n_jobs, __pyx_v_working_dir);

      /* "executor.pyx":538
 *                                            lstrings, rstrings,
 *                                            curr_node.predicates[0], n_jobs, working_dir)
 *             for child_node in curr_node.children:             # <<<<<<<<<<<<<<
 *                 queue.push_back(pair[Node, int](child_node, curr_index))
 * 
 */
      __pyx_t_2 = &__pyx_v_curr_node.children;
      __pyx_t_1 = __pyx_t_2->begin();
      for (;;) {
        if (!(__pyx_t_1 != __pyx_t_2->end())) break;
        __pyx_t_3 = *__pyx_t_1;
        ++__pyx_t_1;
        __pyx_v_child_node = __pyx_t_3;

        /* "executor.pyx":539
 *                                            curr_node.predicates[0], n_jobs, working_dir)
 *             for child_node in curr_node.children:
 *                 queue.push_back(pair[Node, int](child_node, curr_index))             # <<<<<<<<<<<<<<
 * 
 *             cache_usage[curr_index] = curr_node.children.size()
 */
        try {
          __pyx_t_4 = std::pair<Node,int> (__pyx_v_child_node, __pyx_v_curr_index);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 539, __pyx_L1_error)
        }
        try {
          __pyx_v_queue.push_back(__pyx_t_4);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 539, __pyx_L1_error)
        }

        /* "executor.pyx":538
 *                                            lstrings, rstrings,
 *                                            curr_node.predicates[0], n_jobs, working_dir)
 *             for child_node in curr_node.children:             # <<<<<<<<<<<<<<
 *                 queue.push_back(pair[Node, int](child_node, curr_index))
 * 
 */
      }

      /* "executor.pyx":541
 *                 queue.push_back(pair[Node, int](child_node, curr_index))
 * 
 *             cache_usage[curr_index] = curr_node.children.size()             # <<<<<<<<<<<<<<
 *             cached_pair_ids[curr_index] = pair_ids
 *             curr_index += 1
 */
      (__pyx_v_cache_usage[__pyx_v_curr_index]) = __pyx_v_curr_node.children.size();

      /* "executor.pyx":542
 * 
 *             cache_usage[curr_index] = curr_node.children.size()
 *             cached_pair_ids[curr_index] = pair_ids             # <<<<<<<<<<<<<<
 *             curr_index += 1
 * 
 */
      (__pyx_v_cached_pair_ids[__pyx_v_curr_index]) = __pyx_v_pair_ids;

      /* "executor.pyx":543
 *             cache_usage[curr_index] = curr_node.children.size()
 *             cached_pair_ids[curr_index] = pair_ids
 *             curr_index += 1             # <<<<<<<<<<<<<<
 * 
 *     cdef int pair_id
 */
      __pyx_v_curr_index = (__pyx_v_curr_index + 1);

      /* "executor.pyx":533
 *                cached_pair_ids[curr_index] = curr_pair_ids
 *                curr_index += 1
 *         elif curr_node.node_type.compare("FILTER") == 0:             # <<<<<<<<<<<<<<
 *             print 'FILTER', curr_node.predicates[0].sim_measure_type, curr_node.predicates[0].tokenizer_type, curr_node.predicates[0].comp_op, curr_node.predicates[0].threshold
 *             pair_ids = execute_filter_node1(candset_votes.first, pair_ids, top_level_node,
 */
    }
    __pyx_L15:;
    __pyx_L5_continue:;
  }

  /* "executor.pyx":546
 * 
 *     cdef int pair_id
 *     for pair_id in output_pair_ids:             # <<<<<<<<<<<<<<
 *         candset_votes.second[pair_id] += 1
 * 
 */
  __pyx_t_15 = __pyx_v_output_pair_ids.begin();
  for (;;) {
    if (!(__pyx_t_15 != __pyx_v_output_pair_ids.end())) break;
    __pyx_t_6 = *__pyx_t_15;
    ++__pyx_t_15;
    __pyx_v_pair_id = __pyx_t_6;

    /* "executor.pyx":547
 *     cdef int pair_id
 *     for pair_id in output_pair_ids:
 *         candset_votes.second[pair_id] += 1             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[pair[int, int]] next_candset, output_pairs
 */
    __pyx_t_6 = __pyx_v_pair_id;
    (__pyx_v_candset_votes.second[__pyx_t_6]) = ((__pyx_v_candset_votes.second[__pyx_t_6]) + 1);

    /* "executor.pyx":546
 * 
 *     cdef int pair_id
 *     for pair_id in output_pair_ids:             # <<<<<<<<<<<<<<
 *         candset_votes.second[pair_id] += 1
 * 
 */
  }

  /* "executor.pyx":552
 *     cdef vector[int] next_votes
 *     cdef int curr_votes
 *     cdef double reqd_votes = (<double>num_total_trees)/2.0             # <<<<<<<<<<<<<<
 *     for i in xrange(candset_votes.second.size()):
 *         curr_votes = candset_votes.second[i]
 */
  __pyx_v_reqd_votes = (((double)__pyx_v_num_total_trees) / 2.0);

  /* "executor.pyx":553
 *     cdef int curr_votes
 *     cdef double reqd_votes = (<double>num_total_trees)/2.0
 *     for i in xrange(candset_votes.second.size()):             # <<<<<<<<<<<<<<
 *         curr_votes = candset_votes.second[i]
 *         if curr_votes + num_total_trees - num_trees_processed - 1 < reqd_votes:
 */
  __pyx_t_16 = __pyx_v_candset_votes.second.size();
  __pyx_t_17 = __pyx_t_16;
  for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
    __pyx_v_i = __pyx_t_18;

    /* "executor.pyx":554
 *     cdef double reqd_votes = (<double>num_total_trees)/2.0
 *     for i in xrange(candset_votes.second.size()):
 *         curr_votes = candset_votes.second[i]             # <<<<<<<<<<<<<<
 *         if curr_votes + num_total_trees - num_trees_processed - 1 < reqd_votes:
 *             continue
 */
    __pyx_v_curr_votes = (__pyx_v_candset_votes.second[__pyx_v_i]);

    /* "executor.pyx":555
 *     for i in xrange(candset_votes.second.size()):
 *         curr_votes = candset_votes.second[i]
 *         if curr_votes + num_total_trees - num_trees_processed - 1 < reqd_votes:             # <<<<<<<<<<<<<<
 *             continue
 *         if curr_votes >= reqd_votes:
 */
    __pyx_t_5 = (((((__pyx_v_curr_votes + __pyx_v_num_total_trees) - __pyx_v_num_trees_processed) - 1) < __pyx_v_reqd_votes) != 0);
    if (__pyx_t_5) {

      /* "executor.pyx":556
 *         curr_votes = candset_votes.second[i]
 *         if curr_votes + num_total_trees - num_trees_processed - 1 < reqd_votes:
 *             continue             # <<<<<<<<<<<<<<
 *         if curr_votes >= reqd_votes:
 *             output_pairs.push_back(candset_votes.first[i])
 */
      goto __pyx_L25_continue;

      /* "executor.pyx":555
 *     for i in xrange(candset_votes.second.size()):
 *         curr_votes = candset_votes.second[i]
 *         if curr_votes + num_total_trees - num_trees_processed - 1 < reqd_votes:             # <<<<<<<<<<<<<<
 *             continue
 *         if curr_votes >= reqd_votes:
 */
    }

    /* "executor.pyx":557
 *         if curr_votes + num_total_trees - num_trees_processed - 1 < reqd_votes:
 *             continue
 *         if curr_votes >= reqd_votes:             # <<<<<<<<<<<<<<
 *             output_pairs.push_back(candset_votes.first[i])
 *         else:
 */
    __pyx_t_5 = ((__pyx_v_curr_votes >= __pyx_v_reqd_votes) != 0);
    if (__pyx_t_5) {

      /* "executor.pyx":558
 *             continue
 *         if curr_votes >= reqd_votes:
 *             output_pairs.push_back(candset_votes.first[i])             # <<<<<<<<<<<<<<
 *         else:
 *             next_candset.push_back(candset_votes.first[i])
 */
      try {
        __pyx_v_output_pairs.push_back((__pyx_v_candset_votes.first[__pyx_v_i]));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 558, __pyx_L1_error)
      }

      /* "executor.pyx":557
 *         if curr_votes + num_total_trees - num_trees_processed - 1 < reqd_votes:
 *             continue
 *         if curr_votes >= reqd_votes:             # <<<<<<<<<<<<<<
 *             output_pairs.push_back(candset_votes.first[i])
 *         else:
 */
      goto __pyx_L28;
    }

    /* "executor.pyx":560
 *             output_pairs.push_back(candset_votes.first[i])
 *         else:
 *             next_candset.push_back(candset_votes.first[i])             # <<<<<<<<<<<<<<
 *             next_votes.push_back(curr_votes)
 * 
 */
    /*else*/ {
      try {
        __pyx_v_next_candset.push_back((__pyx_v_candset_votes.first[__pyx_v_i]));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 560, __pyx_L1_error)
      }

      /* "executor.pyx":561
 *         else:
 *             next_candset.push_back(candset_votes.first[i])
 *             next_votes.push_back(curr_votes)             # <<<<<<<<<<<<<<
 * 
 *     write_output_pairs(output_pairs, working_dir, label)
 */
      try {
        __pyx_v_next_votes.push_back(__pyx_v_curr_votes);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 561, __pyx_L1_error)
      }
    }
    __pyx_L28:;
    __pyx_L25_continue:;
  }

  /* "executor.pyx":563
 *             next_votes.push_back(curr_votes)
 * 
 *     write_output_pairs(output_pairs, working_dir, label)             # <<<<<<<<<<<<<<
 * 
 *     return pair[vector[pair[int, int]], vector[int]](next_candset,
 */
  __pyx_f_8executor_write_output_pairs(__pyx_v_output_pairs, __pyx_v_working_dir, __pyx_v_label);

  /* "executor.pyx":565
 *     write_output_pairs(output_pairs, working_dir, label)
 * 
 *     return pair[vector[pair[int, int]], vector[int]](next_candset,             # <<<<<<<<<<<<<<
 *                                                      next_votes)
 * 
 */
  try {
    __pyx_t_19 = std::pair<std::vector<std::pair<int,int> > ,std::vector<int> > (__pyx_v_next_candset, __pyx_v_next_votes);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 565, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_19;
  goto __pyx_L0;

  /* "executor.pyx":459
 * 
 * 
 * cdef pair[vector[pair[int, int]], vector[int]] execute_tree_plan(             # <<<<<<<<<<<<<<
 *                     pair[vector[pair[int, int]], vector[int]]& candset_votes,
 *                     vector[string]& lstrings, vector[string]& rstrings,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("executor.execute_tree_plan", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "executor.pyx":569
 * 
 * 
 * cdef vector[double] execute_feature_node(vector[pair[int, int]]& candset,             # <<<<<<<<<<<<<<
 *                                          vector[int]& pair_ids,
 *                                          bool top_level_node,
 */

static std::vector<double>  __pyx_f_8executor_execute_feature_node(std::vector<std::pair<int,int> >  &__pyx_v_candset, std::vector<int>  &__pyx_v_pair_ids, bool __pyx_v_top_level_node, std::vector<std::string>  &__pyx_v_lstrings, std::vector<std::string>  &__pyx_v_rstrings, Predicatecpp __pyx_v_predicate, CYTHON_UNUSED int __pyx_v_n_jobs, std::string const &__pyx_v_working_dir) {
  std::vector<std::vector<int> >  __pyx_v_ltokens;
  std::vector<std::vector<int> >  __pyx_v_rtokens;
  int __pyx_v_n;
  int __pyx_v_sim_type;
  int __pyx_v_i;
  std::vector<double>  __pyx_v_feature_values;
  __pyx_t_16py_stringsimjoin_8apply_rf_5utils_token_simfnptr __pyx_v_token_sim_fn;
  __pyx_t_16py_stringsimjoin_8apply_rf_5utils_str_simfnptr __pyx_v_str_sim_fn;
  std::pair<int,int>  __pyx_v_cand;
  std::vector<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::vector<double>  __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("execute_feature_node", 0);

  /* "executor.pyx":578
 *     cdef vector[vector[int]] ltokens, rtokens
 * 
 *     if predicate.is_tok_sim_measure:             # <<<<<<<<<<<<<<
 *         print 'before tok'
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 */
  __pyx_t_1 = (__pyx_v_predicate.is_tok_sim_measure != 0);
  if (__pyx_t_1) {

    /* "executor.pyx":579
 * 
 *     if predicate.is_tok_sim_measure:
 *         print 'before tok'             # <<<<<<<<<<<<<<
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         print 'loaded tok'
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_before_tok) < 0) __PYX_ERR(0, 579, __pyx_L1_error)

    /* "executor.pyx":580
 *     if predicate.is_tok_sim_measure:
 *         print 'before tok'
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)             # <<<<<<<<<<<<<<
 *         print 'loaded tok'
 * 
 */
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_predicate.tokenizer_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_working_dir); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_load_tok(__pyx_t_2, __pyx_t_3, __pyx_v_ltokens, __pyx_v_rtokens, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "executor.pyx":581
 *         print 'before tok'
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         print 'loaded tok'             # <<<<<<<<<<<<<<
 * 
 *     cdef int n, sim_type, i
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_loaded_tok) < 0) __PYX_ERR(0, 581, __pyx_L1_error)

    /* "executor.pyx":578
 *     cdef vector[vector[int]] ltokens, rtokens
 * 
 *     if predicate.is_tok_sim_measure:             # <<<<<<<<<<<<<<
 *         print 'before tok'
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 */
  }

  /* "executor.pyx":585
 *     cdef int n, sim_type, i
 * 
 *     if top_level_node:             # <<<<<<<<<<<<<<
 *         n = candset.size()
 *     else:
 */
  __pyx_t_1 = (__pyx_v_top_level_node != 0);
  if (__pyx_t_1) {

    /* "executor.pyx":586
 * 
 *     if top_level_node:
 *         n = candset.size()             # <<<<<<<<<<<<<<
 *     else:
 *         n = pair_ids.size()
 */
    __pyx_v_n = __pyx_v_candset.size();

    /* "executor.pyx":585
 *     cdef int n, sim_type, i
 * 
 *     if top_level_node:             # <<<<<<<<<<<<<<
 *         n = candset.size()
 *     else:
 */
    goto __pyx_L4;
  }

  /* "executor.pyx":588
 *         n = candset.size()
 *     else:
 *         n = pair_ids.size()             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[double] feature_values = xrange(0, n)
 */
  /*else*/ {
    __pyx_v_n = __pyx_v_pair_ids.size();
  }
  __pyx_L4:;

  /* "executor.pyx":590
 *         n = pair_ids.size()
 * 
 *     cdef vector[double] feature_values = xrange(0, n)             # <<<<<<<<<<<<<<
 * 
 *     sim_type = get_sim_type(predicate.sim_measure_type)
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_vector_from_py_double(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_feature_values = __pyx_t_4;

  /* "executor.pyx":592
 *     cdef vector[double] feature_values = xrange(0, n)
 * 
 *     sim_type = get_sim_type(predicate.sim_measure_type)             # <<<<<<<<<<<<<<
 *     cdef token_simfnptr token_sim_fn
 *     cdef str_simfnptr str_sim_fn
 */
  __pyx_v_sim_type = __pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_sim_type(__pyx_v_predicate.sim_measure_type);

  /* "executor.pyx":597
 *     cdef pair[int, int] cand
 * 
 *     if predicate.is_tok_sim_measure:             # <<<<<<<<<<<<<<
 *         token_sim_fn = get_token_sim_function(sim_type)
 *         if top_level_node:
 */
  __pyx_t_1 = (__pyx_v_predicate.is_tok_sim_measure != 0);
  if (__pyx_t_1) {

    /* "executor.pyx":598
 * 
 *     if predicate.is_tok_sim_measure:
 *         token_sim_fn = get_token_sim_function(sim_type)             # <<<<<<<<<<<<<<
 *         if top_level_node:
 *             for i in prange(n, nogil=True, num_threads=n_jobs):
 */
    __pyx_v_token_sim_fn = __pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_token_sim_function(__pyx_v_sim_type);

    /* "executor.pyx":599
 *     if predicate.is_tok_sim_measure:
 *         token_sim_fn = get_token_sim_function(sim_type)
 *         if top_level_node:             # <<<<<<<<<<<<<<
 *             for i in prange(n, nogil=True, num_threads=n_jobs):
 *                 cand = candset[i]
 */
    __pyx_t_1 = (__pyx_v_top_level_node != 0);
    if (__pyx_t_1) {

      /* "executor.pyx":600
 *         token_sim_fn = get_token_sim_function(sim_type)
 *         if top_level_node:
 *             for i in prange(n, nogil=True, num_threads=n_jobs):             # <<<<<<<<<<<<<<
 *                 cand = candset[i]
 *                 feature_values[i] = token_sim_fn(ltokens[cand.first],
 */
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          __Pyx_FastGIL_Remember();
          #endif
          /*try:*/ {
            __pyx_t_5 = __pyx_v_n;
            if (1 == 0) abort();
            {
                #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                    #undef likely
                    #undef unlikely
                    #define likely(x)   (x)
                    #define unlikely(x) (x)
                #endif
                __pyx_t_7 = (__pyx_t_5 - 0 + 1 - 1/abs(1)) / 1;
                if (__pyx_t_7 > 0)
                {
                    #ifdef _OPENMP
                    #pragma omp parallel num_threads(__pyx_v_n_jobs)
                    #endif /* _OPENMP */
                    {
                        #ifdef _OPENMP
                        #pragma omp for lastprivate(__pyx_v_cand) firstprivate(__pyx_v_i) lastprivate(__pyx_v_i)
                        #endif /* _OPENMP */
                        for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_7; __pyx_t_6++){
                            {
                                __pyx_v_i = (int)(0 + 1 * __pyx_t_6);

                                /* "executor.pyx":601
 *         if top_level_node:
 *             for i in prange(n, nogil=True, num_threads=n_jobs):
 *                 cand = candset[i]             # <<<<<<<<<<<<<<
 *                 feature_values[i] = token_sim_fn(ltokens[cand.first],
 *                                                  rtokens[cand.second])
 */
                                __pyx_v_cand = (__pyx_v_candset[__pyx_v_i]);

                                /* "executor.pyx":602
 *             for i in prange(n, nogil=True, num_threads=n_jobs):
 *                 cand = candset[i]
 *                 feature_values[i] = token_sim_fn(ltokens[cand.first],             # <<<<<<<<<<<<<<
 *                                                  rtokens[cand.second])
 *         else:
 */
                                (__pyx_v_feature_values[__pyx_v_i]) = __pyx_v_token_sim_fn((__pyx_v_ltokens[__pyx_v_cand.first]), (__pyx_v_rtokens[__pyx_v_cand.second]));
                            }
                        }
                    }
                }
            }
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   __builtin_expect(!!(x), 1)
                #define unlikely(x) __builtin_expect(!!(x), 0)
            #endif
          }

          /* "executor.pyx":600
 *         token_sim_fn = get_token_sim_function(sim_type)
 *         if top_level_node:
 *             for i in prange(n, nogil=True, num_threads=n_jobs):             # <<<<<<<<<<<<<<
 *                 cand = candset[i]
 *                 feature_values[i] = token_sim_fn(ltokens[cand.first],
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              __Pyx_FastGIL_Forget();
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L9;
            }
            __pyx_L9:;
          }
      }

      /* "executor.pyx":599
 *     if predicate.is_tok_sim_measure:
 *         token_sim_fn = get_token_sim_function(sim_type)
 *         if top_level_node:             # <<<<<<<<<<<<<<
 *             for i in prange(n, nogil=True, num_threads=n_jobs):
 *                 cand = candset[i]
 */
      goto __pyx_L6;
    }

    /* "executor.pyx":605
 *                                                  rtokens[cand.second])
 *         else:
 *             for i in prange(n, nogil=True, num_threads=n_jobs):             # <<<<<<<<<<<<<<
 *                 cand = candset[pair_ids[i]]
 *                 feature_values[i] = token_sim_fn(ltokens[cand.first],
 */
    /*else*/ {
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          __Pyx_FastGIL_Remember();
          #endif
          /*try:*/ {
            __pyx_t_7 = __pyx_v_n;
            if (1 == 0) abort();
            {
                #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                    #undef likely
                    #undef unlikely
                    #define likely(x)   (x)
                    #define unlikely(x) (x)
                #endif
                __pyx_t_5 = (__pyx_t_7 - 0 + 1 - 1/abs(1)) / 1;
                if (__pyx_t_5 > 0)
                {
                    #ifdef _OPENMP
                    #pragma omp parallel num_threads(__pyx_v_n_jobs)
                    #endif /* _OPENMP */
                    {
                        #ifdef _OPENMP
                        #pragma omp for lastprivate(__pyx_v_cand) firstprivate(__pyx_v_i) lastprivate(__pyx_v_i)
                        #endif /* _OPENMP */
                        for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6++){
                            {
                                __pyx_v_i = (int)(0 + 1 * __pyx_t_6);

                                /* "executor.pyx":606
 *         else:
 *             for i in prange(n, nogil=True, num_threads=n_jobs):
 *                 cand = candset[pair_ids[i]]             # <<<<<<<<<<<<<<
 *                 feature_values[i] = token_sim_fn(ltokens[cand.first],
 *                                                  rtokens[cand.second])
 */
                                __pyx_v_cand = (__pyx_v_candset[(__pyx_v_pair_ids[__pyx_v_i])]);

                                /* "executor.pyx":607
 *             for i in prange(n, nogil=True, num_threads=n_jobs):
 *                 cand = candset[pair_ids[i]]
 *                 feature_values[i] = token_sim_fn(ltokens[cand.first],             # <<<<<<<<<<<<<<
 *                                                  rtokens[cand.second])
 *     else:
 */
                                (__pyx_v_feature_values[__pyx_v_i]) = __pyx_v_token_sim_fn((__pyx_v_ltokens[__pyx_v_cand.first]), (__pyx_v_rtokens[__pyx_v_cand.second]));
                            }
                        }
                    }
                }
            }
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   __builtin_expect(!!(x), 1)
                #define unlikely(x) __builtin_expect(!!(x), 0)
            #endif
          }

          /* "executor.pyx":605
 *                                                  rtokens[cand.second])
 *         else:
 *             for i in prange(n, nogil=True, num_threads=n_jobs):             # <<<<<<<<<<<<<<
 *                 cand = candset[pair_ids[i]]
 *                 feature_values[i] = token_sim_fn(ltokens[cand.first],
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              __Pyx_FastGIL_Forget();
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L18;
            }
            __pyx_L18:;
          }
      }
    }
    __pyx_L6:;

    /* "executor.pyx":597
 *     cdef pair[int, int] cand
 * 
 *     if predicate.is_tok_sim_measure:             # <<<<<<<<<<<<<<
 *         token_sim_fn = get_token_sim_function(sim_type)
 *         if top_level_node:
 */
    goto __pyx_L5;
  }

  /* "executor.pyx":610
 *                                                  rtokens[cand.second])
 *     else:
 *         str_sim_fn = get_str_sim_function(sim_type)             # <<<<<<<<<<<<<<
 *         if top_level_node:
 *             for i in prange(n, nogil=True, num_threads=n_jobs):
 */
  /*else*/ {
    __pyx_v_str_sim_fn = __pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_str_sim_function(__pyx_v_sim_type);

    /* "executor.pyx":611
 *     else:
 *         str_sim_fn = get_str_sim_function(sim_type)
 *         if top_level_node:             # <<<<<<<<<<<<<<
 *             for i in prange(n, nogil=True, num_threads=n_jobs):
 *                 cand = candset[i]
 */
    __pyx_t_1 = (__pyx_v_top_level_node != 0);
    if (__pyx_t_1) {

      /* "executor.pyx":612
 *         str_sim_fn = get_str_sim_function(sim_type)
 *         if top_level_node:
 *             for i in prange(n, nogil=True, num_threads=n_jobs):             # <<<<<<<<<<<<<<
 *                 cand = candset[i]
 *                 feature_values[i] = str_sim_fn(lstrings[cand.first],
 */
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          __Pyx_FastGIL_Remember();
          #endif
          /*try:*/ {
            __pyx_t_5 = __pyx_v_n;
            if (1 == 0) abort();
            {
                #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                    #undef likely
                    #undef unlikely
                    #define likely(x)   (x)
                    #define unlikely(x) (x)
                #endif
                __pyx_t_7 = (__pyx_t_5 - 0 + 1 - 1/abs(1)) / 1;
                if (__pyx_t_7 > 0)
                {
                    #ifdef _OPENMP
                    #pragma omp parallel num_threads(__pyx_v_n_jobs)
                    #endif /* _OPENMP */
                    {
                        #ifdef _OPENMP
                        #pragma omp for lastprivate(__pyx_v_cand) firstprivate(__pyx_v_i) lastprivate(__pyx_v_i)
                        #endif /* _OPENMP */
                        for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_7; __pyx_t_6++){
                            {
                                __pyx_v_i = (int)(0 + 1 * __pyx_t_6);

                                /* "executor.pyx":613
 *         if top_level_node:
 *             for i in prange(n, nogil=True, num_threads=n_jobs):
 *                 cand = candset[i]             # <<<<<<<<<<<<<<
 *                 feature_values[i] = str_sim_fn(lstrings[cand.first],
 *                                                rstrings[cand.second])
 */
                                __pyx_v_cand = (__pyx_v_candset[__pyx_v_i]);

                                /* "executor.pyx":614
 *             for i in prange(n, nogil=True, num_threads=n_jobs):
 *                 cand = candset[i]
 *                 feature_values[i] = str_sim_fn(lstrings[cand.first],             # <<<<<<<<<<<<<<
 *                                                rstrings[cand.second])
 *         else:
 */
                                (__pyx_v_feature_values[__pyx_v_i]) = __pyx_v_str_sim_fn((__pyx_v_lstrings[__pyx_v_cand.first]), (__pyx_v_rstrings[__pyx_v_cand.second]));
                            }
                        }
                    }
                }
            }
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   __builtin_expect(!!(x), 1)
                #define unlikely(x) __builtin_expect(!!(x), 0)
            #endif
          }

          /* "executor.pyx":612
 *         str_sim_fn = get_str_sim_function(sim_type)
 *         if top_level_node:
 *             for i in prange(n, nogil=True, num_threads=n_jobs):             # <<<<<<<<<<<<<<
 *                 cand = candset[i]
 *                 feature_values[i] = str_sim_fn(lstrings[cand.first],
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              __Pyx_FastGIL_Forget();
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L28;
            }
            __pyx_L28:;
          }
      }

      /* "executor.pyx":611
 *     else:
 *         str_sim_fn = get_str_sim_function(sim_type)
 *         if top_level_node:             # <<<<<<<<<<<<<<
 *             for i in prange(n, nogil=True, num_threads=n_jobs):
 *                 cand = candset[i]
 */
      goto __pyx_L25;
    }

    /* "executor.pyx":617
 *                                                rstrings[cand.second])
 *         else:
 *             for i in prange(n, nogil=True, num_threads=n_jobs):             # <<<<<<<<<<<<<<
 *                 cand = candset[pair_ids[i]]
 *                 feature_values[i] = str_sim_fn(lstrings[cand.first],
 */
    /*else*/ {
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          __Pyx_FastGIL_Remember();
          #endif
          /*try:*/ {
            __pyx_t_7 = __pyx_v_n;
            if (1 == 0) abort();
            {
                #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                    #undef likely
                    #undef unlikely
                    #define likely(x)   (x)
                    #define unlikely(x) (x)
                #endif
                __pyx_t_5 = (__pyx_t_7 - 0 + 1 - 1/abs(1)) / 1;
                if (__pyx_t_5 > 0)
                {
                    #ifdef _OPENMP
                    #pragma omp parallel num_threads(__pyx_v_n_jobs)
                    #endif /* _OPENMP */
                    {
                        #ifdef _OPENMP
                        #pragma omp for lastprivate(__pyx_v_cand) firstprivate(__pyx_v_i) lastprivate(__pyx_v_i)
                        #endif /* _OPENMP */
                        for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6++){
                            {
                                __pyx_v_i = (int)(0 + 1 * __pyx_t_6);

                                /* "executor.pyx":618
 *         else:
 *             for i in prange(n, nogil=True, num_threads=n_jobs):
 *                 cand = candset[pair_ids[i]]             # <<<<<<<<<<<<<<
 *                 feature_values[i] = str_sim_fn(lstrings[cand.first],
 *                                                rstrings[cand.second])
 */
                                __pyx_v_cand = (__pyx_v_candset[(__pyx_v_pair_ids[__pyx_v_i])]);

                                /* "executor.pyx":619
 *             for i in prange(n, nogil=True, num_threads=n_jobs):
 *                 cand = candset[pair_ids[i]]
 *                 feature_values[i] = str_sim_fn(lstrings[cand.first],             # <<<<<<<<<<<<<<
 *                                                rstrings[cand.second])
 *     return feature_values
 */
                                (__pyx_v_feature_values[__pyx_v_i]) = __pyx_v_str_sim_fn((__pyx_v_lstrings[__pyx_v_cand.first]), (__pyx_v_rstrings[__pyx_v_cand.second]));
                            }
                        }
                    }
                }
            }
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   __builtin_expect(!!(x), 1)
                #define unlikely(x) __builtin_expect(!!(x), 0)
            #endif
          }

          /* "executor.pyx":617
 *                                                rstrings[cand.second])
 *         else:
 *             for i in prange(n, nogil=True, num_threads=n_jobs):             # <<<<<<<<<<<<<<
 *                 cand = candset[pair_ids[i]]
 *                 feature_values[i] = str_sim_fn(lstrings[cand.first],
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              __Pyx_FastGIL_Forget();
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L37;
            }
            __pyx_L37:;
          }
      }
    }
    __pyx_L25:;
  }
  __pyx_L5:;

  /* "executor.pyx":621
 *                 feature_values[i] = str_sim_fn(lstrings[cand.first],
 *                                                rstrings[cand.second])
 *     return feature_values             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_feature_values;
  goto __pyx_L0;

  /* "executor.pyx":569
 * 
 * 
 * cdef vector[double] execute_feature_node(vector[pair[int, int]]& candset,             # <<<<<<<<<<<<<<
 *                                          vector[int]& pair_ids,
 *                                          bool top_level_node,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("executor.execute_feature_node", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "executor.pyx":624
 * 
 * 
 * cdef vector[int] execute_select_node(vector[int]& pair_ids,             # <<<<<<<<<<<<<<
 *                                      vector[double]& feature_values,
 *                                      Predicatecpp& predicate):
 */

static std::vector<int>  __pyx_f_8executor_execute_select_node(std::vector<int>  &__pyx_v_pair_ids, std::vector<double>  &__pyx_v_feature_values, Predicatecpp &__pyx_v_predicate) {
  std::vector<int>  __pyx_v_output_pair_ids;
  int __pyx_v_n;
  int __pyx_v_comp_type;
  __pyx_t_16py_stringsimjoin_8apply_rf_5utils_compfnptr __pyx_v_comp_fn;
  int __pyx_v_i;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("execute_select_node", 0);

  /* "executor.pyx":628
 *                                      Predicatecpp& predicate):
 *     cdef vector[int] output_pair_ids
 *     cdef int n = pair_ids.size(), pair_id, comp_type             # <<<<<<<<<<<<<<
 * 
 *     comp_type = get_comp_type(predicate.comp_op)
 */
  __pyx_v_n = __pyx_v_pair_ids.size();

  /* "executor.pyx":630
 *     cdef int n = pair_ids.size(), pair_id, comp_type
 * 
 *     comp_type = get_comp_type(predicate.comp_op)             # <<<<<<<<<<<<<<
 *     cdef compfnptr comp_fn = get_comparison_function(comp_type)
 * 
 */
  __pyx_v_comp_type = __pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_comp_type(__pyx_v_predicate.comp_op);

  /* "executor.pyx":631
 * 
 *     comp_type = get_comp_type(predicate.comp_op)
 *     cdef compfnptr comp_fn = get_comparison_function(comp_type)             # <<<<<<<<<<<<<<
 * 
 *     for i in xrange(n):
 */
  __pyx_v_comp_fn = __pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_comparison_function(__pyx_v_comp_type);

  /* "executor.pyx":633
 *     cdef compfnptr comp_fn = get_comparison_function(comp_type)
 * 
 *     for i in xrange(n):             # <<<<<<<<<<<<<<
 *         if comp_fn(feature_values[i], predicate.threshold):
 *             output_pair_ids.push_back(pair_ids[i])
 */
  __pyx_t_1 = __pyx_v_n;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "executor.pyx":634
 * 
 *     for i in xrange(n):
 *         if comp_fn(feature_values[i], predicate.threshold):             # <<<<<<<<<<<<<<
 *             output_pair_ids.push_back(pair_ids[i])
 * 
 */
    __pyx_t_4 = (__pyx_v_comp_fn((__pyx_v_feature_values[__pyx_v_i]), __pyx_v_predicate.threshold) != 0);
    if (__pyx_t_4) {

      /* "executor.pyx":635
 *     for i in xrange(n):
 *         if comp_fn(feature_values[i], predicate.threshold):
 *             output_pair_ids.push_back(pair_ids[i])             # <<<<<<<<<<<<<<
 * 
 *     return output_pair_ids
 */
      try {
        __pyx_v_output_pair_ids.push_back((__pyx_v_pair_ids[__pyx_v_i]));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 635, __pyx_L1_error)
      }

      /* "executor.pyx":634
 * 
 *     for i in xrange(n):
 *         if comp_fn(feature_values[i], predicate.threshold):             # <<<<<<<<<<<<<<
 *             output_pair_ids.push_back(pair_ids[i])
 * 
 */
    }
  }

  /* "executor.pyx":637
 *             output_pair_ids.push_back(pair_ids[i])
 * 
 *     return output_pair_ids             # <<<<<<<<<<<<<<
 * 
 * cdef vector[int] execute_select_node_candset(int n,
 */
  __pyx_r = __pyx_v_output_pair_ids;
  goto __pyx_L0;

  /* "executor.pyx":624
 * 
 * 
 * cdef vector[int] execute_select_node(vector[int]& pair_ids,             # <<<<<<<<<<<<<<
 *                                      vector[double]& feature_values,
 *                                      Predicatecpp& predicate):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("executor.execute_select_node", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "executor.pyx":639
 *     return output_pair_ids
 * 
 * cdef vector[int] execute_select_node_candset(int n,             # <<<<<<<<<<<<<<
 *                                              vector[double]& feature_values,
 *                                              Predicatecpp& predicate):
 */

static std::vector<int>  __pyx_f_8executor_execute_select_node_candset(int __pyx_v_n, std::vector<double>  &__pyx_v_feature_values, Predicatecpp &__pyx_v_predicate) {
  std::vector<int>  __pyx_v_output_pair_ids;
  PyObject *__pyx_v_pair_id = 0;
  PyObject *__pyx_v_comp_type = 0;
  __pyx_t_16py_stringsimjoin_8apply_rf_5utils_compfnptr __pyx_v_comp_fn;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  std::vector<double> ::size_type __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("execute_select_node_candset", 0);

  /* "executor.pyx":645
 *     cdef pair_id, comp_type
 * 
 *     comp_type = get_comp_type(predicate.comp_op)             # <<<<<<<<<<<<<<
 *     cdef compfnptr comp_fn = get_comparison_function(comp_type)
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_comp_type(__pyx_v_predicate.comp_op)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_comp_type = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "executor.pyx":646
 * 
 *     comp_type = get_comp_type(predicate.comp_op)
 *     cdef compfnptr comp_fn = get_comparison_function(comp_type)             # <<<<<<<<<<<<<<
 * 
 *     for pair_id in xrange(n):
 */
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_comp_type); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 646, __pyx_L1_error)
  __pyx_v_comp_fn = __pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_comparison_function(__pyx_t_2);

  /* "executor.pyx":648
 *     cdef compfnptr comp_fn = get_comparison_function(comp_type)
 * 
 *     for pair_id in xrange(n):             # <<<<<<<<<<<<<<
 *         if comp_fn(feature_values[pair_id], predicate.threshold):
 *             output_pair_ids.push_back(pair_id)
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 648, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 648, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 648, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 648, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 648, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 648, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 648, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_pair_id, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "executor.pyx":649
 * 
 *     for pair_id in xrange(n):
 *         if comp_fn(feature_values[pair_id], predicate.threshold):             # <<<<<<<<<<<<<<
 *             output_pair_ids.push_back(pair_id)
 * 
 */
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_pair_id); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 649, __pyx_L1_error)
    __pyx_t_7 = (__pyx_v_comp_fn((__pyx_v_feature_values[__pyx_t_6]), __pyx_v_predicate.threshold) != 0);
    if (__pyx_t_7) {

      /* "executor.pyx":650
 *     for pair_id in xrange(n):
 *         if comp_fn(feature_values[pair_id], predicate.threshold):
 *             output_pair_ids.push_back(pair_id)             # <<<<<<<<<<<<<<
 * 
 *     return output_pair_ids
 */
      __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_pair_id); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 650, __pyx_L1_error)
      try {
        __pyx_v_output_pair_ids.push_back(__pyx_t_2);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 650, __pyx_L1_error)
      }

      /* "executor.pyx":649
 * 
 *     for pair_id in xrange(n):
 *         if comp_fn(feature_values[pair_id], predicate.threshold):             # <<<<<<<<<<<<<<
 *             output_pair_ids.push_back(pair_id)
 * 
 */
    }

    /* "executor.pyx":648
 *     cdef compfnptr comp_fn = get_comparison_function(comp_type)
 * 
 *     for pair_id in xrange(n):             # <<<<<<<<<<<<<<
 *         if comp_fn(feature_values[pair_id], predicate.threshold):
 *             output_pair_ids.push_back(pair_id)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":652
 *             output_pair_ids.push_back(pair_id)
 * 
 *     return output_pair_ids             # <<<<<<<<<<<<<<
 * 
 * cdef vector[int] execute_filter_node1(vector[pair[int, int]]& candset,
 */
  __pyx_r = __pyx_v_output_pair_ids;
  goto __pyx_L0;

  /* "executor.pyx":639
 *     return output_pair_ids
 * 
 * cdef vector[int] execute_select_node_candset(int n,             # <<<<<<<<<<<<<<
 *                                              vector[double]& feature_values,
 *                                              Predicatecpp& predicate):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("executor.execute_select_node_candset", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pair_id);
  __Pyx_XDECREF(__pyx_v_comp_type);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "executor.pyx":654
 *     return output_pair_ids
 * 
 * cdef vector[int] execute_filter_node1(vector[pair[int, int]]& candset,             # <<<<<<<<<<<<<<
 *                                      vector[int]& pair_ids,
 *                                      bool top_level_node,
 */

static std::vector<int>  __pyx_f_8executor_execute_filter_node1(std::vector<std::pair<int,int> >  &__pyx_v_candset, std::vector<int>  &__pyx_v_pair_ids, bool __pyx_v_top_level_node, std::vector<std::string>  &__pyx_v_lstrings, std::vector<std::string>  &__pyx_v_rstrings, Predicatecpp __pyx_v_predicate, int __pyx_v_n_jobs, std::string const &__pyx_v_working_dir) {
  std::vector<std::vector<int> >  __pyx_v_ltokens;
  std::vector<std::vector<int> >  __pyx_v_rtokens;
  std::vector<std::pair<int,int> >  __pyx_v_partitions;
  std::vector<int>  __pyx_v_final_output_pairs;
  std::vector<int>  __pyx_v_part_pairs;
  std::vector<std::vector<int> >  __pyx_v_output_pairs;
  int __pyx_v_n;
  int __pyx_v_start;
  int __pyx_v_end;
  int __pyx_v_i;
  PyObject *__pyx_v_partition_size = NULL;
  int __pyx_v_sim_type;
  int __pyx_v_comp_type;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  std::pair<int,int>  __pyx_t_9;
  std::vector<int>  __pyx_t_10;
  std::vector<std::vector<int> > ::iterator __pyx_t_11;
  __Pyx_RefNannySetupContext("execute_filter_node1", 0);

  /* "executor.pyx":662
 *                                      int n_jobs, const string& working_dir):
 *     cdef vector[vector[int]] ltokens, rtokens
 *     if predicate.is_tok_sim_measure:             # <<<<<<<<<<<<<<
 *         print 'before tok'
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 */
  __pyx_t_1 = (__pyx_v_predicate.is_tok_sim_measure != 0);
  if (__pyx_t_1) {

    /* "executor.pyx":663
 *     cdef vector[vector[int]] ltokens, rtokens
 *     if predicate.is_tok_sim_measure:
 *         print 'before tok'             # <<<<<<<<<<<<<<
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         print 'loaded tok'
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_before_tok) < 0) __PYX_ERR(0, 663, __pyx_L1_error)

    /* "executor.pyx":664
 *     if predicate.is_tok_sim_measure:
 *         print 'before tok'
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)             # <<<<<<<<<<<<<<
 *         print 'loaded tok'
 *     cdef vector[pair[int, int]] partitions
 */
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_predicate.tokenizer_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 664, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_working_dir); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 664, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_load_tok(__pyx_t_2, __pyx_t_3, __pyx_v_ltokens, __pyx_v_rtokens, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "executor.pyx":665
 *         print 'before tok'
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 *         print 'loaded tok'             # <<<<<<<<<<<<<<
 *     cdef vector[pair[int, int]] partitions
 *     cdef vector[int] final_output_pairs, part_pairs
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_loaded_tok) < 0) __PYX_ERR(0, 665, __pyx_L1_error)

    /* "executor.pyx":662
 *                                      int n_jobs, const string& working_dir):
 *     cdef vector[vector[int]] ltokens, rtokens
 *     if predicate.is_tok_sim_measure:             # <<<<<<<<<<<<<<
 *         print 'before tok'
 *         load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 */
  }

  /* "executor.pyx":669
 *     cdef vector[int] final_output_pairs, part_pairs
 *     cdef vector[vector[int]] output_pairs
 *     cdef int n, start=0, end, i             # <<<<<<<<<<<<<<
 * 
 *     if top_level_node:
 */
  __pyx_v_start = 0;

  /* "executor.pyx":671
 *     cdef int n, start=0, end, i
 * 
 *     if top_level_node:             # <<<<<<<<<<<<<<
 *         n = candset.size()
 *     else:
 */
  __pyx_t_1 = (__pyx_v_top_level_node != 0);
  if (__pyx_t_1) {

    /* "executor.pyx":672
 * 
 *     if top_level_node:
 *         n = candset.size()             # <<<<<<<<<<<<<<
 *     else:
 *         n = pair_ids.size()
 */
    __pyx_v_n = __pyx_v_candset.size();

    /* "executor.pyx":671
 *     cdef int n, start=0, end, i
 * 
 *     if top_level_node:             # <<<<<<<<<<<<<<
 *         n = candset.size()
 *     else:
 */
    goto __pyx_L4;
  }

  /* "executor.pyx":674
 *         n = candset.size()
 *     else:
 *         n = pair_ids.size()             # <<<<<<<<<<<<<<
 * 
 *     partition_size = <int>(<float> n / <float> n_jobs)
 */
  /*else*/ {
    __pyx_v_n = __pyx_v_pair_ids.size();
  }
  __pyx_L4:;

  /* "executor.pyx":676
 *         n = pair_ids.size()
 * 
 *     partition_size = <int>(<float> n / <float> n_jobs)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(n_jobs):
 */
  if (unlikely(((float)__pyx_v_n_jobs) == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 676, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_From_int(((int)(((float)__pyx_v_n) / ((float)__pyx_v_n_jobs)))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_partition_size = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "executor.pyx":678
 *     partition_size = <int>(<float> n / <float> n_jobs)
 * 
 *     for i in range(n_jobs):             # <<<<<<<<<<<<<<
 *         end = start + partition_size
 *         if end > n or i == n_jobs - 1:
 */
  __pyx_t_4 = __pyx_v_n_jobs;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "executor.pyx":679
 * 
 *     for i in range(n_jobs):
 *         end = start + partition_size             # <<<<<<<<<<<<<<
 *         if end > n or i == n_jobs - 1:
 *             end = n
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_start); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_v_partition_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 679, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_end = __pyx_t_7;

    /* "executor.pyx":680
 *     for i in range(n_jobs):
 *         end = start + partition_size
 *         if end > n or i == n_jobs - 1:             # <<<<<<<<<<<<<<
 *             end = n
 *         partitions.push_back(pair[int, int](start, end))
 */
    __pyx_t_8 = ((__pyx_v_end > __pyx_v_n) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_1 = __pyx_t_8;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_8 = ((__pyx_v_i == (__pyx_v_n_jobs - 1)) != 0);
    __pyx_t_1 = __pyx_t_8;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_1) {

      /* "executor.pyx":681
 *         end = start + partition_size
 *         if end > n or i == n_jobs - 1:
 *             end = n             # <<<<<<<<<<<<<<
 *         partitions.push_back(pair[int, int](start, end))
 * 
 */
      __pyx_v_end = __pyx_v_n;

      /* "executor.pyx":680
 *     for i in range(n_jobs):
 *         end = start + partition_size
 *         if end > n or i == n_jobs - 1:             # <<<<<<<<<<<<<<
 *             end = n
 *         partitions.push_back(pair[int, int](start, end))
 */
    }

    /* "executor.pyx":682
 *         if end > n or i == n_jobs - 1:
 *             end = n
 *         partitions.push_back(pair[int, int](start, end))             # <<<<<<<<<<<<<<
 * 
 *         start = end
 */
    try {
      __pyx_t_9 = std::pair<int,int> (__pyx_v_start, __pyx_v_end);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 682, __pyx_L1_error)
    }
    try {
      __pyx_v_partitions.push_back(__pyx_t_9);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 682, __pyx_L1_error)
    }

    /* "executor.pyx":684
 *         partitions.push_back(pair[int, int](start, end))
 * 
 *         start = end             # <<<<<<<<<<<<<<
 *         output_pairs.push_back(vector[int]())
 * 
 */
    __pyx_v_start = __pyx_v_end;

    /* "executor.pyx":685
 * 
 *         start = end
 *         output_pairs.push_back(vector[int]())             # <<<<<<<<<<<<<<
 * 
 *     cdef int sim_type, comp_type
 */
    try {
      __pyx_t_10 = std::vector<int> ();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 685, __pyx_L1_error)
    }
    try {
      __pyx_v_output_pairs.push_back(__pyx_t_10);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 685, __pyx_L1_error)
    }
  }

  /* "executor.pyx":689
 *     cdef int sim_type, comp_type
 * 
 *     sim_type = get_sim_type(predicate.sim_measure_type)             # <<<<<<<<<<<<<<
 *     comp_type = get_comp_type(predicate.comp_op)
 *     print 'parallen begin'
 */
  __pyx_v_sim_type = __pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_sim_type(__pyx_v_predicate.sim_measure_type);

  /* "executor.pyx":690
 * 
 *     sim_type = get_sim_type(predicate.sim_measure_type)
 *     comp_type = get_comp_type(predicate.comp_op)             # <<<<<<<<<<<<<<
 *     print 'parallen begin'
 *     for i in prange(n_jobs, nogil=True):
 */
  __pyx_v_comp_type = __pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_comp_type(__pyx_v_predicate.comp_op);

  /* "executor.pyx":691
 *     sim_type = get_sim_type(predicate.sim_measure_type)
 *     comp_type = get_comp_type(predicate.comp_op)
 *     print 'parallen begin'             # <<<<<<<<<<<<<<
 *     for i in prange(n_jobs, nogil=True):
 *         execute_filter_node_part1(partitions[i], candset, pair_ids, top_level_node,
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_parallen_begin) < 0) __PYX_ERR(0, 691, __pyx_L1_error)

  /* "executor.pyx":692
 *     comp_type = get_comp_type(predicate.comp_op)
 *     print 'parallen begin'
 *     for i in prange(n_jobs, nogil=True):             # <<<<<<<<<<<<<<
 *         execute_filter_node_part1(partitions[i], candset, pair_ids, top_level_node,
 *                                   ltokens, rtokens, lstrings, rstrings,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        __pyx_t_4 = __pyx_v_n_jobs;
        if (1 == 0) abort();
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_6 = (__pyx_t_4 - 0 + 1 - 1/abs(1)) / 1;
            if (__pyx_t_6 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #pragma omp for firstprivate(__pyx_v_i) lastprivate(__pyx_v_i)
                    #endif /* _OPENMP */
                    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_6; __pyx_t_5++){
                        {
                            __pyx_v_i = (int)(0 + 1 * __pyx_t_5);

                            /* "executor.pyx":693
 *     print 'parallen begin'
 *     for i in prange(n_jobs, nogil=True):
 *         execute_filter_node_part1(partitions[i], candset, pair_ids, top_level_node,             # <<<<<<<<<<<<<<
 *                                   ltokens, rtokens, lstrings, rstrings,
 *                                  predicate, sim_type, comp_type, output_pairs[i])
 */
                            __pyx_f_8executor_execute_filter_node_part1((__pyx_v_partitions[__pyx_v_i]), __pyx_v_candset, __pyx_v_pair_ids, __pyx_v_top_level_node, __pyx_v_ltokens, __pyx_v_rtokens, __pyx_v_lstrings, __pyx_v_rstrings, __pyx_v_predicate, __pyx_v_sim_type, __pyx_v_comp_type, (__pyx_v_output_pairs[__pyx_v_i]));
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "executor.pyx":692
 *     comp_type = get_comp_type(predicate.comp_op)
 *     print 'parallen begin'
 *     for i in prange(n_jobs, nogil=True):             # <<<<<<<<<<<<<<
 *         execute_filter_node_part1(partitions[i], candset, pair_ids, top_level_node,
 *                                   ltokens, rtokens, lstrings, rstrings,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L12;
        }
        __pyx_L12:;
      }
  }

  /* "executor.pyx":696
 *                                   ltokens, rtokens, lstrings, rstrings,
 *                                  predicate, sim_type, comp_type, output_pairs[i])
 *     print 'parallen end'             # <<<<<<<<<<<<<<
 *     for part_pairs in output_pairs:
 *         final_output_pairs.insert(final_output_pairs.end(), part_pairs.begin(), part_pairs.end())
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_parallen_end) < 0) __PYX_ERR(0, 696, __pyx_L1_error)

  /* "executor.pyx":697
 *                                  predicate, sim_type, comp_type, output_pairs[i])
 *     print 'parallen end'
 *     for part_pairs in output_pairs:             # <<<<<<<<<<<<<<
 *         final_output_pairs.insert(final_output_pairs.end(), part_pairs.begin(), part_pairs.end())
 * 
 */
  __pyx_t_11 = __pyx_v_output_pairs.begin();
  for (;;) {
    if (!(__pyx_t_11 != __pyx_v_output_pairs.end())) break;
    __pyx_t_10 = *__pyx_t_11;
    ++__pyx_t_11;
    __pyx_v_part_pairs = __pyx_t_10;

    /* "executor.pyx":698
 *     print 'parallen end'
 *     for part_pairs in output_pairs:
 *         final_output_pairs.insert(final_output_pairs.end(), part_pairs.begin(), part_pairs.end())             # <<<<<<<<<<<<<<
 * 
 *     return final_output_pairs
 */
    try {
      __pyx_v_final_output_pairs.insert(__pyx_v_final_output_pairs.end(), __pyx_v_part_pairs.begin(), __pyx_v_part_pairs.end());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 698, __pyx_L1_error)
    }

    /* "executor.pyx":697
 *                                  predicate, sim_type, comp_type, output_pairs[i])
 *     print 'parallen end'
 *     for part_pairs in output_pairs:             # <<<<<<<<<<<<<<
 *         final_output_pairs.insert(final_output_pairs.end(), part_pairs.begin(), part_pairs.end())
 * 
 */
  }

  /* "executor.pyx":700
 *         final_output_pairs.insert(final_output_pairs.end(), part_pairs.begin(), part_pairs.end())
 * 
 *     return final_output_pairs             # <<<<<<<<<<<<<<
 * 
 * cdef void execute_filter_node_part1(pair[int, int] partition,
 */
  __pyx_r = __pyx_v_final_output_pairs;
  goto __pyx_L0;

  /* "executor.pyx":654
 *     return output_pair_ids
 * 
 * cdef vector[int] execute_filter_node1(vector[pair[int, int]]& candset,             # <<<<<<<<<<<<<<
 *                                      vector[int]& pair_ids,
 *                                      bool top_level_node,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("executor.execute_filter_node1", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_partition_size);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "executor.pyx":702
 *     return final_output_pairs
 * 
 * cdef void execute_filter_node_part1(pair[int, int] partition,             # <<<<<<<<<<<<<<
 *                                    vector[pair[int, int]]& candset,
 *                                    vector[int]& pair_ids,
 */

static void __pyx_f_8executor_execute_filter_node_part1(std::pair<int,int>  __pyx_v_partition, std::vector<std::pair<int,int> >  &__pyx_v_candset, std::vector<int>  &__pyx_v_pair_ids, bool __pyx_v_top_level_node, std::vector<std::vector<int> >  &__pyx_v_ltokens, std::vector<std::vector<int> >  &__pyx_v_rtokens, std::vector<std::string>  &__pyx_v_lstrings, std::vector<std::string>  &__pyx_v_rstrings, Predicatecpp &__pyx_v_predicate, int __pyx_v_sim_type, int __pyx_v_comp_type, std::vector<int>  &__pyx_v_output_pairs) {
  std::pair<int,int>  __pyx_v_cand;
  int __pyx_v_i;
  __pyx_t_16py_stringsimjoin_8apply_rf_5utils_str_simfnptr __pyx_v_str_sim_fn;
  __pyx_t_16py_stringsimjoin_8apply_rf_5utils_token_simfnptr __pyx_v_token_sim_fn;
  __pyx_t_16py_stringsimjoin_8apply_rf_5utils_compfnptr __pyx_v_comp_fn;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "executor.pyx":719
 *     cdef str_simfnptr str_sim_fn
 *     cdef token_simfnptr token_sim_fn
 *     cdef compfnptr comp_fn = get_comparison_function(comp_type)             # <<<<<<<<<<<<<<
 * 
 *     if predicate.is_tok_sim_measure:
 */
  __pyx_v_comp_fn = __pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_comparison_function(__pyx_v_comp_type);

  /* "executor.pyx":721
 *     cdef compfnptr comp_fn = get_comparison_function(comp_type)
 * 
 *     if predicate.is_tok_sim_measure:             # <<<<<<<<<<<<<<
 *         token_sim_fn = get_token_sim_function(sim_type)
 *         if top_level_node:
 */
  __pyx_t_1 = (__pyx_v_predicate.is_tok_sim_measure != 0);
  if (__pyx_t_1) {

    /* "executor.pyx":722
 * 
 *     if predicate.is_tok_sim_measure:
 *         token_sim_fn = get_token_sim_function(sim_type)             # <<<<<<<<<<<<<<
 *         if top_level_node:
 *             for i in range(partition.first, partition.second):
 */
    __pyx_v_token_sim_fn = __pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_token_sim_function(__pyx_v_sim_type);

    /* "executor.pyx":723
 *     if predicate.is_tok_sim_measure:
 *         token_sim_fn = get_token_sim_function(sim_type)
 *         if top_level_node:             # <<<<<<<<<<<<<<
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[i]
 */
    __pyx_t_1 = (__pyx_v_top_level_node != 0);
    if (__pyx_t_1) {

      /* "executor.pyx":724
 *         token_sim_fn = get_token_sim_function(sim_type)
 *         if top_level_node:
 *             for i in range(partition.first, partition.second):             # <<<<<<<<<<<<<<
 *                 cand  = candset[i]
 *                 if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),
 */
      __pyx_t_2 = __pyx_v_partition.second;
      __pyx_t_3 = __pyx_t_2;
      for (__pyx_t_4 = __pyx_v_partition.first; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
        __pyx_v_i = __pyx_t_4;

        /* "executor.pyx":725
 *         if top_level_node:
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[i]             # <<<<<<<<<<<<<<
 *                 if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),
 *                            predicate.threshold):
 */
        __pyx_v_cand = (__pyx_v_candset[__pyx_v_i]);

        /* "executor.pyx":726
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[i]
 *                 if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),             # <<<<<<<<<<<<<<
 *                            predicate.threshold):
 *                     output_pairs.push_back(i)
 */
        __pyx_t_1 = (__pyx_v_comp_fn(__pyx_v_token_sim_fn((__pyx_v_ltokens[__pyx_v_cand.first]), (__pyx_v_rtokens[__pyx_v_cand.second])), __pyx_v_predicate.threshold) != 0);
        if (__pyx_t_1) {

          /* "executor.pyx":728
 *                 if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),
 *                            predicate.threshold):
 *                     output_pairs.push_back(i)             # <<<<<<<<<<<<<<
 *         else:
 *             for i in range(partition.first, partition.second):
 */
          try {
            __pyx_v_output_pairs.push_back(__pyx_v_i);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 728, __pyx_L1_error)
          }

          /* "executor.pyx":726
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[i]
 *                 if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),             # <<<<<<<<<<<<<<
 *                            predicate.threshold):
 *                     output_pairs.push_back(i)
 */
        }
      }

      /* "executor.pyx":723
 *     if predicate.is_tok_sim_measure:
 *         token_sim_fn = get_token_sim_function(sim_type)
 *         if top_level_node:             # <<<<<<<<<<<<<<
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[i]
 */
      goto __pyx_L4;
    }

    /* "executor.pyx":730
 *                     output_pairs.push_back(i)
 *         else:
 *             for i in range(partition.first, partition.second):             # <<<<<<<<<<<<<<
 *                 cand  = candset[pair_ids[i]]
 *                 if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),
 */
    /*else*/ {
      __pyx_t_2 = __pyx_v_partition.second;
      __pyx_t_3 = __pyx_t_2;
      for (__pyx_t_4 = __pyx_v_partition.first; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
        __pyx_v_i = __pyx_t_4;

        /* "executor.pyx":731
 *         else:
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[pair_ids[i]]             # <<<<<<<<<<<<<<
 *                 if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),
 *                            predicate.threshold):
 */
        __pyx_v_cand = (__pyx_v_candset[(__pyx_v_pair_ids[__pyx_v_i])]);

        /* "executor.pyx":732
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[pair_ids[i]]
 *                 if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),             # <<<<<<<<<<<<<<
 *                            predicate.threshold):
 *                     output_pairs.push_back(pair_ids[i])
 */
        __pyx_t_1 = (__pyx_v_comp_fn(__pyx_v_token_sim_fn((__pyx_v_ltokens[__pyx_v_cand.first]), (__pyx_v_rtokens[__pyx_v_cand.second])), __pyx_v_predicate.threshold) != 0);
        if (__pyx_t_1) {

          /* "executor.pyx":734
 *                 if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),
 *                            predicate.threshold):
 *                     output_pairs.push_back(pair_ids[i])             # <<<<<<<<<<<<<<
 *     else:
 *         str_sim_fn = get_str_sim_function(sim_type)
 */
          try {
            __pyx_v_output_pairs.push_back((__pyx_v_pair_ids[__pyx_v_i]));
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 734, __pyx_L1_error)
          }

          /* "executor.pyx":732
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[pair_ids[i]]
 *                 if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),             # <<<<<<<<<<<<<<
 *                            predicate.threshold):
 *                     output_pairs.push_back(pair_ids[i])
 */
        }
      }
    }
    __pyx_L4:;

    /* "executor.pyx":721
 *     cdef compfnptr comp_fn = get_comparison_function(comp_type)
 * 
 *     if predicate.is_tok_sim_measure:             # <<<<<<<<<<<<<<
 *         token_sim_fn = get_token_sim_function(sim_type)
 *         if top_level_node:
 */
    goto __pyx_L3;
  }

  /* "executor.pyx":736
 *                     output_pairs.push_back(pair_ids[i])
 *     else:
 *         str_sim_fn = get_str_sim_function(sim_type)             # <<<<<<<<<<<<<<
 *         if top_level_node:
 *             for i in range(partition.first, partition.second):
 */
  /*else*/ {
    __pyx_v_str_sim_fn = __pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_str_sim_function(__pyx_v_sim_type);

    /* "executor.pyx":737
 *     else:
 *         str_sim_fn = get_str_sim_function(sim_type)
 *         if top_level_node:             # <<<<<<<<<<<<<<
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[i]
 */
    __pyx_t_1 = (__pyx_v_top_level_node != 0);
    if (__pyx_t_1) {

      /* "executor.pyx":738
 *         str_sim_fn = get_str_sim_function(sim_type)
 *         if top_level_node:
 *             for i in range(partition.first, partition.second):             # <<<<<<<<<<<<<<
 *                 cand  = candset[i]
 *                 if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),
 */
      __pyx_t_2 = __pyx_v_partition.second;
      __pyx_t_3 = __pyx_t_2;
      for (__pyx_t_4 = __pyx_v_partition.first; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
        __pyx_v_i = __pyx_t_4;

        /* "executor.pyx":739
 *         if top_level_node:
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[i]             # <<<<<<<<<<<<<<
 *                 if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),
 *                            predicate.threshold):
 */
        __pyx_v_cand = (__pyx_v_candset[__pyx_v_i]);

        /* "executor.pyx":740
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[i]
 *                 if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),             # <<<<<<<<<<<<<<
 *                            predicate.threshold):
 *                     output_pairs.push_back(i)
 */
        __pyx_t_1 = (__pyx_v_comp_fn(__pyx_v_str_sim_fn((__pyx_v_lstrings[__pyx_v_cand.first]), (__pyx_v_rstrings[__pyx_v_cand.second])), __pyx_v_predicate.threshold) != 0);
        if (__pyx_t_1) {

          /* "executor.pyx":742
 *                 if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),
 *                            predicate.threshold):
 *                     output_pairs.push_back(i)             # <<<<<<<<<<<<<<
 *         else:
 *             for i in range(partition.first, partition.second):
 */
          try {
            __pyx_v_output_pairs.push_back(__pyx_v_i);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 742, __pyx_L1_error)
          }

          /* "executor.pyx":740
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[i]
 *                 if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),             # <<<<<<<<<<<<<<
 *                            predicate.threshold):
 *                     output_pairs.push_back(i)
 */
        }
      }

      /* "executor.pyx":737
 *     else:
 *         str_sim_fn = get_str_sim_function(sim_type)
 *         if top_level_node:             # <<<<<<<<<<<<<<
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[i]
 */
      goto __pyx_L11;
    }

    /* "executor.pyx":744
 *                     output_pairs.push_back(i)
 *         else:
 *             for i in range(partition.first, partition.second):             # <<<<<<<<<<<<<<
 *                 cand  = candset[pair_ids[i]]
 *                 if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),
 */
    /*else*/ {
      __pyx_t_2 = __pyx_v_partition.second;
      __pyx_t_3 = __pyx_t_2;
      for (__pyx_t_4 = __pyx_v_partition.first; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
        __pyx_v_i = __pyx_t_4;

        /* "executor.pyx":745
 *         else:
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[pair_ids[i]]             # <<<<<<<<<<<<<<
 *                 if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),
 *                            predicate.threshold):
 */
        __pyx_v_cand = (__pyx_v_candset[(__pyx_v_pair_ids[__pyx_v_i])]);

        /* "executor.pyx":746
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[pair_ids[i]]
 *                 if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),             # <<<<<<<<<<<<<<
 *                            predicate.threshold):
 *                     output_pairs.push_back(pair_ids[i])
 */
        __pyx_t_1 = (__pyx_v_comp_fn(__pyx_v_str_sim_fn((__pyx_v_lstrings[__pyx_v_cand.first]), (__pyx_v_rstrings[__pyx_v_cand.second])), __pyx_v_predicate.threshold) != 0);
        if (__pyx_t_1) {

          /* "executor.pyx":748
 *                 if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),
 *                            predicate.threshold):
 *                     output_pairs.push_back(pair_ids[i])             # <<<<<<<<<<<<<<
 * 
 * 
 */
          try {
            __pyx_v_output_pairs.push_back((__pyx_v_pair_ids[__pyx_v_i]));
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 748, __pyx_L1_error)
          }

          /* "executor.pyx":746
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[pair_ids[i]]
 *                 if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),             # <<<<<<<<<<<<<<
 *                            predicate.threshold):
 *                     output_pairs.push_back(pair_ids[i])
 */
        }
      }
    }
    __pyx_L11:;
  }
  __pyx_L3:;

  /* "executor.pyx":702
 *     return final_output_pairs
 * 
 * cdef void execute_filter_node_part1(pair[int, int] partition,             # <<<<<<<<<<<<<<
 *                                    vector[pair[int, int]]& candset,
 *                                    vector[int]& pair_ids,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("executor.execute_filter_node_part1", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
}

/* "executor.pyx":751
 * 
 * 
 * cdef vector[int] split(string inp_string) nogil:             # <<<<<<<<<<<<<<
 *     cdef char* pch
 *     pch = strtok (<char*> inp_string.c_str(), ",")
 */

static std::vector<int>  __pyx_f_8executor_split(std::string __pyx_v_inp_string) {
  char *__pyx_v_pch;
  std::vector<int>  __pyx_v_out_tokens;
  std::vector<int>  __pyx_r;
  int __pyx_t_1;

  /* "executor.pyx":753
 * cdef vector[int] split(string inp_string) nogil:
 *     cdef char* pch
 *     pch = strtok (<char*> inp_string.c_str(), ",")             # <<<<<<<<<<<<<<
 *     cdef vector[int] out_tokens
 *     while pch != NULL:
 */
  __pyx_v_pch = strtok(((char *)__pyx_v_inp_string.c_str()), ((char const *)","));

  /* "executor.pyx":755
 *     pch = strtok (<char*> inp_string.c_str(), ",")
 *     cdef vector[int] out_tokens
 *     while pch != NULL:             # <<<<<<<<<<<<<<
 *         out_tokens.push_back(atoi(pch))
 *         pch = strtok (NULL, ",")
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_pch != NULL) != 0);
    if (!__pyx_t_1) break;

    /* "executor.pyx":756
 *     cdef vector[int] out_tokens
 *     while pch != NULL:
 *         out_tokens.push_back(atoi(pch))             # <<<<<<<<<<<<<<
 *         pch = strtok (NULL, ",")
 *     return out_tokens
 */
    try {
      __pyx_v_out_tokens.push_back(atoi(__pyx_v_pch));
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 756, __pyx_L1_error)
    }

    /* "executor.pyx":757
 *     while pch != NULL:
 *         out_tokens.push_back(atoi(pch))
 *         pch = strtok (NULL, ",")             # <<<<<<<<<<<<<<
 *     return out_tokens
 * 
 */
    __pyx_v_pch = strtok(NULL, ((char const *)","));
  }

  /* "executor.pyx":758
 *         out_tokens.push_back(atoi(pch))
 *         pch = strtok (NULL, ",")
 *     return out_tokens             # <<<<<<<<<<<<<<
 * 
 * cdef void tokenize_strings(vector[Tree]& trees, vector[string]& lstrings,
 */
  __pyx_r = __pyx_v_out_tokens;
  goto __pyx_L0;

  /* "executor.pyx":751
 * 
 * 
 * cdef vector[int] split(string inp_string) nogil:             # <<<<<<<<<<<<<<
 *     cdef char* pch
 *     pch = strtok (<char*> inp_string.c_str(), ",")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("executor.split", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  return __pyx_r;
}

/* "executor.pyx":760
 *     return out_tokens
 * 
 * cdef void tokenize_strings(vector[Tree]& trees, vector[string]& lstrings,             # <<<<<<<<<<<<<<
 *                       vector[string]& rstrings, const string& working_dir):
 *     cdef oset[string] tokenizers
 */

static void __pyx_f_8executor_tokenize_strings(std::vector<Tree>  &__pyx_v_trees, std::vector<std::string>  &__pyx_v_lstrings, std::vector<std::string>  &__pyx_v_rstrings, std::string const &__pyx_v_working_dir) {
  std::set<std::string>  __pyx_v_tokenizers;
  Tree __pyx_v_tree;
  Rule __pyx_v_rule;
  Predicatecpp __pyx_v_predicate;
  std::string __pyx_v_tok_type;
  __Pyx_RefNannyDeclarations
  std::vector<Tree> ::iterator __pyx_t_1;
  Tree __pyx_t_2;
  std::vector<Rule> ::iterator __pyx_t_3;
  std::vector<Rule>  *__pyx_t_4;
  Rule __pyx_t_5;
  std::vector<Predicatecpp> ::iterator __pyx_t_6;
  std::vector<Predicatecpp>  *__pyx_t_7;
  Predicatecpp __pyx_t_8;
  int __pyx_t_9;
  std::set<std::string> ::iterator __pyx_t_10;
  std::string __pyx_t_11;
  __Pyx_RefNannySetupContext("tokenize_strings", 0);

  /* "executor.pyx":766
 *     cdef Rule rule
 *     cdef Predicatecpp predicate
 *     for tree in trees:             # <<<<<<<<<<<<<<
 *         for rule in tree.rules:
 *             for predicate in rule.predicates:
 */
  __pyx_t_1 = __pyx_v_trees.begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_v_trees.end())) break;
    __pyx_t_2 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_v_tree = __pyx_t_2;

    /* "executor.pyx":767
 *     cdef Predicatecpp predicate
 *     for tree in trees:
 *         for rule in tree.rules:             # <<<<<<<<<<<<<<
 *             for predicate in rule.predicates:
 *                 if predicate.sim_measure_type.compare('EDIT_DISTANCE') == 0:
 */
    __pyx_t_4 = &__pyx_v_tree.rules;
    __pyx_t_3 = __pyx_t_4->begin();
    for (;;) {
      if (!(__pyx_t_3 != __pyx_t_4->end())) break;
      __pyx_t_5 = *__pyx_t_3;
      ++__pyx_t_3;
      __pyx_v_rule = __pyx_t_5;

      /* "executor.pyx":768
 *     for tree in trees:
 *         for rule in tree.rules:
 *             for predicate in rule.predicates:             # <<<<<<<<<<<<<<
 *                 if predicate.sim_measure_type.compare('EDIT_DISTANCE') == 0:
 *                     tokenizers.insert('qg2_bag')
 */
      __pyx_t_7 = &__pyx_v_rule.predicates;
      __pyx_t_6 = __pyx_t_7->begin();
      for (;;) {
        if (!(__pyx_t_6 != __pyx_t_7->end())) break;
        __pyx_t_8 = *__pyx_t_6;
        ++__pyx_t_6;
        __pyx_v_predicate = __pyx_t_8;

        /* "executor.pyx":769
 *         for rule in tree.rules:
 *             for predicate in rule.predicates:
 *                 if predicate.sim_measure_type.compare('EDIT_DISTANCE') == 0:             # <<<<<<<<<<<<<<
 *                     tokenizers.insert('qg2_bag')
 *                     continue
 */
        __pyx_t_9 = ((__pyx_v_predicate.sim_measure_type.compare(__pyx_k_EDIT_DISTANCE) == 0) != 0);
        if (__pyx_t_9) {

          /* "executor.pyx":770
 *             for predicate in rule.predicates:
 *                 if predicate.sim_measure_type.compare('EDIT_DISTANCE') == 0:
 *                     tokenizers.insert('qg2_bag')             # <<<<<<<<<<<<<<
 *                     continue
 *                 tokenizers.insert(predicate.tokenizer_type)
 */
          try {
            __pyx_v_tokenizers.insert(__pyx_k_qg2_bag);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 770, __pyx_L1_error)
          }

          /* "executor.pyx":771
 *                 if predicate.sim_measure_type.compare('EDIT_DISTANCE') == 0:
 *                     tokenizers.insert('qg2_bag')
 *                     continue             # <<<<<<<<<<<<<<
 *                 tokenizers.insert(predicate.tokenizer_type)
 * 
 */
          goto __pyx_L7_continue;

          /* "executor.pyx":769
 *         for rule in tree.rules:
 *             for predicate in rule.predicates:
 *                 if predicate.sim_measure_type.compare('EDIT_DISTANCE') == 0:             # <<<<<<<<<<<<<<
 *                     tokenizers.insert('qg2_bag')
 *                     continue
 */
        }

        /* "executor.pyx":772
 *                     tokenizers.insert('qg2_bag')
 *                     continue
 *                 tokenizers.insert(predicate.tokenizer_type)             # <<<<<<<<<<<<<<
 * 
 *     cdef string tok_type
 */
        try {
          __pyx_v_tokenizers.insert(__pyx_v_predicate.tokenizer_type);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 772, __pyx_L1_error)
        }

        /* "executor.pyx":768
 *     for tree in trees:
 *         for rule in tree.rules:
 *             for predicate in rule.predicates:             # <<<<<<<<<<<<<<
 *                 if predicate.sim_measure_type.compare('EDIT_DISTANCE') == 0:
 *                     tokenizers.insert('qg2_bag')
 */
        __pyx_L7_continue:;
      }

      /* "executor.pyx":767
 *     cdef Predicatecpp predicate
 *     for tree in trees:
 *         for rule in tree.rules:             # <<<<<<<<<<<<<<
 *             for predicate in rule.predicates:
 *                 if predicate.sim_measure_type.compare('EDIT_DISTANCE') == 0:
 */
    }

    /* "executor.pyx":766
 *     cdef Rule rule
 *     cdef Predicatecpp predicate
 *     for tree in trees:             # <<<<<<<<<<<<<<
 *         for rule in tree.rules:
 *             for predicate in rule.predicates:
 */
  }

  /* "executor.pyx":775
 * 
 *     cdef string tok_type
 *     for tok_type in tokenizers:             # <<<<<<<<<<<<<<
 *         tokenize(lstrings, rstrings, tok_type, working_dir)
 * 
 */
  __pyx_t_10 = __pyx_v_tokenizers.begin();
  for (;;) {
    if (!(__pyx_t_10 != __pyx_v_tokenizers.end())) break;
    __pyx_t_11 = *__pyx_t_10;
    ++__pyx_t_10;
    __pyx_v_tok_type = __pyx_t_11;

    /* "executor.pyx":776
 *     cdef string tok_type
 *     for tok_type in tokenizers:
 *         tokenize(lstrings, rstrings, tok_type, working_dir)             # <<<<<<<<<<<<<<
 * 
 * def test_tok1(df1, attr1, df2, attr2):
 */
    __pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_tokenize(__pyx_v_lstrings, __pyx_v_rstrings, __pyx_v_tok_type, __pyx_v_working_dir, 0);

    /* "executor.pyx":775
 * 
 *     cdef string tok_type
 *     for tok_type in tokenizers:             # <<<<<<<<<<<<<<
 *         tokenize(lstrings, rstrings, tok_type, working_dir)
 * 
 */
  }

  /* "executor.pyx":760
 *     return out_tokens
 * 
 * cdef void tokenize_strings(vector[Tree]& trees, vector[string]& lstrings,             # <<<<<<<<<<<<<<
 *                       vector[string]& rstrings, const string& working_dir):
 *     cdef oset[string] tokenizers
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("executor.tokenize_strings", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "executor.pyx":778
 *         tokenize(lstrings, rstrings, tok_type, working_dir)
 * 
 * def test_tok1(df1, attr1, df2, attr2):             # <<<<<<<<<<<<<<
 *     cdef vector[string] lstrings, rstrings
 *     convert_to_vector1(df1[attr1], lstrings)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8executor_5test_tok1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8executor_5test_tok1 = {"test_tok1", (PyCFunction)__pyx_pw_8executor_5test_tok1, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8executor_5test_tok1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_df1 = 0;
  PyObject *__pyx_v_attr1 = 0;
  PyObject *__pyx_v_df2 = 0;
  PyObject *__pyx_v_attr2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("test_tok1 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_df1,&__pyx_n_s_attr1,&__pyx_n_s_df2,&__pyx_n_s_attr2,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_df1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attr1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_tok1", 1, 4, 4, 1); __PYX_ERR(0, 778, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_df2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_tok1", 1, 4, 4, 2); __PYX_ERR(0, 778, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attr2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_tok1", 1, 4, 4, 3); __PYX_ERR(0, 778, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "test_tok1") < 0)) __PYX_ERR(0, 778, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_df1 = values[0];
    __pyx_v_attr1 = values[1];
    __pyx_v_df2 = values[2];
    __pyx_v_attr2 = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("test_tok1", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 778, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("executor.test_tok1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8executor_4test_tok1(__pyx_self, __pyx_v_df1, __pyx_v_attr1, __pyx_v_df2, __pyx_v_attr2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8executor_4test_tok1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_df1, PyObject *__pyx_v_attr1, PyObject *__pyx_v_df2, PyObject *__pyx_v_attr2) {
  std::vector<std::string>  __pyx_v_lstrings;
  std::vector<std::string>  __pyx_v_rstrings;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("test_tok1", 0);

  /* "executor.pyx":780
 * def test_tok1(df1, attr1, df2, attr2):
 *     cdef vector[string] lstrings, rstrings
 *     convert_to_vector1(df1[attr1], lstrings)             # <<<<<<<<<<<<<<
 *     convert_to_vector1(df2[attr2], rstrings)
 *     tokenize(lstrings, rstrings, 'ws', 'gh')
 */
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_df1, __pyx_v_attr1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_f_8executor_convert_to_vector1(__pyx_t_1, __pyx_v_lstrings);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":781
 *     cdef vector[string] lstrings, rstrings
 *     convert_to_vector1(df1[attr1], lstrings)
 *     convert_to_vector1(df2[attr2], rstrings)             # <<<<<<<<<<<<<<
 *     tokenize(lstrings, rstrings, 'ws', 'gh')
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_df2, __pyx_v_attr2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_f_8executor_convert_to_vector1(__pyx_t_1, __pyx_v_rstrings);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":782
 *     convert_to_vector1(df1[attr1], lstrings)
 *     convert_to_vector1(df2[attr2], rstrings)
 *     tokenize(lstrings, rstrings, 'ws', 'gh')             # <<<<<<<<<<<<<<
 * 
 * cdef void convert_to_vector1(string_col, vector[string]& string_vector):
 */
  __pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_tokenize(__pyx_v_lstrings, __pyx_v_rstrings, __pyx_k_ws, __pyx_k_gh, 0);

  /* "executor.pyx":778
 *         tokenize(lstrings, rstrings, tok_type, working_dir)
 * 
 * def test_tok1(df1, attr1, df2, attr2):             # <<<<<<<<<<<<<<
 *     cdef vector[string] lstrings, rstrings
 *     convert_to_vector1(df1[attr1], lstrings)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("executor.test_tok1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "executor.pyx":784
 *     tokenize(lstrings, rstrings, 'ws', 'gh')
 * 
 * cdef void convert_to_vector1(string_col, vector[string]& string_vector):             # <<<<<<<<<<<<<<
 *     for val in string_col:
 *         string_vector.push_back(str(val))
 */

static void __pyx_f_8executor_convert_to_vector1(PyObject *__pyx_v_string_col, std::vector<std::string>  &__pyx_v_string_vector) {
  PyObject *__pyx_v_val = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("convert_to_vector1", 0);

  /* "executor.pyx":785
 * 
 * cdef void convert_to_vector1(string_col, vector[string]& string_vector):
 *     for val in string_col:             # <<<<<<<<<<<<<<
 *         string_vector.push_back(str(val))
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_string_col)) || PyTuple_CheckExact(__pyx_v_string_col)) {
    __pyx_t_1 = __pyx_v_string_col; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_string_col); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 785, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 785, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 785, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 785, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 785, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 785, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "executor.pyx":786
 * cdef void convert_to_vector1(string_col, vector[string]& string_vector):
 *     for val in string_col:
 *         string_vector.push_back(str(val))             # <<<<<<<<<<<<<<
 * 
 * cdef vector[string] infer_tokenizers(plan, rule_sets):
 */
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_val); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 786, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_v_string_vector.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 786, __pyx_L1_error)
    }

    /* "executor.pyx":785
 * 
 * cdef void convert_to_vector1(string_col, vector[string]& string_vector):
 *     for val in string_col:             # <<<<<<<<<<<<<<
 *         string_vector.push_back(str(val))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":784
 *     tokenize(lstrings, rstrings, 'ws', 'gh')
 * 
 * cdef void convert_to_vector1(string_col, vector[string]& string_vector):             # <<<<<<<<<<<<<<
 *     for val in string_col:
 *         string_vector.push_back(str(val))
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("executor.convert_to_vector1", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_RefNannyFinishContext();
}

/* "executor.pyx":788
 *         string_vector.push_back(str(val))
 * 
 * cdef vector[string] infer_tokenizers(plan, rule_sets):             # <<<<<<<<<<<<<<
 *     cdef vector[string] tokenizers
 *     predicate_dict = get_predicate_dict(rule_sets)
 */

static std::vector<std::string>  __pyx_f_8executor_infer_tokenizers(PyObject *__pyx_v_plan, PyObject *__pyx_v_rule_sets) {
  std::vector<std::string>  __pyx_v_tokenizers;
  PyObject *__pyx_v_predicate_dict = NULL;
  PyObject *__pyx_v_queue = NULL;
  std::string __pyx_v_s;
  PyObject *__pyx_v_curr_node = NULL;
  PyObject *__pyx_v_pred = NULL;
  std::vector<std::string>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  std::string __pyx_t_10;
  __Pyx_RefNannySetupContext("infer_tokenizers", 0);

  /* "executor.pyx":790
 * cdef vector[string] infer_tokenizers(plan, rule_sets):
 *     cdef vector[string] tokenizers
 *     predicate_dict = get_predicate_dict(rule_sets)             # <<<<<<<<<<<<<<
 * 
 *     queue = []
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_get_predicate_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_rule_sets); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 790, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_rule_sets};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 790, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_rule_sets};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 790, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 790, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_rule_sets);
      __Pyx_GIVEREF(__pyx_v_rule_sets);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_rule_sets);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 790, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_predicate_dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "executor.pyx":792
 *     predicate_dict = get_predicate_dict(rule_sets)
 * 
 *     queue = []             # <<<<<<<<<<<<<<
 *     queue.extend(plan.root.children)
 *     cdef string s
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_queue = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "executor.pyx":793
 * 
 *     queue = []
 *     queue.extend(plan.root.children)             # <<<<<<<<<<<<<<
 *     cdef string s
 *     while len(queue) > 0:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_plan, __pyx_n_s_root); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_children); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyList_Extend(__pyx_v_queue, __pyx_t_2); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 793, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "executor.pyx":795
 *     queue.extend(plan.root.children)
 *     cdef string s
 *     while len(queue) > 0:             # <<<<<<<<<<<<<<
 *         curr_node = queue.pop(0)
 * 
 */
  while (1) {
    __pyx_t_6 = PyList_GET_SIZE(__pyx_v_queue); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 795, __pyx_L1_error)
    __pyx_t_7 = ((__pyx_t_6 > 0) != 0);
    if (!__pyx_t_7) break;

    /* "executor.pyx":796
 *     cdef string s
 *     while len(queue) > 0:
 *         curr_node = queue.pop(0)             # <<<<<<<<<<<<<<
 * 
 *         if curr_node.node_type in ['JOIN', 'FEATURE', 'FILTER']:
 */
    __pyx_t_2 = __Pyx_PyList_PopIndex(__pyx_v_queue, __pyx_int_0, 0, 1, Py_ssize_t, PyInt_FromSsize_t); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 796, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_curr_node, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "executor.pyx":798
 *         curr_node = queue.pop(0)
 * 
 *         if curr_node.node_type in ['JOIN', 'FEATURE', 'FILTER']:             # <<<<<<<<<<<<<<
 *             pred = predicate_dict.get(curr_node.predicate)
 *             s = pred.tokenizer_type
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_curr_node, __pyx_n_s_node_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_JOIN, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 798, __pyx_L1_error)
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_FEATURE, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 798, __pyx_L1_error)
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_FILTER, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 798, __pyx_L1_error)
    __pyx_t_7 = __pyx_t_8;
    __pyx_L6_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (__pyx_t_8) {

      /* "executor.pyx":799
 * 
 *         if curr_node.node_type in ['JOIN', 'FEATURE', 'FILTER']:
 *             pred = predicate_dict.get(curr_node.predicate)             # <<<<<<<<<<<<<<
 *             s = pred.tokenizer_type
 *             tokenizers.push_back(s)
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_predicate_dict, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 799, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_curr_node, __pyx_n_s_predicate); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 799, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (!__pyx_t_3) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 799, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 799, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 799, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 799, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3); __pyx_t_3 = NULL;
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_4);
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 799, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_pred, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "executor.pyx":800
 *         if curr_node.node_type in ['JOIN', 'FEATURE', 'FILTER']:
 *             pred = predicate_dict.get(curr_node.predicate)
 *             s = pred.tokenizer_type             # <<<<<<<<<<<<<<
 *             tokenizers.push_back(s)
 * 
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_pred, __pyx_n_s_tokenizer_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 800, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 800, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_s = __pyx_t_10;

      /* "executor.pyx":801
 *             pred = predicate_dict.get(curr_node.predicate)
 *             s = pred.tokenizer_type
 *             tokenizers.push_back(s)             # <<<<<<<<<<<<<<
 * 
 *         if curr_node.node_type == 'OUTPUT':
 */
      try {
        __pyx_v_tokenizers.push_back(__pyx_v_s);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 801, __pyx_L1_error)
      }

      /* "executor.pyx":798
 *         curr_node = queue.pop(0)
 * 
 *         if curr_node.node_type in ['JOIN', 'FEATURE', 'FILTER']:             # <<<<<<<<<<<<<<
 *             pred = predicate_dict.get(curr_node.predicate)
 *             s = pred.tokenizer_type
 */
    }

    /* "executor.pyx":803
 *             tokenizers.push_back(s)
 * 
 *         if curr_node.node_type == 'OUTPUT':             # <<<<<<<<<<<<<<
 *             continue
 *         queue.extend(curr_node.children)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_curr_node, __pyx_n_s_node_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 803, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_OUTPUT, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 803, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_8) {

      /* "executor.pyx":804
 * 
 *         if curr_node.node_type == 'OUTPUT':
 *             continue             # <<<<<<<<<<<<<<
 *         queue.extend(curr_node.children)
 *     return tokenizers
 */
      goto __pyx_L3_continue;

      /* "executor.pyx":803
 *             tokenizers.push_back(s)
 * 
 *         if curr_node.node_type == 'OUTPUT':             # <<<<<<<<<<<<<<
 *             continue
 *         queue.extend(curr_node.children)
 */
    }

    /* "executor.pyx":805
 *         if curr_node.node_type == 'OUTPUT':
 *             continue
 *         queue.extend(curr_node.children)             # <<<<<<<<<<<<<<
 *     return tokenizers
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_curr_node, __pyx_n_s_children); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 805, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyList_Extend(__pyx_v_queue, __pyx_t_2); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 805, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_L3_continue:;
  }

  /* "executor.pyx":806
 *             continue
 *         queue.extend(curr_node.children)
 *     return tokenizers             # <<<<<<<<<<<<<<
 * 
 * def generate_tokens(ft, path1, attr1, path2, attr2, const string& working_dir):
 */
  __pyx_r = __pyx_v_tokenizers;
  goto __pyx_L0;

  /* "executor.pyx":788
 *         string_vector.push_back(str(val))
 * 
 * cdef vector[string] infer_tokenizers(plan, rule_sets):             # <<<<<<<<<<<<<<
 *     cdef vector[string] tokenizers
 *     predicate_dict = get_predicate_dict(rule_sets)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("executor.infer_tokenizers", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_predicate_dict);
  __Pyx_XDECREF(__pyx_v_queue);
  __Pyx_XDECREF(__pyx_v_curr_node);
  __Pyx_XDECREF(__pyx_v_pred);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "executor.pyx":808
 *     return tokenizers
 * 
 * def generate_tokens(ft, path1, attr1, path2, attr2, const string& working_dir):             # <<<<<<<<<<<<<<
 *     cdef oset[string] tokenizers
 *     for idx, row in ft.iterrows():
 */

/* Python wrapper */
static PyObject *__pyx_pw_8executor_7generate_tokens(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8executor_7generate_tokens = {"generate_tokens", (PyCFunction)__pyx_pw_8executor_7generate_tokens, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8executor_7generate_tokens(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ft = 0;
  PyObject *__pyx_v_path1 = 0;
  PyObject *__pyx_v_attr1 = 0;
  PyObject *__pyx_v_path2 = 0;
  PyObject *__pyx_v_attr2 = 0;
  std::string __pyx_v_working_dir;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate_tokens (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ft,&__pyx_n_s_path1,&__pyx_n_s_attr1,&__pyx_n_s_path2,&__pyx_n_s_attr2,&__pyx_n_s_working_dir,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ft)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_path1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("generate_tokens", 1, 6, 6, 1); __PYX_ERR(0, 808, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attr1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("generate_tokens", 1, 6, 6, 2); __PYX_ERR(0, 808, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_path2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("generate_tokens", 1, 6, 6, 3); __PYX_ERR(0, 808, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attr2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("generate_tokens", 1, 6, 6, 4); __PYX_ERR(0, 808, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_working_dir)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("generate_tokens", 1, 6, 6, 5); __PYX_ERR(0, 808, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "generate_tokens") < 0)) __PYX_ERR(0, 808, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_ft = values[0];
    __pyx_v_path1 = values[1];
    __pyx_v_attr1 = values[2];
    __pyx_v_path2 = values[3];
    __pyx_v_attr2 = values[4];
    __pyx_v_working_dir = __pyx_convert_string_from_py_std__in_string(values[5]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 808, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("generate_tokens", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 808, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("executor.generate_tokens", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8executor_6generate_tokens(__pyx_self, __pyx_v_ft, __pyx_v_path1, __pyx_v_attr1, __pyx_v_path2, __pyx_v_attr2, __pyx_v_working_dir);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8executor_6generate_tokens(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ft, PyObject *__pyx_v_path1, PyObject *__pyx_v_attr1, PyObject *__pyx_v_path2, PyObject *__pyx_v_attr2, std::string __pyx_v_working_dir) {
  std::set<std::string>  __pyx_v_tokenizers;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_row = NULL;
  std::vector<std::string>  __pyx_v_lstrings;
  std::vector<std::string>  __pyx_v_rstrings;
  std::string __pyx_v_tok_type;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  std::string __pyx_t_10;
  std::set<std::string> ::iterator __pyx_t_11;
  __Pyx_RefNannySetupContext("generate_tokens", 0);

  /* "executor.pyx":810
 * def generate_tokens(ft, path1, attr1, path2, attr2, const string& working_dir):
 *     cdef oset[string] tokenizers
 *     for idx, row in ft.iterrows():             # <<<<<<<<<<<<<<
 *         if row['sim_measure_type'] == 'EDIT_DISTANCE':
 *             tokenizers.insert('qg2_bag')
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ft, __pyx_n_s_iterrows); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 810, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 810, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 810, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 810, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 810, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 810, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 810, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 810, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 810, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 810, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 810, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 810, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 810, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 810, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 810, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_row, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "executor.pyx":811
 *     cdef oset[string] tokenizers
 *     for idx, row in ft.iterrows():
 *         if row['sim_measure_type'] == 'EDIT_DISTANCE':             # <<<<<<<<<<<<<<
 *             tokenizers.insert('qg2_bag')
 *             continue
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_row, __pyx_n_s_sim_measure_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_EDIT_DISTANCE, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_9) {

      /* "executor.pyx":812
 *     for idx, row in ft.iterrows():
 *         if row['sim_measure_type'] == 'EDIT_DISTANCE':
 *             tokenizers.insert('qg2_bag')             # <<<<<<<<<<<<<<
 *             continue
 *         tokenizers.insert(str(row['tokenizer_type']))
 */
      try {
        __pyx_v_tokenizers.insert(__pyx_k_qg2_bag);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 812, __pyx_L1_error)
      }

      /* "executor.pyx":813
 *         if row['sim_measure_type'] == 'EDIT_DISTANCE':
 *             tokenizers.insert('qg2_bag')
 *             continue             # <<<<<<<<<<<<<<
 *         tokenizers.insert(str(row['tokenizer_type']))
 * 
 */
      goto __pyx_L3_continue;

      /* "executor.pyx":811
 *     cdef oset[string] tokenizers
 *     for idx, row in ft.iterrows():
 *         if row['sim_measure_type'] == 'EDIT_DISTANCE':             # <<<<<<<<<<<<<<
 *             tokenizers.insert('qg2_bag')
 *             continue
 */
    }

    /* "executor.pyx":814
 *             tokenizers.insert('qg2_bag')
 *             continue
 *         tokenizers.insert(str(row['tokenizer_type']))             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[string] lstrings, rstrings
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_row, __pyx_n_s_tokenizer_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    try {
      __pyx_v_tokenizers.insert(__pyx_t_10);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 814, __pyx_L1_error)
    }

    /* "executor.pyx":810
 * def generate_tokens(ft, path1, attr1, path2, attr2, const string& working_dir):
 *     cdef oset[string] tokenizers
 *     for idx, row in ft.iterrows():             # <<<<<<<<<<<<<<
 *         if row['sim_measure_type'] == 'EDIT_DISTANCE':
 *             tokenizers.insert('qg2_bag')
 */
    __pyx_L3_continue:;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "executor.pyx":817
 * 
 *     cdef vector[string] lstrings, rstrings
 *     load_strings(path1, attr1, lstrings)             # <<<<<<<<<<<<<<
 *     load_strings(path2, attr2, rstrings)
 * 
 */
  __pyx_f_8executor_load_strings(__pyx_v_path1, __pyx_v_attr1, __pyx_v_lstrings);

  /* "executor.pyx":818
 *     cdef vector[string] lstrings, rstrings
 *     load_strings(path1, attr1, lstrings)
 *     load_strings(path2, attr2, rstrings)             # <<<<<<<<<<<<<<
 * 
 *     cdef string tok_type
 */
  __pyx_f_8executor_load_strings(__pyx_v_path2, __pyx_v_attr2, __pyx_v_rstrings);

  /* "executor.pyx":821
 * 
 *     cdef string tok_type
 *     for tok_type in tokenizers:             # <<<<<<<<<<<<<<
 *         tokenize(lstrings, rstrings, tok_type, working_dir)
 * 
 */
  __pyx_t_11 = __pyx_v_tokenizers.begin();
  for (;;) {
    if (!(__pyx_t_11 != __pyx_v_tokenizers.end())) break;
    __pyx_t_10 = *__pyx_t_11;
    ++__pyx_t_11;
    __pyx_v_tok_type = __pyx_t_10;

    /* "executor.pyx":822
 *     cdef string tok_type
 *     for tok_type in tokenizers:
 *         tokenize(lstrings, rstrings, tok_type, working_dir)             # <<<<<<<<<<<<<<
 * 
 * def perform_join(path1, attr1, path2, attr2, tok_type, sim_type, threshold, const string& working_dir):
 */
    __pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_tokenize(__pyx_v_lstrings, __pyx_v_rstrings, __pyx_v_tok_type, __pyx_v_working_dir, 0);

    /* "executor.pyx":821
 * 
 *     cdef string tok_type
 *     for tok_type in tokenizers:             # <<<<<<<<<<<<<<
 *         tokenize(lstrings, rstrings, tok_type, working_dir)
 * 
 */
  }

  /* "executor.pyx":808
 *     return tokenizers
 * 
 * def generate_tokens(ft, path1, attr1, path2, attr2, const string& working_dir):             # <<<<<<<<<<<<<<
 *     cdef oset[string] tokenizers
 *     for idx, row in ft.iterrows():
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("executor.generate_tokens", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_row);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "executor.pyx":824
 *         tokenize(lstrings, rstrings, tok_type, working_dir)
 * 
 * def perform_join(path1, attr1, path2, attr2, tok_type, sim_type, threshold, const string& working_dir):             # <<<<<<<<<<<<<<
 *     cdef vector[vector[int]] ltokens, rtokens
 *     cdef pair[vector[pair[int, int]], vector[double]] output
 */

/* Python wrapper */
static PyObject *__pyx_pw_8executor_9perform_join(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8executor_9perform_join = {"perform_join", (PyCFunction)__pyx_pw_8executor_9perform_join, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8executor_9perform_join(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_path1 = 0;
  PyObject *__pyx_v_attr1 = 0;
  PyObject *__pyx_v_path2 = 0;
  PyObject *__pyx_v_attr2 = 0;
  PyObject *__pyx_v_tok_type = 0;
  PyObject *__pyx_v_sim_type = 0;
  PyObject *__pyx_v_threshold = 0;
  std::string __pyx_v_working_dir;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("perform_join (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_path1,&__pyx_n_s_attr1,&__pyx_n_s_path2,&__pyx_n_s_attr2,&__pyx_n_s_tok_type,&__pyx_n_s_sim_type,&__pyx_n_s_threshold,&__pyx_n_s_working_dir,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_path1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attr1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("perform_join", 1, 8, 8, 1); __PYX_ERR(0, 824, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_path2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("perform_join", 1, 8, 8, 2); __PYX_ERR(0, 824, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attr2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("perform_join", 1, 8, 8, 3); __PYX_ERR(0, 824, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tok_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("perform_join", 1, 8, 8, 4); __PYX_ERR(0, 824, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sim_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("perform_join", 1, 8, 8, 5); __PYX_ERR(0, 824, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("perform_join", 1, 8, 8, 6); __PYX_ERR(0, 824, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_working_dir)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("perform_join", 1, 8, 8, 7); __PYX_ERR(0, 824, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "perform_join") < 0)) __PYX_ERR(0, 824, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_path1 = values[0];
    __pyx_v_attr1 = values[1];
    __pyx_v_path2 = values[2];
    __pyx_v_attr2 = values[3];
    __pyx_v_tok_type = values[4];
    __pyx_v_sim_type = values[5];
    __pyx_v_threshold = values[6];
    __pyx_v_working_dir = __pyx_convert_string_from_py_std__in_string(values[7]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 824, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("perform_join", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 824, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("executor.perform_join", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8executor_8perform_join(__pyx_self, __pyx_v_path1, __pyx_v_attr1, __pyx_v_path2, __pyx_v_attr2, __pyx_v_tok_type, __pyx_v_sim_type, __pyx_v_threshold, __pyx_v_working_dir);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8executor_8perform_join(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_path1, PyObject *__pyx_v_attr1, PyObject *__pyx_v_path2, PyObject *__pyx_v_attr2, PyObject *__pyx_v_tok_type, PyObject *__pyx_v_sim_type, PyObject *__pyx_v_threshold, std::string __pyx_v_working_dir) {
  std::vector<std::vector<int> >  __pyx_v_ltokens;
  std::vector<std::vector<int> >  __pyx_v_rtokens;
  std::pair<std::vector<std::pair<int,int> > ,std::vector<double> >  __pyx_v_output;
  std::vector<std::string>  __pyx_v_lstrings;
  std::vector<std::string>  __pyx_v_rstrings;
  PyObject *__pyx_v_output_pairs = NULL;
  std::vector<std::pair<int,int> > ::size_type __pyx_v_i;
  PyObject *__pyx_v_output_df = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  std::vector<std::pair<int,int> > ::size_type __pyx_t_4;
  std::vector<std::pair<int,int> > ::size_type __pyx_t_5;
  std::vector<std::pair<int,int> > ::size_type __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("perform_join", 0);
  __Pyx_INCREF(__pyx_v_threshold);

  /* "executor.pyx":830
 *     cdef vector[string] lstrings, rstrings
 * 
 *     if sim_type == 'COSINE':             # <<<<<<<<<<<<<<
 *         load_tok(tok_type, working_dir, ltokens, rtokens)
 *         threshold = threshold - 0.0001
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_sim_type, __pyx_n_s_COSINE, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 830, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "executor.pyx":831
 * 
 *     if sim_type == 'COSINE':
 *         load_tok(tok_type, working_dir, ltokens, rtokens)             # <<<<<<<<<<<<<<
 *         threshold = threshold - 0.0001
 *         output = set_sim_join(ltokens, rtokens, 0, threshold, 4)
 */
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_working_dir); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_load_tok(__pyx_v_tok_type, __pyx_t_2, __pyx_v_ltokens, __pyx_v_rtokens, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "executor.pyx":832
 *     if sim_type == 'COSINE':
 *         load_tok(tok_type, working_dir, ltokens, rtokens)
 *         threshold = threshold - 0.0001             # <<<<<<<<<<<<<<
 *         output = set_sim_join(ltokens, rtokens, 0, threshold, 4)
 *     elif sim_type == 'DICE':
 */
    __pyx_t_2 = __Pyx_PyFloat_SubtractObjC(__pyx_v_threshold, __pyx_float_0_0001, 0.0001, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 832, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_threshold, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "executor.pyx":833
 *         load_tok(tok_type, working_dir, ltokens, rtokens)
 *         threshold = threshold - 0.0001
 *         output = set_sim_join(ltokens, rtokens, 0, threshold, 4)             # <<<<<<<<<<<<<<
 *     elif sim_type == 'DICE':
 *         load_tok(tok_type, working_dir, ltokens, rtokens)
 */
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_threshold); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 833, __pyx_L1_error)
    __pyx_v_output = __pyx_f_16py_stringsimjoin_8apply_rf_12set_sim_join_set_sim_join(__pyx_v_ltokens, __pyx_v_rtokens, 0, __pyx_t_3, 4, 0);

    /* "executor.pyx":830
 *     cdef vector[string] lstrings, rstrings
 * 
 *     if sim_type == 'COSINE':             # <<<<<<<<<<<<<<
 *         load_tok(tok_type, working_dir, ltokens, rtokens)
 *         threshold = threshold - 0.0001
 */
    goto __pyx_L3;
  }

  /* "executor.pyx":834
 *         threshold = threshold - 0.0001
 *         output = set_sim_join(ltokens, rtokens, 0, threshold, 4)
 *     elif sim_type == 'DICE':             # <<<<<<<<<<<<<<
 *         load_tok(tok_type, working_dir, ltokens, rtokens)
 *         threshold = threshold - 0.0001
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_sim_type, __pyx_n_s_DICE, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 834, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "executor.pyx":835
 *         output = set_sim_join(ltokens, rtokens, 0, threshold, 4)
 *     elif sim_type == 'DICE':
 *         load_tok(tok_type, working_dir, ltokens, rtokens)             # <<<<<<<<<<<<<<
 *         threshold = threshold - 0.0001
 *         output = set_sim_join(ltokens, rtokens, 1, threshold, 4)
 */
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_working_dir); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 835, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_load_tok(__pyx_v_tok_type, __pyx_t_2, __pyx_v_ltokens, __pyx_v_rtokens, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "executor.pyx":836
 *     elif sim_type == 'DICE':
 *         load_tok(tok_type, working_dir, ltokens, rtokens)
 *         threshold = threshold - 0.0001             # <<<<<<<<<<<<<<
 *         output = set_sim_join(ltokens, rtokens, 1, threshold, 4)
 *     elif sim_type == 'JACCARD':
 */
    __pyx_t_2 = __Pyx_PyFloat_SubtractObjC(__pyx_v_threshold, __pyx_float_0_0001, 0.0001, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_threshold, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "executor.pyx":837
 *         load_tok(tok_type, working_dir, ltokens, rtokens)
 *         threshold = threshold - 0.0001
 *         output = set_sim_join(ltokens, rtokens, 1, threshold, 4)             # <<<<<<<<<<<<<<
 *     elif sim_type == 'JACCARD':
 *         load_tok(tok_type, working_dir, ltokens, rtokens)
 */
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_threshold); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 837, __pyx_L1_error)
    __pyx_v_output = __pyx_f_16py_stringsimjoin_8apply_rf_12set_sim_join_set_sim_join(__pyx_v_ltokens, __pyx_v_rtokens, 1, __pyx_t_3, 4, 0);

    /* "executor.pyx":834
 *         threshold = threshold - 0.0001
 *         output = set_sim_join(ltokens, rtokens, 0, threshold, 4)
 *     elif sim_type == 'DICE':             # <<<<<<<<<<<<<<
 *         load_tok(tok_type, working_dir, ltokens, rtokens)
 *         threshold = threshold - 0.0001
 */
    goto __pyx_L3;
  }

  /* "executor.pyx":838
 *         threshold = threshold - 0.0001
 *         output = set_sim_join(ltokens, rtokens, 1, threshold, 4)
 *     elif sim_type == 'JACCARD':             # <<<<<<<<<<<<<<
 *         load_tok(tok_type, working_dir, ltokens, rtokens)
 *         threshold = threshold - 0.0001
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_sim_type, __pyx_n_s_JACCARD, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 838, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "executor.pyx":839
 *         output = set_sim_join(ltokens, rtokens, 1, threshold, 4)
 *     elif sim_type == 'JACCARD':
 *         load_tok(tok_type, working_dir, ltokens, rtokens)             # <<<<<<<<<<<<<<
 *         threshold = threshold - 0.0001
 *         output = set_sim_join(ltokens, rtokens, 2, threshold, 4)
 */
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_working_dir); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 839, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_load_tok(__pyx_v_tok_type, __pyx_t_2, __pyx_v_ltokens, __pyx_v_rtokens, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "executor.pyx":840
 *     elif sim_type == 'JACCARD':
 *         load_tok(tok_type, working_dir, ltokens, rtokens)
 *         threshold = threshold - 0.0001             # <<<<<<<<<<<<<<
 *         output = set_sim_join(ltokens, rtokens, 2, threshold, 4)
 *     elif sim_type == 'OVERLAP_COEFFICIENT':
 */
    __pyx_t_2 = __Pyx_PyFloat_SubtractObjC(__pyx_v_threshold, __pyx_float_0_0001, 0.0001, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 840, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_threshold, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "executor.pyx":841
 *         load_tok(tok_type, working_dir, ltokens, rtokens)
 *         threshold = threshold - 0.0001
 *         output = set_sim_join(ltokens, rtokens, 2, threshold, 4)             # <<<<<<<<<<<<<<
 *     elif sim_type == 'OVERLAP_COEFFICIENT':
 *         load_tok(tok_type, working_dir, ltokens, rtokens)
 */
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_threshold); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 841, __pyx_L1_error)
    __pyx_v_output = __pyx_f_16py_stringsimjoin_8apply_rf_12set_sim_join_set_sim_join(__pyx_v_ltokens, __pyx_v_rtokens, 2, __pyx_t_3, 4, 0);

    /* "executor.pyx":838
 *         threshold = threshold - 0.0001
 *         output = set_sim_join(ltokens, rtokens, 1, threshold, 4)
 *     elif sim_type == 'JACCARD':             # <<<<<<<<<<<<<<
 *         load_tok(tok_type, working_dir, ltokens, rtokens)
 *         threshold = threshold - 0.0001
 */
    goto __pyx_L3;
  }

  /* "executor.pyx":842
 *         threshold = threshold - 0.0001
 *         output = set_sim_join(ltokens, rtokens, 2, threshold, 4)
 *     elif sim_type == 'OVERLAP_COEFFICIENT':             # <<<<<<<<<<<<<<
 *         load_tok(tok_type, working_dir, ltokens, rtokens)
 *         threshold = threshold - 0.0001
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_sim_type, __pyx_n_s_OVERLAP_COEFFICIENT, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 842, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "executor.pyx":843
 *         output = set_sim_join(ltokens, rtokens, 2, threshold, 4)
 *     elif sim_type == 'OVERLAP_COEFFICIENT':
 *         load_tok(tok_type, working_dir, ltokens, rtokens)             # <<<<<<<<<<<<<<
 *         threshold = threshold - 0.0001
 *         output = ov_coeff_join(ltokens, rtokens, threshold, 4)
 */
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_working_dir); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 843, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_load_tok(__pyx_v_tok_type, __pyx_t_2, __pyx_v_ltokens, __pyx_v_rtokens, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "executor.pyx":844
 *     elif sim_type == 'OVERLAP_COEFFICIENT':
 *         load_tok(tok_type, working_dir, ltokens, rtokens)
 *         threshold = threshold - 0.0001             # <<<<<<<<<<<<<<
 *         output = ov_coeff_join(ltokens, rtokens, threshold, 4)
 *     elif sim_type == 'EDIT_DISTANCE':
 */
    __pyx_t_2 = __Pyx_PyFloat_SubtractObjC(__pyx_v_threshold, __pyx_float_0_0001, 0.0001, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_threshold, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "executor.pyx":845
 *         load_tok(tok_type, working_dir, ltokens, rtokens)
 *         threshold = threshold - 0.0001
 *         output = ov_coeff_join(ltokens, rtokens, threshold, 4)             # <<<<<<<<<<<<<<
 *     elif sim_type == 'EDIT_DISTANCE':
 *         load_tok('qg2_bag', working_dir, ltokens, rtokens)
 */
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_threshold); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 845, __pyx_L1_error)
    __pyx_v_output = __pyx_f_16py_stringsimjoin_8apply_rf_24overlap_coefficient_join_ov_coeff_join(__pyx_v_ltokens, __pyx_v_rtokens, __pyx_t_3, 4, 0);

    /* "executor.pyx":842
 *         threshold = threshold - 0.0001
 *         output = set_sim_join(ltokens, rtokens, 2, threshold, 4)
 *     elif sim_type == 'OVERLAP_COEFFICIENT':             # <<<<<<<<<<<<<<
 *         load_tok(tok_type, working_dir, ltokens, rtokens)
 *         threshold = threshold - 0.0001
 */
    goto __pyx_L3;
  }

  /* "executor.pyx":846
 *         threshold = threshold - 0.0001
 *         output = ov_coeff_join(ltokens, rtokens, threshold, 4)
 *     elif sim_type == 'EDIT_DISTANCE':             # <<<<<<<<<<<<<<
 *         load_tok('qg2_bag', working_dir, ltokens, rtokens)
 *         load_strings(path1, attr1, lstrings)
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_sim_type, __pyx_n_s_EDIT_DISTANCE, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 846, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "executor.pyx":847
 *         output = ov_coeff_join(ltokens, rtokens, threshold, 4)
 *     elif sim_type == 'EDIT_DISTANCE':
 *         load_tok('qg2_bag', working_dir, ltokens, rtokens)             # <<<<<<<<<<<<<<
 *         load_strings(path1, attr1, lstrings)
 *         load_strings(path2, attr2, rstrings)
 */
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_working_dir); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_load_tok(__pyx_n_s_qg2_bag, __pyx_t_2, __pyx_v_ltokens, __pyx_v_rtokens, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "executor.pyx":848
 *     elif sim_type == 'EDIT_DISTANCE':
 *         load_tok('qg2_bag', working_dir, ltokens, rtokens)
 *         load_strings(path1, attr1, lstrings)             # <<<<<<<<<<<<<<
 *         load_strings(path2, attr2, rstrings)
 *         output = ed_join(ltokens, rtokens, 2, threshold, lstrings, rstrings, 4)
 */
    __pyx_f_8executor_load_strings(__pyx_v_path1, __pyx_v_attr1, __pyx_v_lstrings);

    /* "executor.pyx":849
 *         load_tok('qg2_bag', working_dir, ltokens, rtokens)
 *         load_strings(path1, attr1, lstrings)
 *         load_strings(path2, attr2, rstrings)             # <<<<<<<<<<<<<<
 *         output = ed_join(ltokens, rtokens, 2, threshold, lstrings, rstrings, 4)
 * 
 */
    __pyx_f_8executor_load_strings(__pyx_v_path2, __pyx_v_attr2, __pyx_v_rstrings);

    /* "executor.pyx":850
 *         load_strings(path1, attr1, lstrings)
 *         load_strings(path2, attr2, rstrings)
 *         output = ed_join(ltokens, rtokens, 2, threshold, lstrings, rstrings, 4)             # <<<<<<<<<<<<<<
 * 
 *     output_pairs = []
 */
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_threshold); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 850, __pyx_L1_error)
    __pyx_v_output = __pyx_f_16py_stringsimjoin_8apply_rf_18edit_distance_join_ed_join(__pyx_v_ltokens, __pyx_v_rtokens, 2, __pyx_t_3, __pyx_v_lstrings, __pyx_v_rstrings, 4, 0);

    /* "executor.pyx":846
 *         threshold = threshold - 0.0001
 *         output = ov_coeff_join(ltokens, rtokens, threshold, 4)
 *     elif sim_type == 'EDIT_DISTANCE':             # <<<<<<<<<<<<<<
 *         load_tok('qg2_bag', working_dir, ltokens, rtokens)
 *         load_strings(path1, attr1, lstrings)
 */
  }
  __pyx_L3:;

  /* "executor.pyx":852
 *         output = ed_join(ltokens, rtokens, 2, threshold, lstrings, rstrings, 4)
 * 
 *     output_pairs = []             # <<<<<<<<<<<<<<
 *     for i in xrange(output.first.size()):
 *         output_pairs.append([str(output.first[i].first) + ',' + str(output.first[i].second), output.second[i]])
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_output_pairs = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "executor.pyx":853
 * 
 *     output_pairs = []
 *     for i in xrange(output.first.size()):             # <<<<<<<<<<<<<<
 *         output_pairs.append([str(output.first[i].first) + ',' + str(output.first[i].second), output.second[i]])
 *     output_df = pd.DataFrame(output_pairs, columns=['pair_id', 'score'])
 */
  __pyx_t_4 = __pyx_v_output.first.size();
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "executor.pyx":854
 *     output_pairs = []
 *     for i in xrange(output.first.size()):
 *         output_pairs.append([str(output.first[i].first) + ',' + str(output.first[i].second), output.second[i]])             # <<<<<<<<<<<<<<
 *     output_df = pd.DataFrame(output_pairs, columns=['pair_id', 'score'])
 *     return output_df
 */
    __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_output.first[__pyx_v_i]).first); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_7, __pyx_kp_s_); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_output.first[__pyx_v_i]).second); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyFloat_FromDouble((__pyx_v_output.second[__pyx_v_i])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_8);
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_output_pairs, __pyx_t_2); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 854, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "executor.pyx":855
 *     for i in xrange(output.first.size()):
 *         output_pairs.append([str(output.first[i].first) + ',' + str(output.first[i].second), output.second[i]])
 *     output_df = pd.DataFrame(output_pairs, columns=['pair_id', 'score'])             # <<<<<<<<<<<<<<
 *     return output_df
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_output_pairs);
  __Pyx_GIVEREF(__pyx_v_output_pairs);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_output_pairs);
  __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_10 = PyList_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_n_s_pair_id);
  __Pyx_GIVEREF(__pyx_n_s_pair_id);
  PyList_SET_ITEM(__pyx_t_10, 0, __pyx_n_s_pair_id);
  __Pyx_INCREF(__pyx_n_s_score);
  __Pyx_GIVEREF(__pyx_n_s_score);
  PyList_SET_ITEM(__pyx_t_10, 1, __pyx_n_s_score);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_columns, __pyx_t_10) < 0) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_output_df = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "executor.pyx":856
 *         output_pairs.append([str(output.first[i].first) + ',' + str(output.first[i].second), output.second[i]])
 *     output_df = pd.DataFrame(output_pairs, columns=['pair_id', 'score'])
 *     return output_df             # <<<<<<<<<<<<<<
 * 
 * def test_jac(sim_type, threshold):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_output_df);
  __pyx_r = __pyx_v_output_df;
  goto __pyx_L0;

  /* "executor.pyx":824
 *         tokenize(lstrings, rstrings, tok_type, working_dir)
 * 
 * def perform_join(path1, attr1, path2, attr2, tok_type, sim_type, threshold, const string& working_dir):             # <<<<<<<<<<<<<<
 *     cdef vector[vector[int]] ltokens, rtokens
 *     cdef pair[vector[pair[int, int]], vector[double]] output
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("executor.perform_join", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_output_pairs);
  __Pyx_XDECREF(__pyx_v_output_df);
  __Pyx_XDECREF(__pyx_v_threshold);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "executor.pyx":858
 *     return output_df
 * 
 * def test_jac(sim_type, threshold):             # <<<<<<<<<<<<<<
 *     st = time.time()
 *     print 'tokenizing'
 */

/* Python wrapper */
static PyObject *__pyx_pw_8executor_11test_jac(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8executor_11test_jac = {"test_jac", (PyCFunction)__pyx_pw_8executor_11test_jac, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8executor_11test_jac(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_sim_type = 0;
  PyObject *__pyx_v_threshold = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("test_jac (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sim_type,&__pyx_n_s_threshold,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sim_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_jac", 1, 2, 2, 1); __PYX_ERR(0, 858, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "test_jac") < 0)) __PYX_ERR(0, 858, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_sim_type = values[0];
    __pyx_v_threshold = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("test_jac", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 858, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("executor.test_jac", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8executor_10test_jac(__pyx_self, __pyx_v_sim_type, __pyx_v_threshold);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8executor_10test_jac(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_sim_type, PyObject *__pyx_v_threshold) {
  PyObject *__pyx_v_st = NULL;
  std::vector<std::vector<int> >  __pyx_v_ltokens;
  std::vector<std::vector<int> >  __pyx_v_rtokens;
  std::vector<std::pair<int,int> >  __pyx_v_output;
  CYTHON_UNUSED std::pair<std::vector<std::pair<int,int> > ,std::vector<double> >  __pyx_v_output1;
  CYTHON_UNUSED int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("test_jac", 0);

  /* "executor.pyx":859
 * 
 * def test_jac(sim_type, threshold):
 *     st = time.time()             # <<<<<<<<<<<<<<
 *     print 'tokenizing'
 *     #test_tok1(df1, attr1, df2, attr2)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 859, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 859, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_st = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "executor.pyx":860
 * def test_jac(sim_type, threshold):
 *     st = time.time()
 *     print 'tokenizing'             # <<<<<<<<<<<<<<
 *     #test_tok1(df1, attr1, df2, attr2)
 *     print 'tokenizing done.'
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_tokenizing) < 0) __PYX_ERR(0, 860, __pyx_L1_error)

  /* "executor.pyx":862
 *     print 'tokenizing'
 *     #test_tok1(df1, attr1, df2, attr2)
 *     print 'tokenizing done.'             # <<<<<<<<<<<<<<
 *     cdef vector[vector[int]] ltokens, rtokens
 *     cdef vector[pair[int, int]] output
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_tokenizing_done) < 0) __PYX_ERR(0, 862, __pyx_L1_error)

  /* "executor.pyx":866
 *     cdef vector[pair[int, int]] output
 *     cdef pair[vector[pair[int, int]], vector[double]] output1
 *     load_tok('ws', 't5', ltokens, rtokens)             # <<<<<<<<<<<<<<
 *     print 'loaded tok'
 *     cdef int i
 */
  __pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_load_tok(__pyx_n_s_ws, __pyx_n_s_t5, __pyx_v_ltokens, __pyx_v_rtokens, 0);

  /* "executor.pyx":867
 *     cdef pair[vector[pair[int, int]], vector[double]] output1
 *     load_tok('ws', 't5', ltokens, rtokens)
 *     print 'loaded tok'             # <<<<<<<<<<<<<<
 *     cdef int i
 * #    for i in xrange(50):
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_loaded_tok) < 0) __PYX_ERR(0, 867, __pyx_L1_error)

  /* "executor.pyx":872
 * #        print 'i= ', i
 * #    if sim_type == 3:
 *     for i in xrange(50):             # <<<<<<<<<<<<<<
 *         output1 = ov_coeff_join(ltokens, rtokens, threshold, 4)
 *         print 'output size : ', output.size()
 */
  for (__pyx_t_4 = 0; __pyx_t_4 < 50; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "executor.pyx":873
 * #    if sim_type == 3:
 *     for i in xrange(50):
 *         output1 = ov_coeff_join(ltokens, rtokens, threshold, 4)             # <<<<<<<<<<<<<<
 *         print 'output size : ', output.size()
 * #    else:
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_threshold); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 873, __pyx_L1_error)
    __pyx_v_output1 = __pyx_f_16py_stringsimjoin_8apply_rf_24overlap_coefficient_join_ov_coeff_join(__pyx_v_ltokens, __pyx_v_rtokens, __pyx_t_5, 4, 0);

    /* "executor.pyx":874
 *     for i in xrange(50):
 *         output1 = ov_coeff_join(ltokens, rtokens, threshold, 4)
 *         print 'output size : ', output.size()             # <<<<<<<<<<<<<<
 * #    else:
 * #        output1 = set_sim_join(ltokens, rtokens, sim_type, threshold)
 */
    __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_output.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 874, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 874, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_kp_s_output_size);
    __Pyx_GIVEREF(__pyx_kp_s_output_size);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_output_size);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
    __pyx_t_1 = 0;
    if (__Pyx_Print(0, __pyx_t_3, 1) < 0) __PYX_ERR(0, 874, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "executor.pyx":883
 * #        if output1.first[i].first == 1954 and output1.first[i].second == 63847:
 * #            print 'sim score : ', output1.second[i]
 *     print 'time : ', time.time() - st             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 883, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 883, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_3, __pyx_v_st); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_s_time_2);
  __Pyx_GIVEREF(__pyx_kp_s_time_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_time_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  if (__Pyx_Print(0, __pyx_t_3, 1) < 0) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "executor.pyx":858
 *     return output_df
 * 
 * def test_jac(sim_type, threshold):             # <<<<<<<<<<<<<<
 *     st = time.time()
 *     print 'tokenizing'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("executor.test_jac", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_st);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "executor.pyx":886
 * 
 * 
 * def execute_rf_naive(rf, feature_table, ldf, attr1, rdf, attr2):             # <<<<<<<<<<<<<<
 *     cdef vector[string] lstrings, rstrings
 *     convert_to_vector1(ldf[attr1], lstrings)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8executor_13execute_rf_naive(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8executor_13execute_rf_naive = {"execute_rf_naive", (PyCFunction)__pyx_pw_8executor_13execute_rf_naive, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8executor_13execute_rf_naive(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rf = 0;
  PyObject *__pyx_v_feature_table = 0;
  PyObject *__pyx_v_ldf = 0;
  PyObject *__pyx_v_attr1 = 0;
  PyObject *__pyx_v_rdf = 0;
  PyObject *__pyx_v_attr2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("execute_rf_naive (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rf,&__pyx_n_s_feature_table,&__pyx_n_s_ldf,&__pyx_n_s_attr1,&__pyx_n_s_rdf,&__pyx_n_s_attr2,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rf)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_feature_table)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_rf_naive", 1, 6, 6, 1); __PYX_ERR(0, 886, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_rf_naive", 1, 6, 6, 2); __PYX_ERR(0, 886, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attr1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_rf_naive", 1, 6, 6, 3); __PYX_ERR(0, 886, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_rf_naive", 1, 6, 6, 4); __PYX_ERR(0, 886, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attr2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_rf_naive", 1, 6, 6, 5); __PYX_ERR(0, 886, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "execute_rf_naive") < 0)) __PYX_ERR(0, 886, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_rf = values[0];
    __pyx_v_feature_table = values[1];
    __pyx_v_ldf = values[2];
    __pyx_v_attr1 = values[3];
    __pyx_v_rdf = values[4];
    __pyx_v_attr2 = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("execute_rf_naive", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 886, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("executor.execute_rf_naive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8executor_12execute_rf_naive(__pyx_self, __pyx_v_rf, __pyx_v_feature_table, __pyx_v_ldf, __pyx_v_attr1, __pyx_v_rdf, __pyx_v_attr2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8executor_12execute_rf_naive(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_rf, PyObject *__pyx_v_feature_table, PyObject *__pyx_v_ldf, PyObject *__pyx_v_attr1, PyObject *__pyx_v_rdf, PyObject *__pyx_v_attr2) {
  std::vector<std::string>  __pyx_v_lstrings;
  std::vector<std::string>  __pyx_v_rstrings;
  std::vector<std::pair<__pyx_t_16py_stringsimjoin_8apply_rf_5utils_simfnptr_str,std::string> >  __pyx_v_feature_info;
  std::set<std::string>  __pyx_v_tokenizers;
  PyObject *__pyx_v_feat_name = NULL;
  std::string __pyx_v_tok_type;
  std::string __pyx_v_str1;
  std::string __pyx_v_str2;
  int __pyx_v_id1;
  int __pyx_v_id2;
  int __pyx_v_cnt;
  std::vector<std::pair<int,int> >  __pyx_v_candset;
  std::pair<__pyx_t_16py_stringsimjoin_8apply_rf_5utils_simfnptr_str,std::string>  __pyx_v_entry;
  std::map<std::string,std::vector<std::string> >  __pyx_v_ltokens;
  std::map<std::string,std::vector<std::string> >  __pyx_v_rtokens;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  std::string __pyx_t_7;
  std::pair<__pyx_t_16py_stringsimjoin_8apply_rf_5utils_simfnptr_str,std::string>  __pyx_t_8;
  std::vector<std::string> ::iterator __pyx_t_9;
  std::set<std::string> ::iterator __pyx_t_10;
  std::vector<std::string> ::iterator __pyx_t_11;
  std::vector<std::pair<__pyx_t_16py_stringsimjoin_8apply_rf_5utils_simfnptr_str,std::string> > ::iterator __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  std::pair<int,int>  __pyx_t_17;
  __Pyx_RefNannySetupContext("execute_rf_naive", 0);

  /* "executor.pyx":888
 * def execute_rf_naive(rf, feature_table, ldf, attr1, rdf, attr2):
 *     cdef vector[string] lstrings, rstrings
 *     convert_to_vector1(ldf[attr1], lstrings)             # <<<<<<<<<<<<<<
 *     convert_to_vector1(rdf[attr2], rstrings)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_ldf, __pyx_v_attr1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_f_8executor_convert_to_vector1(__pyx_t_1, __pyx_v_lstrings);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":889
 *     cdef vector[string] lstrings, rstrings
 *     convert_to_vector1(ldf[attr1], lstrings)
 *     convert_to_vector1(rdf[attr2], rstrings)             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[pair[simfnptr_str, string]] feature_info
 */
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_rdf, __pyx_v_attr2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_f_8executor_convert_to_vector1(__pyx_t_1, __pyx_v_rstrings);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":893
 *     cdef vector[pair[simfnptr_str, string]] feature_info
 *     cdef oset[string] tokenizers
 *     for feat_name in feature_table.index:             # <<<<<<<<<<<<<<
 *         feature_info.push_back(pair[simfnptr_str, string](get_sim_function_str(get_sim_type(feature_table.ix[feat_name]['sim_measure_type'])),
 *                                                       feature_table.ix[feat_name]['tokenizer_type']))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_feature_table, __pyx_n_s_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 893, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 893, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 893, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 893, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 893, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_feat_name, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "executor.pyx":894
 *     cdef oset[string] tokenizers
 *     for feat_name in feature_table.index:
 *         feature_info.push_back(pair[simfnptr_str, string](get_sim_function_str(get_sim_type(feature_table.ix[feat_name]['sim_measure_type'])),             # <<<<<<<<<<<<<<
 *                                                       feature_table.ix[feat_name]['tokenizer_type']))
 *         tokenizers.insert(feature_table.ix[feat_name]['tokenizer_type'])
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_feature_table, __pyx_n_s_ix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 894, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_feat_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 894, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_sim_measure_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 894, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 894, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "executor.pyx":895
 *     for feat_name in feature_table.index:
 *         feature_info.push_back(pair[simfnptr_str, string](get_sim_function_str(get_sim_type(feature_table.ix[feat_name]['sim_measure_type'])),
 *                                                       feature_table.ix[feat_name]['tokenizer_type']))             # <<<<<<<<<<<<<<
 *         tokenizers.insert(feature_table.ix[feat_name]['tokenizer_type'])
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_feature_table, __pyx_n_s_ix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_feat_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_tokenizer_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 895, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "executor.pyx":894
 *     cdef oset[string] tokenizers
 *     for feat_name in feature_table.index:
 *         feature_info.push_back(pair[simfnptr_str, string](get_sim_function_str(get_sim_type(feature_table.ix[feat_name]['sim_measure_type'])),             # <<<<<<<<<<<<<<
 *                                                       feature_table.ix[feat_name]['tokenizer_type']))
 *         tokenizers.insert(feature_table.ix[feat_name]['tokenizer_type'])
 */
    try {
      __pyx_t_8 = std::pair<__pyx_t_16py_stringsimjoin_8apply_rf_5utils_simfnptr_str,std::string> (__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_sim_function_str(__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_sim_type(__pyx_t_6)), __pyx_t_7);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 894, __pyx_L1_error)
    }
    try {
      __pyx_v_feature_info.push_back(__pyx_t_8);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 894, __pyx_L1_error)
    }

    /* "executor.pyx":896
 *         feature_info.push_back(pair[simfnptr_str, string](get_sim_function_str(get_sim_type(feature_table.ix[feat_name]['sim_measure_type'])),
 *                                                       feature_table.ix[feat_name]['tokenizer_type']))
 *         tokenizers.insert(feature_table.ix[feat_name]['tokenizer_type'])             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[string] tokens1, tokens2
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_feature_table, __pyx_n_s_ix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 896, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_feat_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 896, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_tokenizer_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 896, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 896, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    try {
      __pyx_v_tokenizers.insert(__pyx_t_7);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 896, __pyx_L1_error)
    }

    /* "executor.pyx":893
 *     cdef vector[pair[simfnptr_str, string]] feature_info
 *     cdef oset[string] tokenizers
 *     for feat_name in feature_table.index:             # <<<<<<<<<<<<<<
 *         feature_info.push_back(pair[simfnptr_str, string](get_sim_function_str(get_sim_type(feature_table.ix[feat_name]['sim_measure_type'])),
 *                                                       feature_table.ix[feat_name]['tokenizer_type']))
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "executor.pyx":900
 *     cdef vector[string] tokens1, tokens2
 *     cdef string tok_type, str1, str2
 *     cdef int id1=0, id2=0, cnt= 0             # <<<<<<<<<<<<<<
 *     cdef vector[pair[int, int]] candset
 *     cdef pair[simfnptr_str, string] entry
 */
  __pyx_v_id1 = 0;
  __pyx_v_id2 = 0;
  __pyx_v_cnt = 0;

  /* "executor.pyx":904
 *     cdef pair[simfnptr_str, string] entry
 *     cdef omap[string, vector[string]] ltokens, rtokens
 *     for str1 in lstrings:             # <<<<<<<<<<<<<<
 *         id2 = 0
 *         for tok_type in tokenizers:
 */
  __pyx_t_9 = __pyx_v_lstrings.begin();
  for (;;) {
    if (!(__pyx_t_9 != __pyx_v_lstrings.end())) break;
    __pyx_t_7 = *__pyx_t_9;
    ++__pyx_t_9;
    __pyx_v_str1 = __pyx_t_7;

    /* "executor.pyx":905
 *     cdef omap[string, vector[string]] ltokens, rtokens
 *     for str1 in lstrings:
 *         id2 = 0             # <<<<<<<<<<<<<<
 *         for tok_type in tokenizers:
 *             ltokens[tok_type] = tokenize_str(str1, tok_type)
 */
    __pyx_v_id2 = 0;

    /* "executor.pyx":906
 *     for str1 in lstrings:
 *         id2 = 0
 *         for tok_type in tokenizers:             # <<<<<<<<<<<<<<
 *             ltokens[tok_type] = tokenize_str(str1, tok_type)
 * 
 */
    __pyx_t_10 = __pyx_v_tokenizers.begin();
    for (;;) {
      if (!(__pyx_t_10 != __pyx_v_tokenizers.end())) break;
      __pyx_t_7 = *__pyx_t_10;
      ++__pyx_t_10;
      __pyx_v_tok_type = __pyx_t_7;

      /* "executor.pyx":907
 *         id2 = 0
 *         for tok_type in tokenizers:
 *             ltokens[tok_type] = tokenize_str(str1, tok_type)             # <<<<<<<<<<<<<<
 * 
 *         for str2 in rstrings:
 */
      (__pyx_v_ltokens[__pyx_v_tok_type]) = __pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_tokenize_str(__pyx_v_str1, __pyx_v_tok_type);

      /* "executor.pyx":906
 *     for str1 in lstrings:
 *         id2 = 0
 *         for tok_type in tokenizers:             # <<<<<<<<<<<<<<
 *             ltokens[tok_type] = tokenize_str(str1, tok_type)
 * 
 */
    }

    /* "executor.pyx":909
 *             ltokens[tok_type] = tokenize_str(str1, tok_type)
 * 
 *         for str2 in rstrings:             # <<<<<<<<<<<<<<
 *             for tok_type in tokenizers:
 *                 rtokens[tok_type] = tokenize_str(str2, tok_type)
 */
    __pyx_t_11 = __pyx_v_rstrings.begin();
    for (;;) {
      if (!(__pyx_t_11 != __pyx_v_rstrings.end())) break;
      __pyx_t_7 = *__pyx_t_11;
      ++__pyx_t_11;
      __pyx_v_str2 = __pyx_t_7;

      /* "executor.pyx":910
 * 
 *         for str2 in rstrings:
 *             for tok_type in tokenizers:             # <<<<<<<<<<<<<<
 *                 rtokens[tok_type] = tokenize_str(str2, tok_type)
 *             f = []
 */
      __pyx_t_10 = __pyx_v_tokenizers.begin();
      for (;;) {
        if (!(__pyx_t_10 != __pyx_v_tokenizers.end())) break;
        __pyx_t_7 = *__pyx_t_10;
        ++__pyx_t_10;
        __pyx_v_tok_type = __pyx_t_7;

        /* "executor.pyx":911
 *         for str2 in rstrings:
 *             for tok_type in tokenizers:
 *                 rtokens[tok_type] = tokenize_str(str2, tok_type)             # <<<<<<<<<<<<<<
 *             f = []
 *             for entry in feature_info:
 */
        (__pyx_v_rtokens[__pyx_v_tok_type]) = __pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_tokenize_str(__pyx_v_str2, __pyx_v_tok_type);

        /* "executor.pyx":910
 * 
 *         for str2 in rstrings:
 *             for tok_type in tokenizers:             # <<<<<<<<<<<<<<
 *                 rtokens[tok_type] = tokenize_str(str2, tok_type)
 *             f = []
 */
      }

      /* "executor.pyx":912
 *             for tok_type in tokenizers:
 *                 rtokens[tok_type] = tokenize_str(str2, tok_type)
 *             f = []             # <<<<<<<<<<<<<<
 *             for entry in feature_info:
 *                 f.append(entry.first(ltokens[entry.second], rtokens[entry.second]))
 */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 912, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_f, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "executor.pyx":913
 *                 rtokens[tok_type] = tokenize_str(str2, tok_type)
 *             f = []
 *             for entry in feature_info:             # <<<<<<<<<<<<<<
 *                 f.append(entry.first(ltokens[entry.second], rtokens[entry.second]))
 *             if rf.predict([f]) == 1:
 */
      __pyx_t_12 = __pyx_v_feature_info.begin();
      for (;;) {
        if (!(__pyx_t_12 != __pyx_v_feature_info.end())) break;
        __pyx_t_8 = *__pyx_t_12;
        ++__pyx_t_12;
        __pyx_v_entry = __pyx_t_8;

        /* "executor.pyx":914
 *             f = []
 *             for entry in feature_info:
 *                 f.append(entry.first(ltokens[entry.second], rtokens[entry.second]))             # <<<<<<<<<<<<<<
 *             if rf.predict([f]) == 1:
 *                  candset.push_back(pair[int, int](id1, id2))
 */
        __pyx_t_2 = PyFloat_FromDouble(__pyx_v_entry.first((__pyx_v_ltokens[__pyx_v_entry.second]), (__pyx_v_rtokens[__pyx_v_entry.second]))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 914, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_f, __pyx_t_2); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 914, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "executor.pyx":913
 *                 rtokens[tok_type] = tokenize_str(str2, tok_type)
 *             f = []
 *             for entry in feature_info:             # <<<<<<<<<<<<<<
 *                 f.append(entry.first(ltokens[entry.second], rtokens[entry.second]))
 *             if rf.predict([f]) == 1:
 */
      }

      /* "executor.pyx":915
 *             for entry in feature_info:
 *                 f.append(entry.first(ltokens[entry.second], rtokens[entry.second]))
 *             if rf.predict([f]) == 1:             # <<<<<<<<<<<<<<
 *                  candset.push_back(pair[int, int](id1, id2))
 *             id2 += 1
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rf, __pyx_n_s_predict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 915, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 915, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_f);
      __Pyx_GIVEREF(__pyx_v_f);
      PyList_SET_ITEM(__pyx_t_5, 0, __pyx_v_f);
      __pyx_t_14 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (!__pyx_t_14) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 915, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 915, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 915, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_15 = PyTuple_New(1+1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 915, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_14); __pyx_t_14 = NULL;
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_15, 0+1, __pyx_t_5);
          __pyx_t_5 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_15, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 915, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 915, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(0, 915, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_16) {

        /* "executor.pyx":916
 *                 f.append(entry.first(ltokens[entry.second], rtokens[entry.second]))
 *             if rf.predict([f]) == 1:
 *                  candset.push_back(pair[int, int](id1, id2))             # <<<<<<<<<<<<<<
 *             id2 += 1
 *             cnt += 1
 */
        try {
          __pyx_t_17 = std::pair<int,int> (__pyx_v_id1, __pyx_v_id2);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 916, __pyx_L1_error)
        }
        try {
          __pyx_v_candset.push_back(__pyx_t_17);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 916, __pyx_L1_error)
        }

        /* "executor.pyx":915
 *             for entry in feature_info:
 *                 f.append(entry.first(ltokens[entry.second], rtokens[entry.second]))
 *             if rf.predict([f]) == 1:             # <<<<<<<<<<<<<<
 *                  candset.push_back(pair[int, int](id1, id2))
 *             id2 += 1
 */
      }

      /* "executor.pyx":917
 *             if rf.predict([f]) == 1:
 *                  candset.push_back(pair[int, int](id1, id2))
 *             id2 += 1             # <<<<<<<<<<<<<<
 *             cnt += 1
 * #            if cnt % 1000000 == 0:
 */
      __pyx_v_id2 = (__pyx_v_id2 + 1);

      /* "executor.pyx":918
 *                  candset.push_back(pair[int, int](id1, id2))
 *             id2 += 1
 *             cnt += 1             # <<<<<<<<<<<<<<
 * #            if cnt % 1000000 == 0:
 *             print cnt
 */
      __pyx_v_cnt = (__pyx_v_cnt + 1);

      /* "executor.pyx":920
 *             cnt += 1
 * #            if cnt % 1000000 == 0:
 *             print cnt             # <<<<<<<<<<<<<<
 *         id1 += 1
 * 
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_cnt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 920, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(0, 920, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "executor.pyx":909
 *             ltokens[tok_type] = tokenize_str(str1, tok_type)
 * 
 *         for str2 in rstrings:             # <<<<<<<<<<<<<<
 *             for tok_type in tokenizers:
 *                 rtokens[tok_type] = tokenize_str(str2, tok_type)
 */
    }

    /* "executor.pyx":921
 * #            if cnt % 1000000 == 0:
 *             print cnt
 *         id1 += 1             # <<<<<<<<<<<<<<
 * 
 */
    __pyx_v_id1 = (__pyx_v_id1 + 1);

    /* "executor.pyx":904
 *     cdef pair[simfnptr_str, string] entry
 *     cdef omap[string, vector[string]] ltokens, rtokens
 *     for str1 in lstrings:             # <<<<<<<<<<<<<<
 *         id2 = 0
 *         for tok_type in tokenizers:
 */
  }

  /* "executor.pyx":886
 * 
 * 
 * def execute_rf_naive(rf, feature_table, ldf, attr1, rdf, attr2):             # <<<<<<<<<<<<<<
 *     cdef vector[string] lstrings, rstrings
 *     convert_to_vector1(ldf[attr1], lstrings)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("executor.execute_rf_naive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_feat_name);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *__pyx_v_o) {
  std::vector<double>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_double", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((double)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_executor(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_executor},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "executor",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_n_s_COSINE, __pyx_k_COSINE, sizeof(__pyx_k_COSINE), 0, 0, 1, 1},
  {&__pyx_n_s_DICE, __pyx_k_DICE, sizeof(__pyx_k_DICE), 0, 0, 1, 1},
  {&__pyx_n_s_DataFrame, __pyx_k_DataFrame, sizeof(__pyx_k_DataFrame), 0, 0, 1, 1},
  {&__pyx_n_s_EDIT_DISTANCE, __pyx_k_EDIT_DISTANCE, sizeof(__pyx_k_EDIT_DISTANCE), 0, 0, 1, 1},
  {&__pyx_n_s_FEATURE, __pyx_k_FEATURE, sizeof(__pyx_k_FEATURE), 0, 0, 1, 1},
  {&__pyx_n_s_FILTER, __pyx_k_FILTER, sizeof(__pyx_k_FILTER), 0, 0, 1, 1},
  {&__pyx_n_s_JACCARD, __pyx_k_JACCARD, sizeof(__pyx_k_JACCARD), 0, 0, 1, 1},
  {&__pyx_n_s_JOIN, __pyx_k_JOIN, sizeof(__pyx_k_JOIN), 0, 0, 1, 1},
  {&__pyx_n_s_OUTPUT, __pyx_k_OUTPUT, sizeof(__pyx_k_OUTPUT), 0, 0, 1, 1},
  {&__pyx_n_s_OVERLAP_COEFFICIENT, __pyx_k_OVERLAP_COEFFICIENT, sizeof(__pyx_k_OVERLAP_COEFFICIENT), 0, 0, 1, 1},
  {&__pyx_n_s_Predicate, __pyx_k_Predicate, sizeof(__pyx_k_Predicate), 0, 0, 1, 1},
  {&__pyx_n_s_SELECT, __pyx_k_SELECT, sizeof(__pyx_k_SELECT), 0, 0, 1, 1},
  {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
  {&__pyx_kp_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 0},
  {&__pyx_n_s_attr1, __pyx_k_attr1, sizeof(__pyx_k_attr1), 0, 0, 1, 1},
  {&__pyx_n_s_attr2, __pyx_k_attr2, sizeof(__pyx_k_attr2), 0, 0, 1, 1},
  {&__pyx_kp_s_before_tok, __pyx_k_before_tok, sizeof(__pyx_k_before_tok), 0, 0, 1, 0},
  {&__pyx_n_s_candset, __pyx_k_candset, sizeof(__pyx_k_candset), 0, 0, 1, 1},
  {&__pyx_n_s_candset_votes, __pyx_k_candset_votes, sizeof(__pyx_k_candset_votes), 0, 0, 1, 1},
  {&__pyx_n_s_children, __pyx_k_children, sizeof(__pyx_k_children), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_cnt, __pyx_k_cnt, sizeof(__pyx_k_cnt), 0, 0, 1, 1},
  {&__pyx_n_s_columns, __pyx_k_columns, sizeof(__pyx_k_columns), 0, 0, 1, 1},
  {&__pyx_kp_s_computing_coverage, __pyx_k_computing_coverage, sizeof(__pyx_k_computing_coverage), 0, 0, 1, 0},
  {&__pyx_n_s_coverage, __pyx_k_coverage, sizeof(__pyx_k_coverage), 0, 0, 1, 1},
  {&__pyx_n_s_df1, __pyx_k_df1, sizeof(__pyx_k_df1), 0, 0, 1, 1},
  {&__pyx_n_s_df2, __pyx_k_df2, sizeof(__pyx_k_df2), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_entry, __pyx_k_entry, sizeof(__pyx_k_entry), 0, 0, 1, 1},
  {&__pyx_n_s_execute_rf, __pyx_k_execute_rf, sizeof(__pyx_k_execute_rf), 0, 0, 1, 1},
  {&__pyx_n_s_execute_rf_naive, __pyx_k_execute_rf_naive, sizeof(__pyx_k_execute_rf_naive), 0, 0, 1, 1},
  {&__pyx_kp_s_executing_remaining_trees, __pyx_k_executing_remaining_trees, sizeof(__pyx_k_executing_remaining_trees), 0, 0, 1, 0},
  {&__pyx_n_s_executor, __pyx_k_executor, sizeof(__pyx_k_executor), 0, 0, 1, 1},
  {&__pyx_kp_s_executor_pyx, __pyx_k_executor_pyx, sizeof(__pyx_k_executor_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_feat_name, __pyx_k_feat_name, sizeof(__pyx_k_feat_name), 0, 0, 1, 1},
  {&__pyx_n_s_feature_info, __pyx_k_feature_info, sizeof(__pyx_k_feature_info), 0, 0, 1, 1},
  {&__pyx_n_s_feature_table, __pyx_k_feature_table, sizeof(__pyx_k_feature_table), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_kp_s_finished_tokenizing_executing_pl, __pyx_k_finished_tokenizing_executing_pl, sizeof(__pyx_k_finished_tokenizing_executing_pl), 0, 0, 1, 0},
  {&__pyx_n_s_ft, __pyx_k_ft, sizeof(__pyx_k_ft), 0, 0, 1, 1},
  {&__pyx_n_s_generate_tokens, __pyx_k_generate_tokens, sizeof(__pyx_k_generate_tokens), 0, 0, 1, 1},
  {&__pyx_kp_s_generating_plan, __pyx_k_generating_plan, sizeof(__pyx_k_generating_plan), 0, 0, 1, 0},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_get_predicate_dict, __pyx_k_get_predicate_dict, sizeof(__pyx_k_get_predicate_dict), 0, 0, 1, 1},
  {&__pyx_n_s_global_plan, __pyx_k_global_plan, sizeof(__pyx_k_global_plan), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_id1, __pyx_k_id1, sizeof(__pyx_k_id1), 0, 0, 1, 1},
  {&__pyx_n_s_id2, __pyx_k_id2, sizeof(__pyx_k_id2), 0, 0, 1, 1},
  {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_iterrows, __pyx_k_iterrows, sizeof(__pyx_k_iterrows), 0, 0, 1, 1},
  {&__pyx_n_s_ix, __pyx_k_ix, sizeof(__pyx_k_ix), 0, 0, 1, 1},
  {&__pyx_kp_s_join_completed_starting_subtree, __pyx_k_join_completed_starting_subtree, sizeof(__pyx_k_join_completed_starting_subtree), 0, 0, 1, 0},
  {&__pyx_n_s_join_node, __pyx_k_join_node, sizeof(__pyx_k_join_node), 0, 0, 1, 1},
  {&__pyx_kp_s_join_subtree_execution_completed, __pyx_k_join_subtree_execution_completed, sizeof(__pyx_k_join_subtree_execution_completed), 0, 0, 1, 0},
  {&__pyx_n_s_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 0, 1, 1},
  {&__pyx_n_s_l1, __pyx_k_l1, sizeof(__pyx_k_l1), 0, 0, 1, 1},
  {&__pyx_n_s_l2, __pyx_k_l2, sizeof(__pyx_k_l2), 0, 0, 1, 1},
  {&__pyx_n_s_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 1, 1},
  {&__pyx_n_s_ldf, __pyx_k_ldf, sizeof(__pyx_k_ldf), 0, 0, 1, 1},
  {&__pyx_kp_s_loaded_tok, __pyx_k_loaded_tok, sizeof(__pyx_k_loaded_tok), 0, 0, 1, 0},
  {&__pyx_n_s_lstrings, __pyx_k_lstrings, sizeof(__pyx_k_lstrings), 0, 0, 1, 1},
  {&__pyx_n_s_ltokens, __pyx_k_ltokens, sizeof(__pyx_k_ltokens), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_n_jobs, __pyx_k_n_jobs, sizeof(__pyx_k_n_jobs), 0, 0, 1, 1},
  {&__pyx_n_s_node_type, __pyx_k_node_type, sizeof(__pyx_k_node_type), 0, 0, 1, 1},
  {&__pyx_kp_s_num_join_nodes, __pyx_k_num_join_nodes, sizeof(__pyx_k_num_join_nodes), 0, 0, 1, 0},
  {&__pyx_kp_s_num_preds, __pyx_k_num_preds, sizeof(__pyx_k_num_preds), 0, 0, 1, 0},
  {&__pyx_n_s_num_preds_2, __pyx_k_num_preds_2, sizeof(__pyx_k_num_preds_2), 0, 0, 1, 1},
  {&__pyx_kp_s_num_rules, __pyx_k_num_rules, sizeof(__pyx_k_num_rules), 0, 0, 1, 0},
  {&__pyx_n_s_num_rules_2, __pyx_k_num_rules_2, sizeof(__pyx_k_num_rules_2), 0, 0, 1, 1},
  {&__pyx_n_s_num_total_trees, __pyx_k_num_total_trees, sizeof(__pyx_k_num_total_trees), 0, 0, 1, 1},
  {&__pyx_kp_s_num_trees, __pyx_k_num_trees, sizeof(__pyx_k_num_trees), 0, 0, 1, 0},
  {&__pyx_n_s_num_trees_processed, __pyx_k_num_trees_processed, sizeof(__pyx_k_num_trees_processed), 0, 0, 1, 1},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_kp_s_output, __pyx_k_output, sizeof(__pyx_k_output), 0, 0, 1, 0},
  {&__pyx_n_s_output1, __pyx_k_output1, sizeof(__pyx_k_output1), 0, 0, 1, 1},
  {&__pyx_n_s_output_2, __pyx_k_output_2, sizeof(__pyx_k_output_2), 0, 0, 1, 1},
  {&__pyx_n_s_output_df, __pyx_k_output_df, sizeof(__pyx_k_output_df), 0, 0, 1, 1},
  {&__pyx_n_s_output_pairs, __pyx_k_output_pairs, sizeof(__pyx_k_output_pairs), 0, 0, 1, 1},
  {&__pyx_kp_s_output_size, __pyx_k_output_size, sizeof(__pyx_k_output_size), 0, 0, 1, 0},
  {&__pyx_n_s_pair_id, __pyx_k_pair_id, sizeof(__pyx_k_pair_id), 0, 0, 1, 1},
  {&__pyx_n_s_pandas, __pyx_k_pandas, sizeof(__pyx_k_pandas), 0, 0, 1, 1},
  {&__pyx_kp_s_parallen_begin, __pyx_k_parallen_begin, sizeof(__pyx_k_parallen_begin), 0, 0, 1, 0},
  {&__pyx_kp_s_parallen_end, __pyx_k_parallen_end, sizeof(__pyx_k_parallen_end), 0, 0, 1, 0},
  {&__pyx_n_s_path1, __pyx_k_path1, sizeof(__pyx_k_path1), 0, 0, 1, 1},
  {&__pyx_n_s_path2, __pyx_k_path2, sizeof(__pyx_k_path2), 0, 0, 1, 1},
  {&__pyx_n_s_pd, __pyx_k_pd, sizeof(__pyx_k_pd), 0, 0, 1, 1},
  {&__pyx_n_s_perform_join, __pyx_k_perform_join, sizeof(__pyx_k_perform_join), 0, 0, 1, 1},
  {&__pyx_n_s_plans, __pyx_k_plans, sizeof(__pyx_k_plans), 0, 0, 1, 1},
  {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
  {&__pyx_n_s_predicate, __pyx_k_predicate, sizeof(__pyx_k_predicate), 0, 0, 1, 1},
  {&__pyx_n_s_predict, __pyx_k_predict, sizeof(__pyx_k_predict), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_py_stringsimjoin_apply_rf_execut, __pyx_k_py_stringsimjoin_apply_rf_execut, sizeof(__pyx_k_py_stringsimjoin_apply_rf_execut), 0, 0, 1, 1},
  {&__pyx_n_s_py_stringsimjoin_apply_rf_predic, __pyx_k_py_stringsimjoin_apply_rf_predic, sizeof(__pyx_k_py_stringsimjoin_apply_rf_predic), 0, 0, 1, 1},
  {&__pyx_n_s_qg2_bag, __pyx_k_qg2_bag, sizeof(__pyx_k_qg2_bag), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_random, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rdf, __pyx_k_rdf, sizeof(__pyx_k_rdf), 0, 0, 1, 1},
  {&__pyx_n_s_read_csv, __pyx_k_read_csv, sizeof(__pyx_k_read_csv), 0, 0, 1, 1},
  {&__pyx_n_s_rf, __pyx_k_rf, sizeof(__pyx_k_rf), 0, 0, 1, 1},
  {&__pyx_n_s_root, __pyx_k_root, sizeof(__pyx_k_root), 0, 0, 1, 1},
  {&__pyx_n_s_row, __pyx_k_row, sizeof(__pyx_k_row), 0, 0, 1, 1},
  {&__pyx_n_s_rstrings, __pyx_k_rstrings, sizeof(__pyx_k_rstrings), 0, 0, 1, 1},
  {&__pyx_n_s_rtokens, __pyx_k_rtokens, sizeof(__pyx_k_rtokens), 0, 0, 1, 1},
  {&__pyx_n_s_rule, __pyx_k_rule, sizeof(__pyx_k_rule), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_sample_size, __pyx_k_sample_size, sizeof(__pyx_k_sample_size), 0, 0, 1, 1},
  {&__pyx_n_s_score, __pyx_k_score, sizeof(__pyx_k_score), 0, 0, 1, 1},
  {&__pyx_n_s_sim_measure_type, __pyx_k_sim_measure_type, sizeof(__pyx_k_sim_measure_type), 0, 0, 1, 1},
  {&__pyx_n_s_sim_type, __pyx_k_sim_type, sizeof(__pyx_k_sim_type), 0, 0, 1, 1},
  {&__pyx_n_s_st, __pyx_k_st, sizeof(__pyx_k_st), 0, 0, 1, 1},
  {&__pyx_n_s_start_time, __pyx_k_start_time, sizeof(__pyx_k_start_time), 0, 0, 1, 1},
  {&__pyx_n_s_str1, __pyx_k_str1, sizeof(__pyx_k_str1), 0, 0, 1, 1},
  {&__pyx_n_s_str2, __pyx_k_str2, sizeof(__pyx_k_str2), 0, 0, 1, 1},
  {&__pyx_n_s_t5, __pyx_k_t5, sizeof(__pyx_k_t5), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_test_execute_rf, __pyx_k_test_execute_rf, sizeof(__pyx_k_test_execute_rf), 0, 0, 1, 1},
  {&__pyx_n_s_test_jac, __pyx_k_test_jac, sizeof(__pyx_k_test_jac), 0, 0, 1, 1},
  {&__pyx_n_s_test_tok1, __pyx_k_test_tok1, sizeof(__pyx_k_test_tok1), 0, 0, 1, 1},
  {&__pyx_n_s_threshold, __pyx_k_threshold, sizeof(__pyx_k_threshold), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_kp_s_time_2, __pyx_k_time_2, sizeof(__pyx_k_time_2), 0, 0, 1, 0},
  {&__pyx_n_s_tok_type, __pyx_k_tok_type, sizeof(__pyx_k_tok_type), 0, 0, 1, 1},
  {&__pyx_n_s_tokenizer_type, __pyx_k_tokenizer_type, sizeof(__pyx_k_tokenizer_type), 0, 0, 1, 1},
  {&__pyx_n_s_tokenizers, __pyx_k_tokenizers, sizeof(__pyx_k_tokenizers), 0, 0, 1, 1},
  {&__pyx_n_s_tokenizing, __pyx_k_tokenizing, sizeof(__pyx_k_tokenizing), 0, 0, 1, 1},
  {&__pyx_kp_s_tokenizing_done, __pyx_k_tokenizing_done, sizeof(__pyx_k_tokenizing_done), 0, 0, 1, 0},
  {&__pyx_kp_s_tokenizing_strings, __pyx_k_tokenizing_strings, sizeof(__pyx_k_tokenizing_strings), 0, 0, 1, 0},
  {&__pyx_n_s_tokens1, __pyx_k_tokens1, sizeof(__pyx_k_tokens1), 0, 0, 1, 1},
  {&__pyx_n_s_tokens2, __pyx_k_tokens2, sizeof(__pyx_k_tokens2), 0, 0, 1, 1},
  {&__pyx_kp_s_total_time, __pyx_k_total_time, sizeof(__pyx_k_total_time), 0, 0, 1, 0},
  {&__pyx_kp_s_tree, __pyx_k_tree, sizeof(__pyx_k_tree), 0, 0, 1, 0},
  {&__pyx_n_s_tree_2, __pyx_k_tree_2, sizeof(__pyx_k_tree_2), 0, 0, 1, 1},
  {&__pyx_n_s_tree_cov, __pyx_k_tree_cov, sizeof(__pyx_k_tree_cov), 0, 0, 1, 1},
  {&__pyx_n_s_trees, __pyx_k_trees, sizeof(__pyx_k_trees), 0, 0, 1, 1},
  {&__pyx_kp_s_trees1, __pyx_k_trees1, sizeof(__pyx_k_trees1), 0, 0, 1, 0},
  {&__pyx_n_s_trees1_2, __pyx_k_trees1_2, sizeof(__pyx_k_trees1_2), 0, 0, 1, 1},
  {&__pyx_kp_s_trees2, __pyx_k_trees2, sizeof(__pyx_k_trees2), 0, 0, 1, 0},
  {&__pyx_n_s_trees2_2, __pyx_k_trees2_2, sizeof(__pyx_k_trees2_2), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_working_dir, __pyx_k_working_dir, sizeof(__pyx_k_working_dir), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_n_s_ws, __pyx_k_ws, sizeof(__pyx_k_ws), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(0, 308, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 402, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 553, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 553, __pyx_L1_error)
  #endif
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "executor.pyx":40
 *     convert_to_vector1(df[attr], strings)
 * 
 * def test_execute_rf(rf, feature_table, l1, l2, path1, attr1, path2, attr2, working_dir, n_jobs):             # <<<<<<<<<<<<<<
 *     start_time = time.time()
 *     cdef vector[Tree] trees, trees1, trees2
 */
  __pyx_tuple__3 = PyTuple_Pack(26, __pyx_n_s_rf, __pyx_n_s_feature_table, __pyx_n_s_l1, __pyx_n_s_l2, __pyx_n_s_path1, __pyx_n_s_attr1, __pyx_n_s_path2, __pyx_n_s_attr2, __pyx_n_s_working_dir, __pyx_n_s_n_jobs, __pyx_n_s_start_time, __pyx_n_s_trees, __pyx_n_s_trees1_2, __pyx_n_s_trees2_2, __pyx_n_s_i, __pyx_n_s_num_total_trees, __pyx_n_s_lstrings, __pyx_n_s_rstrings, __pyx_n_s_coverage, __pyx_n_s_tree_cov, __pyx_n_s_l, __pyx_n_s_r, __pyx_n_s_s, __pyx_n_s_global_plan, __pyx_n_s_join_node, __pyx_n_s_candset_votes); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(10, 0, 26, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_executor_pyx, __pyx_n_s_test_execute_rf, 40, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 40, __pyx_L1_error)

  /* "executor.pyx":98
 * 
 * 
 * def execute_rf(rf, feature_table, l1, l2, path1, attr1, path2, attr2, working_dir, n_jobs):             # <<<<<<<<<<<<<<
 *     start_time = time.time()
 *     cdef vector[Tree] trees, trees1, trees2
 */
  __pyx_tuple__5 = PyTuple_Pack(32, __pyx_n_s_rf, __pyx_n_s_feature_table, __pyx_n_s_l1, __pyx_n_s_l2, __pyx_n_s_path1, __pyx_n_s_attr1, __pyx_n_s_path2, __pyx_n_s_attr2, __pyx_n_s_working_dir, __pyx_n_s_n_jobs, __pyx_n_s_start_time, __pyx_n_s_trees, __pyx_n_s_trees1_2, __pyx_n_s_trees2_2, __pyx_n_s_i, __pyx_n_s_num_total_trees, __pyx_n_s_num_trees_processed, __pyx_n_s_num_rules_2, __pyx_n_s_num_preds_2, __pyx_n_s_tree_2, __pyx_n_s_rule, __pyx_n_s_lstrings, __pyx_n_s_rstrings, __pyx_n_s_coverage, __pyx_n_s_l, __pyx_n_s_r, __pyx_n_s_s, __pyx_n_s_plans, __pyx_n_s_global_plan, __pyx_n_s_candset_votes, __pyx_n_s_sample_size, __pyx_n_s_label); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(10, 0, 32, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__5, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_executor_pyx, __pyx_n_s_execute_rf, 98, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(0, 98, __pyx_L1_error)

  /* "executor.pyx":778
 *         tokenize(lstrings, rstrings, tok_type, working_dir)
 * 
 * def test_tok1(df1, attr1, df2, attr2):             # <<<<<<<<<<<<<<
 *     cdef vector[string] lstrings, rstrings
 *     convert_to_vector1(df1[attr1], lstrings)
 */
  __pyx_tuple__7 = PyTuple_Pack(6, __pyx_n_s_df1, __pyx_n_s_attr1, __pyx_n_s_df2, __pyx_n_s_attr2, __pyx_n_s_lstrings, __pyx_n_s_rstrings); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_executor_pyx, __pyx_n_s_test_tok1, 778, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(0, 778, __pyx_L1_error)

  /* "executor.pyx":808
 *     return tokenizers
 * 
 * def generate_tokens(ft, path1, attr1, path2, attr2, const string& working_dir):             # <<<<<<<<<<<<<<
 *     cdef oset[string] tokenizers
 *     for idx, row in ft.iterrows():
 */
  __pyx_tuple__9 = PyTuple_Pack(12, __pyx_n_s_ft, __pyx_n_s_path1, __pyx_n_s_attr1, __pyx_n_s_path2, __pyx_n_s_attr2, __pyx_n_s_working_dir, __pyx_n_s_tokenizers, __pyx_n_s_idx, __pyx_n_s_row, __pyx_n_s_lstrings, __pyx_n_s_rstrings, __pyx_n_s_tok_type); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(6, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_executor_pyx, __pyx_n_s_generate_tokens, 808, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(0, 808, __pyx_L1_error)

  /* "executor.pyx":824
 *         tokenize(lstrings, rstrings, tok_type, working_dir)
 * 
 * def perform_join(path1, attr1, path2, attr2, tok_type, sim_type, threshold, const string& working_dir):             # <<<<<<<<<<<<<<
 *     cdef vector[vector[int]] ltokens, rtokens
 *     cdef pair[vector[pair[int, int]], vector[double]] output
 */
  __pyx_tuple__11 = PyTuple_Pack(17, __pyx_n_s_path1, __pyx_n_s_attr1, __pyx_n_s_path2, __pyx_n_s_attr2, __pyx_n_s_tok_type, __pyx_n_s_sim_type, __pyx_n_s_threshold, __pyx_n_s_working_dir, __pyx_n_s_ltokens, __pyx_n_s_rtokens, __pyx_n_s_output_2, __pyx_n_s_entry, __pyx_n_s_lstrings, __pyx_n_s_rstrings, __pyx_n_s_output_pairs, __pyx_n_s_i, __pyx_n_s_output_df); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(8, 0, 17, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_executor_pyx, __pyx_n_s_perform_join, 824, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 824, __pyx_L1_error)

  /* "executor.pyx":858
 *     return output_df
 * 
 * def test_jac(sim_type, threshold):             # <<<<<<<<<<<<<<
 *     st = time.time()
 *     print 'tokenizing'
 */
  __pyx_tuple__13 = PyTuple_Pack(8, __pyx_n_s_sim_type, __pyx_n_s_threshold, __pyx_n_s_st, __pyx_n_s_ltokens, __pyx_n_s_rtokens, __pyx_n_s_output_2, __pyx_n_s_output1, __pyx_n_s_i); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(2, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_executor_pyx, __pyx_n_s_test_jac, 858, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 858, __pyx_L1_error)

  /* "executor.pyx":886
 * 
 * 
 * def execute_rf_naive(rf, feature_table, ldf, attr1, rdf, attr2):             # <<<<<<<<<<<<<<
 *     cdef vector[string] lstrings, rstrings
 *     convert_to_vector1(ldf[attr1], lstrings)
 */
  __pyx_tuple__15 = PyTuple_Pack(24, __pyx_n_s_rf, __pyx_n_s_feature_table, __pyx_n_s_ldf, __pyx_n_s_attr1, __pyx_n_s_rdf, __pyx_n_s_attr2, __pyx_n_s_lstrings, __pyx_n_s_rstrings, __pyx_n_s_feature_info, __pyx_n_s_tokenizers, __pyx_n_s_feat_name, __pyx_n_s_tokens1, __pyx_n_s_tokens2, __pyx_n_s_tok_type, __pyx_n_s_str1, __pyx_n_s_str2, __pyx_n_s_id1, __pyx_n_s_id2, __pyx_n_s_cnt, __pyx_n_s_candset, __pyx_n_s_entry, __pyx_n_s_ltokens, __pyx_n_s_rtokens, __pyx_n_s_f); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(6, 0, 24, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_executor_pyx, __pyx_n_s_execute_rf_naive, 886, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  /* InitThreads.init */
  #ifdef WITH_THREAD
PyEval_InitThreads();
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2, __pyx_L1_error)

  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 2, __pyx_L1_error);
  __pyx_float_0_0001 = PyFloat_FromDouble(0.0001); if (unlikely(!__pyx_float_0_0001)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_modinit_global_init_code(void); /*proto*/
static int __Pyx_modinit_variable_export_code(void); /*proto*/
static int __Pyx_modinit_function_export_code(void); /*proto*/
static int __Pyx_modinit_type_init_code(void); /*proto*/
static int __Pyx_modinit_type_import_code(void); /*proto*/
static int __Pyx_modinit_variable_import_code(void); /*proto*/
static int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("py_stringsimjoin.apply_rf.tokenizers"); if (!__pyx_t_1) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "tokenize", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_tokenize, "void (std::vector<std::string>  &, std::vector<std::string>  &, std::string const &, std::string const &, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "load_tok", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_load_tok, "void (PyObject *, PyObject *, std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "tokenize_str", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_tokenize_str, "std::vector<std::string>  (std::string &, std::string const &)") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_ImportModule("py_stringsimjoin.apply_rf.set_sim_join"); if (!__pyx_t_2) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_2, "set_sim_join", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_12set_sim_join_set_sim_join, "std::pair<std::vector<std::pair<int,int> > ,std::vector<double> >  (std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, int, double, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_2, "set_sim_join1", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_12set_sim_join_set_sim_join1, "void (std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, int, double, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_ImportModule("py_stringsimjoin.apply_rf.overlap_coefficient_join"); if (!__pyx_t_3) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_3, "ov_coeff_join", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_24overlap_coefficient_join_ov_coeff_join, "std::pair<std::vector<std::pair<int,int> > ,std::vector<double> >  (std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, double, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_ImportModule("py_stringsimjoin.apply_rf.edit_distance_join"); if (!__pyx_t_4) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_4, "ed_join", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_18edit_distance_join_ed_join, "std::pair<std::vector<std::pair<int,int> > ,std::vector<double> >  (std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, int, double, std::vector<std::string>  &, std::vector<std::string>  &, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_ImportModule("py_stringsimjoin.apply_rf.sim_functions"); if (!__pyx_t_5) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_5, "jaccard", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_13sim_functions_jaccard, "double (std::vector<int>  const &, std::vector<int>  const &)") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_5, "dice", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_13sim_functions_dice, "double (std::vector<int>  const &, std::vector<int>  const &)") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_5, "cosine", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_13sim_functions_cosine, "double (std::vector<int>  const &, std::vector<int>  const &)") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_ImportModule("py_stringsimjoin.apply_rf.utils"); if (!__pyx_t_6) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_6, "get_sim_type", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_sim_type, "int (std::string const &)") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_6, "get_sim_function_str", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_sim_function_str, "__pyx_t_16py_stringsimjoin_8apply_rf_5utils_simfnptr_str (int const )") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_6, "get_token_sim_function", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_token_sim_function, "__pyx_t_16py_stringsimjoin_8apply_rf_5utils_token_simfnptr (int const )") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_6, "get_str_sim_function", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_str_sim_function, "__pyx_t_16py_stringsimjoin_8apply_rf_5utils_str_simfnptr (int const )") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_6, "get_comp_type", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_comp_type, "int (std::string const &)") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_6, "get_comparison_function", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_comparison_function, "__pyx_t_16py_stringsimjoin_8apply_rf_5utils_compfnptr (int const )") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_7 = __Pyx_ImportModule("py_stringsimjoin.apply_rf.ex_plan"); if (!__pyx_t_7) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_7, "compute_predicate_cost_and_coverage", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_7ex_plan_compute_predicate_cost_and_coverage, "void (std::vector<std::string>  &, std::vector<std::string>  &, std::vector<Tree>  &, std::map<std::string,Coverage>  &, std::map<int,Coverage>  &)") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_7, "get_default_execution_plan", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_7ex_plan_get_default_execution_plan, "Node (std::vector<Tree>  &, std::map<std::string,Coverage>  &, std::map<int,Coverage>  &, int const , std::vector<Tree>  &, std::vector<Tree>  &)") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_7, "extract_pos_rules_from_rf", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_7ex_plan_extract_pos_rules_from_rf, "std::vector<Tree>  (PyObject *, PyObject *)") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_7, "generate_local_optimal_plans", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_7ex_plan_generate_local_optimal_plans, "void (std::vector<Tree>  &, std::map<std::string,Coverage>  &, int, std::vector<Node>  &, std::vector<int>  &)") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_7, "generate_overall_plan", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_7ex_plan_generate_overall_plan, "Node (std::vector<Node> )") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_7, "generate_ex_plan_for_stage2", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_7ex_plan_generate_ex_plan_for_stage2, "std::vector<Node>  (std::vector<std::pair<int,int> >  &, std::vector<std::string>  &, std::vector<std::string>  &, std::vector<Tree>  &, int)") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (!(defined(__cplusplus)) || (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 4)))
    #define CYTHON_SMALL_CODE __attribute__((optimize("Os")))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initexecutor(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initexecutor(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_executor(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_executor(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_executor(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_executor(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 2, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("executor", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 2, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 2, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_executor) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 2, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "executor")) {
      if (unlikely(PyDict_SetItemString(modules, "executor", __pyx_m) < 0)) __PYX_ERR(0, 2, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() != 0)) goto __pyx_L1_error;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif

  /* "executor.pyx":2
 * 
 * import time             # <<<<<<<<<<<<<<
 * import random
 * import pandas as pd
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_time, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":3
 * 
 * import time
 * import random             # <<<<<<<<<<<<<<
 * import pandas as pd
 * from cython.parallel import prange
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_random, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_random, __pyx_t_1) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":4
 * import time
 * import random
 * import pandas as pd             # <<<<<<<<<<<<<<
 * from cython.parallel import prange
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pandas, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pd, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":16
 * from libc.stdlib cimport atoi
 * 
 * from py_stringsimjoin.apply_rf.predicate import Predicate             # <<<<<<<<<<<<<<
 * from py_stringsimjoin.apply_rf.execution_plan import get_predicate_dict
 * from py_stringsimjoin.apply_rf.tokenizers cimport tokenize, load_tok, tokenize_str
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Predicate);
  __Pyx_GIVEREF(__pyx_n_s_Predicate);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Predicate);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_py_stringsimjoin_apply_rf_predic, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Predicate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Predicate, __pyx_t_1) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "executor.pyx":17
 * 
 * from py_stringsimjoin.apply_rf.predicate import Predicate
 * from py_stringsimjoin.apply_rf.execution_plan import get_predicate_dict             # <<<<<<<<<<<<<<
 * from py_stringsimjoin.apply_rf.tokenizers cimport tokenize, load_tok, tokenize_str
 * from py_stringsimjoin.apply_rf.set_sim_join cimport set_sim_join, set_sim_join1
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_get_predicate_dict);
  __Pyx_GIVEREF(__pyx_n_s_get_predicate_dict);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_get_predicate_dict);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_py_stringsimjoin_apply_rf_execut, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_get_predicate_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_predicate_dict, __pyx_t_2) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":40
 *     convert_to_vector1(df[attr], strings)
 * 
 * def test_execute_rf(rf, feature_table, l1, l2, path1, attr1, path2, attr2, working_dir, n_jobs):             # <<<<<<<<<<<<<<
 *     start_time = time.time()
 *     cdef vector[Tree] trees, trees1, trees2
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8executor_1test_execute_rf, NULL, __pyx_n_s_executor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test_execute_rf, __pyx_t_1) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":98
 * 
 * 
 * def execute_rf(rf, feature_table, l1, l2, path1, attr1, path2, attr2, working_dir, n_jobs):             # <<<<<<<<<<<<<<
 *     start_time = time.time()
 *     cdef vector[Tree] trees, trees1, trees2
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8executor_3execute_rf, NULL, __pyx_n_s_executor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_execute_rf, __pyx_t_1) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":778
 *         tokenize(lstrings, rstrings, tok_type, working_dir)
 * 
 * def test_tok1(df1, attr1, df2, attr2):             # <<<<<<<<<<<<<<
 *     cdef vector[string] lstrings, rstrings
 *     convert_to_vector1(df1[attr1], lstrings)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8executor_5test_tok1, NULL, __pyx_n_s_executor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test_tok1, __pyx_t_1) < 0) __PYX_ERR(0, 778, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":808
 *     return tokenizers
 * 
 * def generate_tokens(ft, path1, attr1, path2, attr2, const string& working_dir):             # <<<<<<<<<<<<<<
 *     cdef oset[string] tokenizers
 *     for idx, row in ft.iterrows():
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8executor_7generate_tokens, NULL, __pyx_n_s_executor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_generate_tokens, __pyx_t_1) < 0) __PYX_ERR(0, 808, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":824
 *         tokenize(lstrings, rstrings, tok_type, working_dir)
 * 
 * def perform_join(path1, attr1, path2, attr2, tok_type, sim_type, threshold, const string& working_dir):             # <<<<<<<<<<<<<<
 *     cdef vector[vector[int]] ltokens, rtokens
 *     cdef pair[vector[pair[int, int]], vector[double]] output
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8executor_9perform_join, NULL, __pyx_n_s_executor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_perform_join, __pyx_t_1) < 0) __PYX_ERR(0, 824, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":858
 *     return output_df
 * 
 * def test_jac(sim_type, threshold):             # <<<<<<<<<<<<<<
 *     st = time.time()
 *     print 'tokenizing'
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8executor_11test_jac, NULL, __pyx_n_s_executor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test_jac, __pyx_t_1) < 0) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":886
 * 
 * 
 * def execute_rf_naive(rf, feature_table, ldf, attr1, rdf, attr2):             # <<<<<<<<<<<<<<
 *     cdef vector[string] lstrings, rstrings
 *     convert_to_vector1(ldf[attr1], lstrings)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8executor_13execute_rf_naive, NULL, __pyx_n_s_executor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_execute_rf_naive, __pyx_t_1) < 0) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "executor.pyx":2
 * 
 * import time             # <<<<<<<<<<<<<<
 * import random
 * import pandas as pd
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init executor", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init executor");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    if (likely(result)) {
        Py_INCREF(result);
    } else if (unlikely(PyErr_Occurred())) {
        result = NULL;
    } else {
#else
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyCFunctionFastCall */
    #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
    #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetItemInt */
    static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
    #if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyErrFetchRestore */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
    static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseArgTupleInvalid */
    static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
    static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
    static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectCallNoArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* None */
      static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* PyIntBinop */
      #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* PyObjectCallMethod1 */
      static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = NULL;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
    goto done;
done:
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) return NULL;
    result = __Pyx__PyObject_CallMethod1(method, arg);
    Py_DECREF(method);
    return result;
}

/* pop_index */
      static PyObject* __Pyx__PyObject_PopNewIndex(PyObject* L, PyObject* py_ix) {
    PyObject *r;
    if (unlikely(!py_ix)) return NULL;
    r = __Pyx__PyObject_PopIndex(L, py_ix);
    Py_DECREF(py_ix);
    return r;
}
static PyObject* __Pyx__PyObject_PopIndex(PyObject* L, PyObject* py_ix) {
    return __Pyx_PyObject_CallMethod1(L, __pyx_n_s_pop, py_ix);
}
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static PyObject* __Pyx__PyList_PopIndex(PyObject* L, PyObject* py_ix, Py_ssize_t ix) {
    Py_ssize_t size = PyList_GET_SIZE(L);
    if (likely(size > (((PyListObject*)L)->allocated >> 1))) {
        Py_ssize_t cix = ix;
        if (cix < 0) {
            cix += size;
        }
        if (likely(0 <= cix && cix < size)) {
            PyObject* v = PyList_GET_ITEM(L, cix);
            Py_SIZE(L) -= 1;
            size -= 1;
            memmove(&PyList_GET_ITEM(L, cix), &PyList_GET_ITEM(L, cix+1), (size_t)(size-cix)*sizeof(PyObject*));
            return v;
        }
    }
    if (py_ix == Py_None) {
        return __Pyx__PyObject_PopNewIndex(L, PyInt_FromSsize_t(ix));
    } else {
        return __Pyx__PyObject_PopIndex(L, py_ix);
    }
}
#endif

/* BytesEquals */
      static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
      static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* RaiseTooManyValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
      static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
      static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* DictGetItem */
      #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyFloatBinop */
      #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_SubtractObjC(PyObject *op1, PyObject *op2, double floatval, CYTHON_UNUSED int inplace) {
    const double b = floatval;
    double a, result;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
        }
    } else {
        return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
    }
        PyFPE_START_PROTECT("subtract", return NULL)
        result = a - b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* PyIntBinop */
        #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

/* Import */
        static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
        static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
        #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
        static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
        #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
        #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Print */
        #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
        static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* PrintOne */
        #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
        static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
        #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
        static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
        #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* FunctionImport */
        #ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
        static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
