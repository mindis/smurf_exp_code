/* Generated by Cython 0.23.4 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "PositionIndex.h"
        ], 
        "extra_compile_args": [
            "-O3", 
            "-ffast-math", 
            "-march=native", 
            "-fopenmp"
        ], 
        "extra_link_args": [
            "-fopenmp"
        ], 
        "language": "c++"
    }
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_23_4"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
#define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__py_stringsimjoin__apply_rf__jaccard_join
#define __PYX_HAVE_API__py_stringsimjoin__apply_rf__jaccard_join
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include "math.h"
#include <set>
#include "string.h"
#include <string>
#include <map>
#include "PositionIndex.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "py_stringsimjoin/apply_rf/jaccard_join.pyx",
  "py_stringsimjoin/apply_rf/stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1;

/* "py_stringsimjoin/apply_rf/jaccard_join.pyx":169
 *         double threshold
 * 
 * cdef class PpositionIndex1:             # <<<<<<<<<<<<<<
 *     cdef readonly omap[int, vector[pair[int, int]]] index
 *     cdef readonly int min_len, max_len
 */
struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 {
  PyObject_HEAD
  std::map<int,std::vector<std::pair<int,int> > >  index;
  int min_len;
  int max_len;
  std::vector<int>  size_vector;
  double threshold;
};


/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#include <new>

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'py_stringsimjoin.apply_rf.jaccard_join' */
static PyTypeObject *__pyx_ptype_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 = 0;
static std::vector<std::pair<int,int> >  __pyx_f_16py_stringsimjoin_8apply_rf_12jaccard_join_jaccard_join(std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, double, int __pyx_skip_dispatch); /*proto*/
static std::vector<std::pair<int,int> >  __pyx_f_16py_stringsimjoin_8apply_rf_12jaccard_join_jjaccard_join1(std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  const &, double, int __pyx_skip_dispatch); /*proto*/
static void __pyx_f_16py_stringsimjoin_8apply_rf_12jaccard_join_fun(std::pair<int,int> , std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, double, PositionIndex &, std::vector<std::pair<int,int> >  &); /*proto*/
static double __pyx_f_16py_stringsimjoin_8apply_rf_12jaccard_join_jaccard(std::vector<int>  const &, std::vector<int>  const &); /*proto*/
static PyObject *__pyx_convert_pair_to_py_int____int(std::pair<int,int>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(const std::vector<std::pair<int,int> >  &); /*proto*/
static PyObject *__pyx_convert_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_pair_3c_int_2c_int_3e____3e___(std::map<int,std::vector<std::pair<int,int> > >  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &); /*proto*/
static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *); /*proto*/
static std::vector<std::vector<int> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "py_stringsimjoin.apply_rf.jaccard_join"
int __pyx_module_is_main_py_stringsimjoin__apply_rf__jaccard_join = 0;

/* Implementation of 'py_stringsimjoin.apply_rf.jaccard_join' */
static PyObject *__pyx_builtin_range;
static char __pyx_k_k[] = "k : ";
static char __pyx_k_end[] = "end";
static char __pyx_k_file[] = "file";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_print[] = "print";
static char __pyx_k_range[] = "range";
static char __pyx_k_l_size[] = "l size. : ";
static char __pyx_k_r_size[] = " , r size : ";
static char __pyx_k_ltokens[] = "ltokens";
static char __pyx_k_rtokens[] = "rtokens";
static char __pyx_k_part_size[] = "part size : ";
static char __pyx_k_threshold[] = "threshold";
static char __pyx_k_token_vectors[] = "token_vectors";
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_kp_s_k;
static PyObject *__pyx_kp_s_l_size;
static PyObject *__pyx_n_s_ltokens;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_kp_s_part_size;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_kp_s_r_size;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rtokens;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_threshold;
static PyObject *__pyx_n_s_token_vectors;
static PyObject *__pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_jjaccard_join1(CYTHON_UNUSED PyObject *__pyx_self, std::vector<std::vector<int> >  __pyx_v_ltokens, std::vector<std::vector<int> >  __pyx_v_rtokens, double __pyx_v_threshold); /* proto */
static PyObject *__pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_2jaccard_join(CYTHON_UNUSED PyObject *__pyx_self, std::vector<std::vector<int> >  __pyx_v_ltokens, std::vector<std::vector<int> >  __pyx_v_rtokens, double __pyx_v_threshold); /* proto */
static int __pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1___init__(struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 *__pyx_v_self, std::vector<std::vector<int> >  __pyx_v_token_vectors, double __pyx_v_threshold); /* proto */
static PyObject *__pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_5index___get__(struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_7min_len___get__(struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_7max_len___get__(struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_11size_vector___get__(struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_9threshold___get__(struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/

/* "py_stringsimjoin/apply_rf/jaccard_join.pyx":13
 * 
 * 
 * cpdef vector[pair[int, int]] jjaccard_join1(vector[vector[int]]& ltokens, const vector[vector[int]]& rtokens,             # <<<<<<<<<<<<<<
 *                    double threshold):
 *     print 'l size. : ', ltokens.size(), ' , r size : ', rtokens.size()
 */

static PyObject *__pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_1jjaccard_join1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static std::vector<std::pair<int,int> >  __pyx_f_16py_stringsimjoin_8apply_rf_12jaccard_join_jjaccard_join1(std::vector<std::vector<int> >  &__pyx_v_ltokens, std::vector<std::vector<int> >  const &__pyx_v_rtokens, double __pyx_v_threshold, CYTHON_UNUSED int __pyx_skip_dispatch) {
  std::vector<std::pair<int,int> >  __pyx_v_output_pairs;
  std::map<int,int>  __pyx_v_candidate_overlap;
  std::map<int,int>  __pyx_v_overlap_threshold_cache;
  std::vector<std::pair<int,int> >  __pyx_v_candidates;
  std::pair<int,int>  __pyx_v_cand;
  std::pair<int,int>  __pyx_v_entry;
  int __pyx_v_k;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_m;
  CYTHON_UNUSED int __pyx_v_n;
  int __pyx_v_prefix_length;
  int __pyx_v_cand_num_tokens;
  int __pyx_v_current_overlap;
  int __pyx_v_overlap_upper_bound;
  int __pyx_v_size;
  int __pyx_v_size_lower_bound;
  int __pyx_v_size_upper_bound;
  std::vector<int>  __pyx_v_tokens;
  PositionIndex __pyx_v_index;
  double __pyx_v_sim_score;
  std::vector<std::pair<int,int> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  long __pyx_t_7;
  int __pyx_t_8;
  double __pyx_t_9;
  int __pyx_t_10;
  std::vector<std::pair<int,int> > ::iterator __pyx_t_11;
  std::pair<int,int>  __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  std::map<int,int> ::iterator __pyx_t_15;
  std::pair<int,int>  __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("jjaccard_join1", 0);

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":15
 * cpdef vector[pair[int, int]] jjaccard_join1(vector[vector[int]]& ltokens, const vector[vector[int]]& rtokens,
 *                    double threshold):
 *     print 'l size. : ', ltokens.size(), ' , r size : ', rtokens.size()             # <<<<<<<<<<<<<<
 *     cdef vector[pair[int, int]] output_pairs
 *     cdef omap[int, int] candidate_overlap, overlap_threshold_cache
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_ltokens.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_rtokens.size()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_s_l_size);
  __Pyx_GIVEREF(__pyx_kp_s_l_size);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_l_size);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_INCREF(__pyx_kp_s_r_size);
  __Pyx_GIVEREF(__pyx_kp_s_r_size);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_s_r_size);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  if (__Pyx_Print(0, __pyx_t_3, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":20
 *     cdef vector[pair[int, int]] candidates
 *     cdef pair[int, int] cand, entry
 *     cdef int k=0, i, j, m, n=rtokens.size(), prefix_length, cand_num_tokens, current_overlap, overlap_upper_bound             # <<<<<<<<<<<<<<
 *     cdef int size, size_lower_bound, size_upper_bound
 *     cdef vector[int] tokens
 */
  __pyx_v_k = 0;
  __pyx_v_n = __pyx_v_rtokens.size();

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":25
 *     cdef PositionIndex index
 *     cdef double sim_score
 *     index = PositionIndex(ltokens, threshold)             # <<<<<<<<<<<<<<
 * 
 *     for i in prange(n, nogil=True):
 */
  __pyx_v_index = PositionIndex(__pyx_v_ltokens, __pyx_v_threshold);

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":27
 *     index = PositionIndex(ltokens, threshold)
 * 
 *     for i in prange(n, nogil=True):             # <<<<<<<<<<<<<<
 *         tokens = rtokens[i]
 *         m = tokens.size()
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {
        __pyx_t_4 = __pyx_v_n;
        if (1 == 0) abort();
        {
            int __pyx_parallel_temp0 = 0xbad0bad0;
            int __pyx_parallel_temp1 = 0xbad0bad0;
            int __pyx_parallel_temp2 = 0xbad0bad0;
            int __pyx_parallel_temp3 = 0xbad0bad0;
            int __pyx_parallel_temp4 = 0xbad0bad0;
            std::pair<int,int>  __pyx_parallel_temp5;
            int __pyx_parallel_temp6 = 0xbad0bad0;
            int __pyx_parallel_temp7 = 0xbad0bad0;
            int __pyx_parallel_temp8 = 0xbad0bad0;
            std::pair<int,int>  __pyx_parallel_temp9;
            std::vector<int>  __pyx_parallel_temp10;
            int __pyx_parallel_temp11 = 0xbad0bad0;
            std::vector<std::pair<int,int> >  __pyx_parallel_temp12;
            int __pyx_parallel_temp13 = 0xbad0bad0;
            double __pyx_parallel_temp14 = __PYX_NAN();
            int __pyx_parallel_temp15 = 0xbad0bad0;
            const char *__pyx_parallel_filename = NULL; int __pyx_parallel_lineno = 0, __pyx_parallel_clineno = 0;
            PyObject *__pyx_parallel_exc_type = NULL, *__pyx_parallel_exc_value = NULL, *__pyx_parallel_exc_tb = NULL;
            int __pyx_parallel_why;
            __pyx_parallel_why = 0;
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_6 = (__pyx_t_4 - 0) / 1;
            if (__pyx_t_6 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel private(__pyx_t_12, __pyx_t_7, __pyx_t_10, __pyx_t_13, __pyx_t_16, __pyx_t_15, __pyx_t_8, __pyx_t_9, __pyx_t_11, __pyx_t_14) private(__pyx_filename, __pyx_lineno, __pyx_clineno) shared(__pyx_parallel_why, __pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb)
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                    #endif
                    Py_BEGIN_ALLOW_THREADS
                    #endif /* _OPENMP */
                    #ifdef _OPENMP
                    #pragma omp for lastprivate(__pyx_v_current_overlap) lastprivate(__pyx_v_prefix_length) lastprivate(__pyx_v_overlap_upper_bound) lastprivate(__pyx_v_m) lastprivate(__pyx_v_size_lower_bound) lastprivate(__pyx_v_cand) lastprivate(__pyx_v_size_upper_bound) lastprivate(__pyx_v_j) lastprivate(__pyx_v_size) lastprivate(__pyx_v_entry) lastprivate(__pyx_v_tokens) firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) lastprivate(__pyx_v_candidates) lastprivate(__pyx_v_cand_num_tokens) lastprivate(__pyx_v_sim_score) lastprivate(__pyx_v_k)
                    #endif /* _OPENMP */
                    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_6; __pyx_t_5++){
                        if (__pyx_parallel_why < 2)
                        {
                            __pyx_v_i = 0 + 1 * __pyx_t_5;
                            /* Initialize private variables to invalid values */
                            __pyx_v_current_overlap = ((int)0xbad0bad0);
                            __pyx_v_prefix_length = ((int)0xbad0bad0);
                            __pyx_v_overlap_upper_bound = ((int)0xbad0bad0);
                            __pyx_v_m = ((int)0xbad0bad0);
                            __pyx_v_size_lower_bound = ((int)0xbad0bad0);
                            __pyx_v_size_upper_bound = ((int)0xbad0bad0);
                            __pyx_v_j = ((int)0xbad0bad0);
                            __pyx_v_size = ((int)0xbad0bad0);
                            __pyx_v_cand_num_tokens = ((int)0xbad0bad0);
                            __pyx_v_sim_score = ((double)__PYX_NAN());
                            __pyx_v_k = ((int)0xbad0bad0);

                            /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":28
 * 
 *     for i in prange(n, nogil=True):
 *         tokens = rtokens[i]             # <<<<<<<<<<<<<<
 *         m = tokens.size()
 *         prefix_length = <int>(m - ceil(threshold * m) + 1.0)
 */
                            __pyx_v_tokens = (__pyx_v_rtokens[__pyx_v_i]);

                            /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":29
 *     for i in prange(n, nogil=True):
 *         tokens = rtokens[i]
 *         m = tokens.size()             # <<<<<<<<<<<<<<
 *         prefix_length = <int>(m - ceil(threshold * m) + 1.0)
 *         size_lower_bound = <int>ceil(threshold * m)
 */
                            __pyx_v_m = __pyx_v_tokens.size();

                            /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":30
 *         tokens = rtokens[i]
 *         m = tokens.size()
 *         prefix_length = <int>(m - ceil(threshold * m) + 1.0)             # <<<<<<<<<<<<<<
 *         size_lower_bound = <int>ceil(threshold * m)
 *         size_upper_bound = <int>floor(m / threshold)
 */
                            __pyx_v_prefix_length = ((int)((__pyx_v_m - ceil((__pyx_v_threshold * __pyx_v_m))) + 1.0));

                            /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":31
 *         m = tokens.size()
 *         prefix_length = <int>(m - ceil(threshold * m) + 1.0)
 *         size_lower_bound = <int>ceil(threshold * m)             # <<<<<<<<<<<<<<
 *         size_upper_bound = <int>floor(m / threshold)
 * 
 */
                            __pyx_v_size_lower_bound = ((int)ceil((__pyx_v_threshold * __pyx_v_m)));

                            /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":32
 *         prefix_length = <int>(m - ceil(threshold * m) + 1.0)
 *         size_lower_bound = <int>ceil(threshold * m)
 *         size_upper_bound = <int>floor(m / threshold)             # <<<<<<<<<<<<<<
 * 
 *         for size in range(size_lower_bound, size_upper_bound + 1):
 */
                            if (unlikely(__pyx_v_threshold == 0)) {
                              #ifdef WITH_THREAD
                              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                              #endif
                              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                              #ifdef WITH_THREAD
                              PyGILState_Release(__pyx_gilstate_save);
                              #endif
                              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
                            }
                            __pyx_v_size_upper_bound = ((int)floor((__pyx_v_m / __pyx_v_threshold)));

                            /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":34
 *         size_upper_bound = <int>floor(m / threshold)
 * 
 *         for size in range(size_lower_bound, size_upper_bound + 1):             # <<<<<<<<<<<<<<
 *             overlap_threshold_cache[size] = <int>ceil((threshold / (1 + threshold)) * (size + m))
 * 
 */
                            __pyx_t_7 = (__pyx_v_size_upper_bound + 1);
                            for (__pyx_t_8 = __pyx_v_size_lower_bound; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
                              __pyx_v_size = __pyx_t_8;

                              /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":35
 * 
 *         for size in range(size_lower_bound, size_upper_bound + 1):
 *             overlap_threshold_cache[size] = <int>ceil((threshold / (1 + threshold)) * (size + m))             # <<<<<<<<<<<<<<
 * 
 *         for j in range(prefix_length):
 */
                              __pyx_t_9 = (1.0 + __pyx_v_threshold);
                              if (unlikely(__pyx_t_9 == 0)) {
                                #ifdef WITH_THREAD
                                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                                #endif
                                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                                #ifdef WITH_THREAD
                                PyGILState_Release(__pyx_gilstate_save);
                                #endif
                                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
                              }
                              (__pyx_v_overlap_threshold_cache[__pyx_v_size]) = ((int)ceil(((__pyx_v_threshold / __pyx_t_9) * (__pyx_v_size + __pyx_v_m))));
                            }

                            /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":37
 *             overlap_threshold_cache[size] = <int>ceil((threshold / (1 + threshold)) * (size + m))
 * 
 *         for j in range(prefix_length):             # <<<<<<<<<<<<<<
 *             candidates = index.index[tokens[j]]
 *             for cand in candidates:
 */
                            __pyx_t_8 = __pyx_v_prefix_length;
                            for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_8; __pyx_t_10+=1) {
                              __pyx_v_j = __pyx_t_10;

                              /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":38
 * 
 *         for j in range(prefix_length):
 *             candidates = index.index[tokens[j]]             # <<<<<<<<<<<<<<
 *             for cand in candidates:
 *                 current_overlap = candidate_overlap[cand.first]
 */
                              __pyx_v_candidates = (__pyx_v_index.index[(__pyx_v_tokens[__pyx_v_j])]);

                              /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":39
 *         for j in range(prefix_length):
 *             candidates = index.index[tokens[j]]
 *             for cand in candidates:             # <<<<<<<<<<<<<<
 *                 current_overlap = candidate_overlap[cand.first]
 *                 if current_overlap != -1:
 */
                              __pyx_t_11 = __pyx_v_candidates.begin();
                              for (;;) {
                                if (!(__pyx_t_11 != __pyx_v_candidates.end())) break;
                                __pyx_t_12 = *__pyx_t_11;
                                ++__pyx_t_11;
                                __pyx_v_cand = __pyx_t_12;

                                /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":40
 *             candidates = index.index[tokens[j]]
 *             for cand in candidates:
 *                 current_overlap = candidate_overlap[cand.first]             # <<<<<<<<<<<<<<
 *                 if current_overlap != -1:
 *                     cand_num_tokens = index.size_vector[cand.first]
 */
                                __pyx_v_current_overlap = (__pyx_v_candidate_overlap[__pyx_v_cand.first]);

                                /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":41
 *             for cand in candidates:
 *                 current_overlap = candidate_overlap[cand.first]
 *                 if current_overlap != -1:             # <<<<<<<<<<<<<<
 *                     cand_num_tokens = index.size_vector[cand.first]
 * 
 */
                                __pyx_t_13 = ((__pyx_v_current_overlap != -1L) != 0);
                                if (__pyx_t_13) {

                                  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":42
 *                 current_overlap = candidate_overlap[cand.first]
 *                 if current_overlap != -1:
 *                     cand_num_tokens = index.size_vector[cand.first]             # <<<<<<<<<<<<<<
 * 
 *                     # only consider candidates satisfying the size filter
 */
                                  __pyx_v_cand_num_tokens = (__pyx_v_index.size_vector[__pyx_v_cand.first]);

                                  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":46
 *                     # only consider candidates satisfying the size filter
 *                     # condition.
 *                     if size_lower_bound <= cand_num_tokens <= size_upper_bound:             # <<<<<<<<<<<<<<
 * 
 *                         if m - j <= cand_num_tokens - cand.second:
 */
                                  __pyx_t_13 = (__pyx_v_size_lower_bound <= __pyx_v_cand_num_tokens);
                                  if (__pyx_t_13) {
                                    __pyx_t_13 = (__pyx_v_cand_num_tokens <= __pyx_v_size_upper_bound);
                                  }
                                  __pyx_t_14 = (__pyx_t_13 != 0);
                                  if (__pyx_t_14) {

                                    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":48
 *                     if size_lower_bound <= cand_num_tokens <= size_upper_bound:
 * 
 *                         if m - j <= cand_num_tokens - cand.second:             # <<<<<<<<<<<<<<
 *                             overlap_upper_bound = m - j
 *                         else:
 */
                                    __pyx_t_14 = (((__pyx_v_m - __pyx_v_j) <= (__pyx_v_cand_num_tokens - __pyx_v_cand.second)) != 0);
                                    if (__pyx_t_14) {

                                      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":49
 * 
 *                         if m - j <= cand_num_tokens - cand.second:
 *                             overlap_upper_bound = m - j             # <<<<<<<<<<<<<<
 *                         else:
 *                             overlap_upper_bound = cand_num_tokens - cand.second
 */
                                      __pyx_v_overlap_upper_bound = (__pyx_v_m - __pyx_v_j);

                                      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":48
 *                     if size_lower_bound <= cand_num_tokens <= size_upper_bound:
 * 
 *                         if m - j <= cand_num_tokens - cand.second:             # <<<<<<<<<<<<<<
 *                             overlap_upper_bound = m - j
 *                         else:
 */
                                      goto __pyx_L18;
                                    }

                                    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":51
 *                             overlap_upper_bound = m - j
 *                         else:
 *                             overlap_upper_bound = cand_num_tokens - cand.second             # <<<<<<<<<<<<<<
 * 
 *                         # only consider candidates for which the overlap upper
 */
                                    /*else*/ {
                                      __pyx_v_overlap_upper_bound = (__pyx_v_cand_num_tokens - __pyx_v_cand.second);
                                    }
                                    __pyx_L18:;

                                    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":55
 *                         # only consider candidates for which the overlap upper
 *                         # bound is at least the required overlap.
 *                         if (current_overlap + overlap_upper_bound >=             # <<<<<<<<<<<<<<
 *                                 overlap_threshold_cache[cand_num_tokens]):
 *                             candidate_overlap[cand.first] = current_overlap + 1
 */
                                    __pyx_t_14 = (((__pyx_v_current_overlap + __pyx_v_overlap_upper_bound) >= (__pyx_v_overlap_threshold_cache[__pyx_v_cand_num_tokens])) != 0);
                                    if (__pyx_t_14) {

                                      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":57
 *                         if (current_overlap + overlap_upper_bound >=
 *                                 overlap_threshold_cache[cand_num_tokens]):
 *                             candidate_overlap[cand.first] = current_overlap + 1             # <<<<<<<<<<<<<<
 *                         else:
 *                             candidate_overlap[cand.first] = -1
 */
                                      (__pyx_v_candidate_overlap[__pyx_v_cand.first]) = (__pyx_v_current_overlap + 1);

                                      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":55
 *                         # only consider candidates for which the overlap upper
 *                         # bound is at least the required overlap.
 *                         if (current_overlap + overlap_upper_bound >=             # <<<<<<<<<<<<<<
 *                                 overlap_threshold_cache[cand_num_tokens]):
 *                             candidate_overlap[cand.first] = current_overlap + 1
 */
                                      goto __pyx_L19;
                                    }

                                    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":59
 *                             candidate_overlap[cand.first] = current_overlap + 1
 *                         else:
 *                             candidate_overlap[cand.first] = -1             # <<<<<<<<<<<<<<
 * #        print i, candidate_overlap.size()
 *         for entry in candidate_overlap:
 */
                                    /*else*/ {
                                      (__pyx_v_candidate_overlap[__pyx_v_cand.first]) = -1;
                                    }
                                    __pyx_L19:;

                                    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":46
 *                     # only consider candidates satisfying the size filter
 *                     # condition.
 *                     if size_lower_bound <= cand_num_tokens <= size_upper_bound:             # <<<<<<<<<<<<<<
 * 
 *                         if m - j <= cand_num_tokens - cand.second:
 */
                                  }

                                  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":41
 *             for cand in candidates:
 *                 current_overlap = candidate_overlap[cand.first]
 *                 if current_overlap != -1:             # <<<<<<<<<<<<<<
 *                     cand_num_tokens = index.size_vector[cand.first]
 * 
 */
                                }

                                /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":39
 *         for j in range(prefix_length):
 *             candidates = index.index[tokens[j]]
 *             for cand in candidates:             # <<<<<<<<<<<<<<
 *                 current_overlap = candidate_overlap[cand.first]
 *                 if current_overlap != -1:
 */
                              }
                            }

                            /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":61
 *                             candidate_overlap[cand.first] = -1
 * #        print i, candidate_overlap.size()
 *         for entry in candidate_overlap:             # <<<<<<<<<<<<<<
 *             if entry.second > 0:
 *                 k += 1
 */
                            __pyx_t_15 = __pyx_v_candidate_overlap.begin();
                            for (;;) {
                              if (!(__pyx_t_15 != __pyx_v_candidate_overlap.end())) break;
                              __pyx_t_16 = *__pyx_t_15;
                              ++__pyx_t_15;
                              __pyx_v_entry = __pyx_t_16;

                              /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":62
 * #        print i, candidate_overlap.size()
 *         for entry in candidate_overlap:
 *             if entry.second > 0:             # <<<<<<<<<<<<<<
 *                 k += 1
 *                 sim_score = jaccard(ltokens[entry.first], rtokens[i])
 */
                              __pyx_t_14 = ((__pyx_v_entry.second > 0) != 0);
                              if (__pyx_t_14) {

                                /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":63
 *         for entry in candidate_overlap:
 *             if entry.second > 0:
 *                 k += 1             # <<<<<<<<<<<<<<
 *                 sim_score = jaccard(ltokens[entry.first], rtokens[i])
 *                 #print ltokens[entry.first], rtokens[i], entry.second, sim_score
 */
                                __pyx_v_k = (__pyx_v_k + 1);

                                /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":64
 *             if entry.second > 0:
 *                 k += 1
 *                 sim_score = jaccard(ltokens[entry.first], rtokens[i])             # <<<<<<<<<<<<<<
 *                 #print ltokens[entry.first], rtokens[i], entry.second, sim_score
 *                 if sim_score > threshold:
 */
                                __pyx_v_sim_score = __pyx_f_16py_stringsimjoin_8apply_rf_12jaccard_join_jaccard((__pyx_v_ltokens[__pyx_v_entry.first]), (__pyx_v_rtokens[__pyx_v_i]));

                                /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":66
 *                 sim_score = jaccard(ltokens[entry.first], rtokens[i])
 *                 #print ltokens[entry.first], rtokens[i], entry.second, sim_score
 *                 if sim_score > threshold:             # <<<<<<<<<<<<<<
 *                     k = k - 1 + 1
 * #                    output_pairs.push_back(pair[int, int](entry.first, i))
 */
                                __pyx_t_14 = ((__pyx_v_sim_score > __pyx_v_threshold) != 0);
                                if (__pyx_t_14) {

                                  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":67
 *                 #print ltokens[entry.first], rtokens[i], entry.second, sim_score
 *                 if sim_score > threshold:
 *                     k = k - 1 + 1             # <<<<<<<<<<<<<<
 * #                    output_pairs.push_back(pair[int, int](entry.first, i))
 * 
 */
                                  __pyx_v_k = ((__pyx_v_k - 1) + 1);

                                  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":66
 *                 sim_score = jaccard(ltokens[entry.first], rtokens[i])
 *                 #print ltokens[entry.first], rtokens[i], entry.second, sim_score
 *                 if sim_score > threshold:             # <<<<<<<<<<<<<<
 *                     k = k - 1 + 1
 * #                    output_pairs.push_back(pair[int, int](entry.first, i))
 */
                                }

                                /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":62
 * #        print i, candidate_overlap.size()
 *         for entry in candidate_overlap:
 *             if entry.second > 0:             # <<<<<<<<<<<<<<
 *                 k += 1
 *                 sim_score = jaccard(ltokens[entry.first], rtokens[i])
 */
                              }

                              /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":61
 *                             candidate_overlap[cand.first] = -1
 * #        print i, candidate_overlap.size()
 *         for entry in candidate_overlap:             # <<<<<<<<<<<<<<
 *             if entry.second > 0:
 *                 k += 1
 */
                            }

                            /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":70
 * #                    output_pairs.push_back(pair[int, int](entry.first, i))
 * 
 *         candidate_overlap.clear()             # <<<<<<<<<<<<<<
 *         overlap_threshold_cache.clear()
 *     print 'k : ', k
 */
                            __pyx_v_candidate_overlap.clear();

                            /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":71
 * 
 *         candidate_overlap.clear()
 *         overlap_threshold_cache.clear()             # <<<<<<<<<<<<<<
 *     print 'k : ', k
 *     return output_pairs
 */
                            __pyx_v_overlap_threshold_cache.clear();
                            goto __pyx_L25;
                            __pyx_L8_error:;
                            {
                                #ifdef WITH_THREAD
                                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                                #endif
                                #ifdef _OPENMP
                                #pragma omp flush(__pyx_parallel_exc_type)
                                #endif /* _OPENMP */
                                if (!__pyx_parallel_exc_type) {
                                  __Pyx_ErrFetch(&__pyx_parallel_exc_type, &__pyx_parallel_exc_value, &__pyx_parallel_exc_tb);
                                  __pyx_parallel_filename = __pyx_filename; __pyx_parallel_lineno = __pyx_lineno; __pyx_parallel_clineno = __pyx_clineno;
                                  __Pyx_GOTREF(__pyx_parallel_exc_type);
                                }
                                #ifdef WITH_THREAD
                                PyGILState_Release(__pyx_gilstate_save);
                                #endif
                            }
                            __pyx_parallel_why = 4;
                            goto __pyx_L24;
                            __pyx_L24:;
                            #ifdef _OPENMP
                            #pragma omp critical(__pyx_parallel_lastprivates0)
                            #endif /* _OPENMP */
                            {
                                __pyx_parallel_temp0 = __pyx_v_current_overlap;
                                __pyx_parallel_temp1 = __pyx_v_prefix_length;
                                __pyx_parallel_temp2 = __pyx_v_overlap_upper_bound;
                                __pyx_parallel_temp3 = __pyx_v_m;
                                __pyx_parallel_temp4 = __pyx_v_size_lower_bound;
                                __pyx_parallel_temp5 = __pyx_v_cand;
                                __pyx_parallel_temp6 = __pyx_v_size_upper_bound;
                                __pyx_parallel_temp7 = __pyx_v_j;
                                __pyx_parallel_temp8 = __pyx_v_size;
                                __pyx_parallel_temp9 = __pyx_v_entry;
                                __pyx_parallel_temp10 = __pyx_v_tokens;
                                __pyx_parallel_temp11 = __pyx_v_i;
                                __pyx_parallel_temp12 = __pyx_v_candidates;
                                __pyx_parallel_temp13 = __pyx_v_cand_num_tokens;
                                __pyx_parallel_temp14 = __pyx_v_sim_score;
                                __pyx_parallel_temp15 = __pyx_v_k;
                            }
                            __pyx_L25:;
                            #ifdef _OPENMP
                            #pragma omp flush(__pyx_parallel_why)
                            #endif /* _OPENMP */
                        }
                    }
                    #ifdef _OPENMP
                    Py_END_ALLOW_THREADS
                    #else
{
#ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                    #endif
                    #endif /* _OPENMP */
                    /* Clean up any temporaries */
                    #ifdef WITH_THREAD
                    PyGILState_Release(__pyx_gilstate_save);
                    #endif
                    #ifndef _OPENMP
}
#endif /* _OPENMP */
                }
            }
            if (__pyx_parallel_exc_type) {
              /* This may have been overridden by a continue, break or return in another thread. Prefer the error. */
              __pyx_parallel_why = 4;
            }
            if (__pyx_parallel_why) {
              __pyx_v_current_overlap = __pyx_parallel_temp0;
              __pyx_v_prefix_length = __pyx_parallel_temp1;
              __pyx_v_overlap_upper_bound = __pyx_parallel_temp2;
              __pyx_v_m = __pyx_parallel_temp3;
              __pyx_v_size_lower_bound = __pyx_parallel_temp4;
              __pyx_v_cand = __pyx_parallel_temp5;
              __pyx_v_size_upper_bound = __pyx_parallel_temp6;
              __pyx_v_j = __pyx_parallel_temp7;
              __pyx_v_size = __pyx_parallel_temp8;
              __pyx_v_entry = __pyx_parallel_temp9;
              __pyx_v_tokens = __pyx_parallel_temp10;
              __pyx_v_i = __pyx_parallel_temp11;
              __pyx_v_candidates = __pyx_parallel_temp12;
              __pyx_v_cand_num_tokens = __pyx_parallel_temp13;
              __pyx_v_sim_score = __pyx_parallel_temp14;
              __pyx_v_k = __pyx_parallel_temp15;
              switch (__pyx_parallel_why) {
                    case 3: goto __pyx_L3_return;
                    case 4:
                {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                    #endif
                    __Pyx_GIVEREF(__pyx_parallel_exc_type);
                    __Pyx_ErrRestore(__pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb);
                    __pyx_filename = __pyx_parallel_filename; __pyx_lineno = __pyx_parallel_lineno; __pyx_clineno = __pyx_parallel_clineno;
                    #ifdef WITH_THREAD
                    PyGILState_Release(__pyx_gilstate_save);
                    #endif
                }
                goto __pyx_L4_error;
              }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":27
 *     index = PositionIndex(ltokens, threshold)
 * 
 *     for i in prange(n, nogil=True):             # <<<<<<<<<<<<<<
 *         tokens = rtokens[i]
 *         m = tokens.size()
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L3_return: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L0;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":72
 *         candidate_overlap.clear()
 *         overlap_threshold_cache.clear()
 *     print 'k : ', k             # <<<<<<<<<<<<<<
 *     return output_pairs
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_k); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_s_k);
  __Pyx_GIVEREF(__pyx_kp_s_k);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_k);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  if (__Pyx_Print(0, __pyx_t_2, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":73
 *         overlap_threshold_cache.clear()
 *     print 'k : ', k
 *     return output_pairs             # <<<<<<<<<<<<<<
 * 
 * cpdef vector[pair[int, int]] jaccard_join(vector[vector[int]]& ltokens, vector[vector[int]]& rtokens,
 */
  __pyx_r = __pyx_v_output_pairs;
  goto __pyx_L0;

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":13
 * 
 * 
 * cpdef vector[pair[int, int]] jjaccard_join1(vector[vector[int]]& ltokens, const vector[vector[int]]& rtokens,             # <<<<<<<<<<<<<<
 *                    double threshold):
 *     print 'l size. : ', ltokens.size(), ' , r size : ', rtokens.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("py_stringsimjoin.apply_rf.jaccard_join.jjaccard_join1", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_1jjaccard_join1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_1jjaccard_join1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::vector<std::vector<int> >  __pyx_v_ltokens;
  std::vector<std::vector<int> >  __pyx_v_rtokens;
  double __pyx_v_threshold;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("jjaccard_join1 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ltokens,&__pyx_n_s_rtokens,&__pyx_n_s_threshold,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ltokens)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rtokens)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("jjaccard_join1", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("jjaccard_join1", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "jjaccard_join1") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_ltokens = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(values[0]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rtokens = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(values[1]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_threshold = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_threshold == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("jjaccard_join1", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_stringsimjoin.apply_rf.jaccard_join.jjaccard_join1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_jjaccard_join1(__pyx_self, __pyx_v_ltokens, __pyx_v_rtokens, __pyx_v_threshold);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_jjaccard_join1(CYTHON_UNUSED PyObject *__pyx_self, std::vector<std::vector<int> >  __pyx_v_ltokens, std::vector<std::vector<int> >  __pyx_v_rtokens, double __pyx_v_threshold) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("jjaccard_join1", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(__pyx_f_16py_stringsimjoin_8apply_rf_12jaccard_join_jjaccard_join1(__pyx_v_ltokens, __pyx_v_rtokens, __pyx_v_threshold, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_stringsimjoin.apply_rf.jaccard_join.jjaccard_join1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_stringsimjoin/apply_rf/jaccard_join.pyx":75
 *     return output_pairs
 * 
 * cpdef vector[pair[int, int]] jaccard_join(vector[vector[int]]& ltokens, vector[vector[int]]& rtokens,             # <<<<<<<<<<<<<<
 *                    double threshold):
 *     print 'l size. : ', ltokens.size(), ' , r size : ', rtokens.size()
 */

static PyObject *__pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_3jaccard_join(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static std::vector<std::pair<int,int> >  __pyx_f_16py_stringsimjoin_8apply_rf_12jaccard_join_jaccard_join(std::vector<std::vector<int> >  &__pyx_v_ltokens, std::vector<std::vector<int> >  &__pyx_v_rtokens, double __pyx_v_threshold, CYTHON_UNUSED int __pyx_skip_dispatch) {
  std::vector<std::vector<std::pair<int,int> > >  __pyx_v_output_pairs;
  std::vector<std::pair<int,int> >  __pyx_v_partitions;
  std::vector<std::pair<int,int> >  __pyx_v_final_output_pairs;
  std::vector<std::pair<int,int> >  __pyx_v_part_pairs;
  int __pyx_v_i;
  int __pyx_v_n;
  int __pyx_v_ncpus;
  int __pyx_v_partition_size;
  int __pyx_v_start;
  int __pyx_v_end;
  PositionIndex __pyx_v_index;
  std::vector<std::pair<int,int> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  std::pair<int,int>  __pyx_t_8;
  std::vector<std::pair<int,int> >  __pyx_t_9;
  int __pyx_t_10;
  std::vector<std::vector<std::pair<int,int> > > ::iterator __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("jaccard_join", 0);

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":77
 * cpdef vector[pair[int, int]] jaccard_join(vector[vector[int]]& ltokens, vector[vector[int]]& rtokens,
 *                    double threshold):
 *     print 'l size. : ', ltokens.size(), ' , r size : ', rtokens.size()             # <<<<<<<<<<<<<<
 *     cdef vector[vector[pair[int, int]]] output_pairs
 *     cdef vector[pair[int, int]] partitions, final_output_pairs, part_pairs
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_ltokens.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_rtokens.size()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_s_l_size);
  __Pyx_GIVEREF(__pyx_kp_s_l_size);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_l_size);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_INCREF(__pyx_kp_s_r_size);
  __Pyx_GIVEREF(__pyx_kp_s_r_size);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_s_r_size);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  if (__Pyx_Print(0, __pyx_t_3, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":80
 *     cdef vector[vector[pair[int, int]]] output_pairs
 *     cdef vector[pair[int, int]] partitions, final_output_pairs, part_pairs
 *     cdef int i, n=rtokens.size(), ncpus=4, partition_size, start=0, end             # <<<<<<<<<<<<<<
 *     cdef PositionIndex index
 *     index = PositionIndex(ltokens, threshold)
 */
  __pyx_v_n = __pyx_v_rtokens.size();
  __pyx_v_ncpus = 4;
  __pyx_v_start = 0;

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":82
 *     cdef int i, n=rtokens.size(), ncpus=4, partition_size, start=0, end
 *     cdef PositionIndex index
 *     index = PositionIndex(ltokens, threshold)             # <<<<<<<<<<<<<<
 * 
 *     partition_size = <int>(<float> n / <float> ncpus)
 */
  __pyx_v_index = PositionIndex(__pyx_v_ltokens, __pyx_v_threshold);

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":84
 *     index = PositionIndex(ltokens, threshold)
 * 
 *     partition_size = <int>(<float> n / <float> ncpus)             # <<<<<<<<<<<<<<
 *     print 'part size : ', partition_size
 *     for i in range(ncpus):
 */
  if (unlikely(((float)__pyx_v_ncpus) == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_partition_size = ((int)(((float)__pyx_v_n) / ((float)__pyx_v_ncpus)));

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":85
 * 
 *     partition_size = <int>(<float> n / <float> ncpus)
 *     print 'part size : ', partition_size             # <<<<<<<<<<<<<<
 *     for i in range(ncpus):
 *         end = start + partition_size
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_partition_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_s_part_size);
  __Pyx_GIVEREF(__pyx_kp_s_part_size);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_part_size);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  if (__Pyx_Print(0, __pyx_t_2, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":86
 *     partition_size = <int>(<float> n / <float> ncpus)
 *     print 'part size : ', partition_size
 *     for i in range(ncpus):             # <<<<<<<<<<<<<<
 *         end = start + partition_size
 *         if end > n or i == ncpus - 1:
 */
  __pyx_t_4 = __pyx_v_ncpus;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":87
 *     print 'part size : ', partition_size
 *     for i in range(ncpus):
 *         end = start + partition_size             # <<<<<<<<<<<<<<
 *         if end > n or i == ncpus - 1:
 *             end = n
 */
    __pyx_v_end = (__pyx_v_start + __pyx_v_partition_size);

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":88
 *     for i in range(ncpus):
 *         end = start + partition_size
 *         if end > n or i == ncpus - 1:             # <<<<<<<<<<<<<<
 *             end = n
 *         partitions.push_back(pair[int, int](start, end))
 */
    __pyx_t_7 = ((__pyx_v_end > __pyx_v_n) != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = ((__pyx_v_i == (__pyx_v_ncpus - 1)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_6) {

      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":89
 *         end = start + partition_size
 *         if end > n or i == ncpus - 1:
 *             end = n             # <<<<<<<<<<<<<<
 *         partitions.push_back(pair[int, int](start, end))
 *         print start, end
 */
      __pyx_v_end = __pyx_v_n;

      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":88
 *     for i in range(ncpus):
 *         end = start + partition_size
 *         if end > n or i == ncpus - 1:             # <<<<<<<<<<<<<<
 *             end = n
 *         partitions.push_back(pair[int, int](start, end))
 */
    }

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":90
 *         if end > n or i == ncpus - 1:
 *             end = n
 *         partitions.push_back(pair[int, int](start, end))             # <<<<<<<<<<<<<<
 *         print start, end
 *         start = end
 */
    try {
      __pyx_t_8 = std::pair<int,int> (__pyx_v_start, __pyx_v_end);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    try {
      __pyx_v_partitions.push_back(__pyx_t_8);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":91
 *             end = n
 *         partitions.push_back(pair[int, int](start, end))
 *         print start, end             # <<<<<<<<<<<<<<
 *         start = end
 *         output_pairs.push_back(vector[pair[int, int]]())
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_start); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_end); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    if (__Pyx_Print(0, __pyx_t_1, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":92
 *         partitions.push_back(pair[int, int](start, end))
 *         print start, end
 *         start = end             # <<<<<<<<<<<<<<
 *         output_pairs.push_back(vector[pair[int, int]]())
 * 
 */
    __pyx_v_start = __pyx_v_end;

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":93
 *         print start, end
 *         start = end
 *         output_pairs.push_back(vector[pair[int, int]]())             # <<<<<<<<<<<<<<
 * 
 *     for i in prange(ncpus, nogil=True):
 */
    try {
      __pyx_t_9 = std::vector<std::pair<int,int> > ();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    try {
      __pyx_v_output_pairs.push_back(__pyx_t_9);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":95
 *         output_pairs.push_back(vector[pair[int, int]]())
 * 
 *     for i in prange(ncpus, nogil=True):             # <<<<<<<<<<<<<<
 *         fun(partitions[i], ltokens, rtokens, threshold, index, output_pairs[i])
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {
        __pyx_t_4 = __pyx_v_ncpus;
        if (1 == 0) abort();
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_10 = (__pyx_t_4 - 0) / 1;
            if (__pyx_t_10 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #pragma omp for firstprivate(__pyx_v_i) lastprivate(__pyx_v_i)
                    #endif /* _OPENMP */
                    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_10; __pyx_t_5++){
                        {
                            __pyx_v_i = 0 + 1 * __pyx_t_5;

                            /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":96
 * 
 *     for i in prange(ncpus, nogil=True):
 *         fun(partitions[i], ltokens, rtokens, threshold, index, output_pairs[i])             # <<<<<<<<<<<<<<
 * 
 *     for part_pairs in output_pairs:
 */
                            __pyx_f_16py_stringsimjoin_8apply_rf_12jaccard_join_fun((__pyx_v_partitions[__pyx_v_i]), __pyx_v_ltokens, __pyx_v_rtokens, __pyx_v_threshold, __pyx_v_index, (__pyx_v_output_pairs[__pyx_v_i]));
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":95
 *         output_pairs.push_back(vector[pair[int, int]]())
 * 
 *     for i in prange(ncpus, nogil=True):             # <<<<<<<<<<<<<<
 *         fun(partitions[i], ltokens, rtokens, threshold, index, output_pairs[i])
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L10;
        }
        __pyx_L10:;
      }
  }

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":98
 *         fun(partitions[i], ltokens, rtokens, threshold, index, output_pairs[i])
 * 
 *     for part_pairs in output_pairs:             # <<<<<<<<<<<<<<
 *         final_output_pairs.insert(final_output_pairs.end(), part_pairs.begin(), part_pairs.end())
 * 
 */
  __pyx_t_11 = __pyx_v_output_pairs.begin();
  for (;;) {
    if (!(__pyx_t_11 != __pyx_v_output_pairs.end())) break;
    __pyx_t_9 = *__pyx_t_11;
    ++__pyx_t_11;
    __pyx_v_part_pairs = __pyx_t_9;

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":99
 * 
 *     for part_pairs in output_pairs:
 *         final_output_pairs.insert(final_output_pairs.end(), part_pairs.begin(), part_pairs.end())             # <<<<<<<<<<<<<<
 * 
 *     return final_output_pairs
 */
    try {
      __pyx_v_final_output_pairs.insert(__pyx_v_final_output_pairs.end(), __pyx_v_part_pairs.begin(), __pyx_v_part_pairs.end());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":98
 *         fun(partitions[i], ltokens, rtokens, threshold, index, output_pairs[i])
 * 
 *     for part_pairs in output_pairs:             # <<<<<<<<<<<<<<
 *         final_output_pairs.insert(final_output_pairs.end(), part_pairs.begin(), part_pairs.end())
 * 
 */
  }

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":101
 *         final_output_pairs.insert(final_output_pairs.end(), part_pairs.begin(), part_pairs.end())
 * 
 *     return final_output_pairs             # <<<<<<<<<<<<<<
 * 
 * cdef void fun(pair[int, int] partition, vector[vector[int]]& ltokens, vector[vector[int]]& rtokens, double threshold, PositionIndex& index,
 */
  __pyx_r = __pyx_v_final_output_pairs;
  goto __pyx_L0;

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":75
 *     return output_pairs
 * 
 * cpdef vector[pair[int, int]] jaccard_join(vector[vector[int]]& ltokens, vector[vector[int]]& rtokens,             # <<<<<<<<<<<<<<
 *                    double threshold):
 *     print 'l size. : ', ltokens.size(), ' , r size : ', rtokens.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("py_stringsimjoin.apply_rf.jaccard_join.jaccard_join", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_3jaccard_join(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_3jaccard_join(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::vector<std::vector<int> >  __pyx_v_ltokens;
  std::vector<std::vector<int> >  __pyx_v_rtokens;
  double __pyx_v_threshold;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("jaccard_join (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ltokens,&__pyx_n_s_rtokens,&__pyx_n_s_threshold,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ltokens)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rtokens)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("jaccard_join", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("jaccard_join", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "jaccard_join") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_ltokens = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(values[0]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rtokens = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(values[1]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_threshold = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_threshold == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("jaccard_join", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_stringsimjoin.apply_rf.jaccard_join.jaccard_join", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_2jaccard_join(__pyx_self, __pyx_v_ltokens, __pyx_v_rtokens, __pyx_v_threshold);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_2jaccard_join(CYTHON_UNUSED PyObject *__pyx_self, std::vector<std::vector<int> >  __pyx_v_ltokens, std::vector<std::vector<int> >  __pyx_v_rtokens, double __pyx_v_threshold) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("jaccard_join", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(__pyx_f_16py_stringsimjoin_8apply_rf_12jaccard_join_jaccard_join(__pyx_v_ltokens, __pyx_v_rtokens, __pyx_v_threshold, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_stringsimjoin.apply_rf.jaccard_join.jaccard_join", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_stringsimjoin/apply_rf/jaccard_join.pyx":103
 *     return final_output_pairs
 * 
 * cdef void fun(pair[int, int] partition, vector[vector[int]]& ltokens, vector[vector[int]]& rtokens, double threshold, PositionIndex& index,             # <<<<<<<<<<<<<<
 *               vector[pair[int, int]]& output_pairs) nogil:
 *     cdef omap[int, int] candidate_overlap, overlap_threshold_cache
 */

static void __pyx_f_16py_stringsimjoin_8apply_rf_12jaccard_join_fun(std::pair<int,int>  __pyx_v_partition, std::vector<std::vector<int> >  &__pyx_v_ltokens, std::vector<std::vector<int> >  &__pyx_v_rtokens, double __pyx_v_threshold, PositionIndex &__pyx_v_index, std::vector<std::pair<int,int> >  &__pyx_v_output_pairs) {
  std::map<int,int>  __pyx_v_candidate_overlap;
  std::map<int,int>  __pyx_v_overlap_threshold_cache;
  std::vector<std::pair<int,int> >  __pyx_v_candidates;
  std::vector<int>  __pyx_v_tokens;
  std::pair<int,int>  __pyx_v_cand;
  std::pair<int,int>  __pyx_v_entry;
  int __pyx_v_k;
  int __pyx_v_j;
  int __pyx_v_m;
  int __pyx_v_i;
  int __pyx_v_prefix_length;
  int __pyx_v_cand_num_tokens;
  int __pyx_v_current_overlap;
  int __pyx_v_overlap_upper_bound;
  int __pyx_v_size;
  int __pyx_v_size_lower_bound;
  int __pyx_v_size_upper_bound;
  double __pyx_v_sim_score;
  int __pyx_t_1;
  int __pyx_t_2;
  long __pyx_t_3;
  int __pyx_t_4;
  double __pyx_t_5;
  int __pyx_t_6;
  std::vector<std::pair<int,int> > ::iterator __pyx_t_7;
  std::pair<int,int>  __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  std::map<int,int> ::iterator __pyx_t_11;
  std::pair<int,int>  __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":109
 *     cdef vector[int] tokens
 *     cdef pair[int, int] cand, entry
 *     cdef int k=0, j=0, m, i, prefix_length, cand_num_tokens, current_overlap, overlap_upper_bound             # <<<<<<<<<<<<<<
 *     cdef int size, size_lower_bound, size_upper_bound
 *     cdef double sim_score
 */
  __pyx_v_k = 0;
  __pyx_v_j = 0;

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":113
 *     cdef double sim_score
 * 
 *     for i in range(partition.first, partition.second):             # <<<<<<<<<<<<<<
 *         tokens = rtokens[i]
 *         m = tokens.size()
 */
  __pyx_t_1 = __pyx_v_partition.second;
  for (__pyx_t_2 = __pyx_v_partition.first; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":114
 * 
 *     for i in range(partition.first, partition.second):
 *         tokens = rtokens[i]             # <<<<<<<<<<<<<<
 *         m = tokens.size()
 *         prefix_length = <int>(m - ceil(threshold * m) + 1.0)
 */
    __pyx_v_tokens = (__pyx_v_rtokens[__pyx_v_i]);

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":115
 *     for i in range(partition.first, partition.second):
 *         tokens = rtokens[i]
 *         m = tokens.size()             # <<<<<<<<<<<<<<
 *         prefix_length = <int>(m - ceil(threshold * m) + 1.0)
 *         size_lower_bound = <int>ceil(threshold * m)
 */
    __pyx_v_m = __pyx_v_tokens.size();

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":116
 *         tokens = rtokens[i]
 *         m = tokens.size()
 *         prefix_length = <int>(m - ceil(threshold * m) + 1.0)             # <<<<<<<<<<<<<<
 *         size_lower_bound = <int>ceil(threshold * m)
 *         size_upper_bound = <int>floor(m / threshold)
 */
    __pyx_v_prefix_length = ((int)((__pyx_v_m - ceil((__pyx_v_threshold * __pyx_v_m))) + 1.0));

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":117
 *         m = tokens.size()
 *         prefix_length = <int>(m - ceil(threshold * m) + 1.0)
 *         size_lower_bound = <int>ceil(threshold * m)             # <<<<<<<<<<<<<<
 *         size_upper_bound = <int>floor(m / threshold)
 * 
 */
    __pyx_v_size_lower_bound = ((int)ceil((__pyx_v_threshold * __pyx_v_m)));

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":118
 *         prefix_length = <int>(m - ceil(threshold * m) + 1.0)
 *         size_lower_bound = <int>ceil(threshold * m)
 *         size_upper_bound = <int>floor(m / threshold)             # <<<<<<<<<<<<<<
 * 
 *         for size in range(size_lower_bound, size_upper_bound + 1):
 */
    if (unlikely(__pyx_v_threshold == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_size_upper_bound = ((int)floor((__pyx_v_m / __pyx_v_threshold)));

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":120
 *         size_upper_bound = <int>floor(m / threshold)
 * 
 *         for size in range(size_lower_bound, size_upper_bound + 1):             # <<<<<<<<<<<<<<
 *             overlap_threshold_cache[size] = <int>ceil((threshold / (1 + threshold)) * (size + m))
 * 
 */
    __pyx_t_3 = (__pyx_v_size_upper_bound + 1);
    for (__pyx_t_4 = __pyx_v_size_lower_bound; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_size = __pyx_t_4;

      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":121
 * 
 *         for size in range(size_lower_bound, size_upper_bound + 1):
 *             overlap_threshold_cache[size] = <int>ceil((threshold / (1 + threshold)) * (size + m))             # <<<<<<<<<<<<<<
 * 
 *         for j in range(prefix_length):
 */
      __pyx_t_5 = (1.0 + __pyx_v_threshold);
      if (unlikely(__pyx_t_5 == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      (__pyx_v_overlap_threshold_cache[__pyx_v_size]) = ((int)ceil(((__pyx_v_threshold / __pyx_t_5) * (__pyx_v_size + __pyx_v_m))));
    }

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":123
 *             overlap_threshold_cache[size] = <int>ceil((threshold / (1 + threshold)) * (size + m))
 * 
 *         for j in range(prefix_length):             # <<<<<<<<<<<<<<
 *             candidates = index.index[tokens[j]]
 *             for cand in candidates:
 */
    __pyx_t_4 = __pyx_v_prefix_length;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_4; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":124
 * 
 *         for j in range(prefix_length):
 *             candidates = index.index[tokens[j]]             # <<<<<<<<<<<<<<
 *             for cand in candidates:
 *                 current_overlap = candidate_overlap[cand.first]
 */
      __pyx_v_candidates = (__pyx_v_index.index[(__pyx_v_tokens[__pyx_v_j])]);

      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":125
 *         for j in range(prefix_length):
 *             candidates = index.index[tokens[j]]
 *             for cand in candidates:             # <<<<<<<<<<<<<<
 *                 current_overlap = candidate_overlap[cand.first]
 *                 if current_overlap != -1:
 */
      __pyx_t_7 = __pyx_v_candidates.begin();
      for (;;) {
        if (!(__pyx_t_7 != __pyx_v_candidates.end())) break;
        __pyx_t_8 = *__pyx_t_7;
        ++__pyx_t_7;
        __pyx_v_cand = __pyx_t_8;

        /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":126
 *             candidates = index.index[tokens[j]]
 *             for cand in candidates:
 *                 current_overlap = candidate_overlap[cand.first]             # <<<<<<<<<<<<<<
 *                 if current_overlap != -1:
 *                     cand_num_tokens = index.size_vector[cand.first]
 */
        __pyx_v_current_overlap = (__pyx_v_candidate_overlap[__pyx_v_cand.first]);

        /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":127
 *             for cand in candidates:
 *                 current_overlap = candidate_overlap[cand.first]
 *                 if current_overlap != -1:             # <<<<<<<<<<<<<<
 *                     cand_num_tokens = index.size_vector[cand.first]
 * 
 */
        __pyx_t_9 = ((__pyx_v_current_overlap != -1L) != 0);
        if (__pyx_t_9) {

          /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":128
 *                 current_overlap = candidate_overlap[cand.first]
 *                 if current_overlap != -1:
 *                     cand_num_tokens = index.size_vector[cand.first]             # <<<<<<<<<<<<<<
 * 
 *                     # only consider candidates satisfying the size filter
 */
          __pyx_v_cand_num_tokens = (__pyx_v_index.size_vector[__pyx_v_cand.first]);

          /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":132
 *                     # only consider candidates satisfying the size filter
 *                     # condition.
 *                     if size_lower_bound <= cand_num_tokens <= size_upper_bound:             # <<<<<<<<<<<<<<
 * 
 *                         if m - j <= cand_num_tokens - cand.second:
 */
          __pyx_t_9 = (__pyx_v_size_lower_bound <= __pyx_v_cand_num_tokens);
          if (__pyx_t_9) {
            __pyx_t_9 = (__pyx_v_cand_num_tokens <= __pyx_v_size_upper_bound);
          }
          __pyx_t_10 = (__pyx_t_9 != 0);
          if (__pyx_t_10) {

            /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":134
 *                     if size_lower_bound <= cand_num_tokens <= size_upper_bound:
 * 
 *                         if m - j <= cand_num_tokens - cand.second:             # <<<<<<<<<<<<<<
 *                             overlap_upper_bound = m - j
 *                         else:
 */
            __pyx_t_10 = (((__pyx_v_m - __pyx_v_j) <= (__pyx_v_cand_num_tokens - __pyx_v_cand.second)) != 0);
            if (__pyx_t_10) {

              /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":135
 * 
 *                         if m - j <= cand_num_tokens - cand.second:
 *                             overlap_upper_bound = m - j             # <<<<<<<<<<<<<<
 *                         else:
 *                             overlap_upper_bound = cand_num_tokens - cand.second
 */
              __pyx_v_overlap_upper_bound = (__pyx_v_m - __pyx_v_j);

              /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":134
 *                     if size_lower_bound <= cand_num_tokens <= size_upper_bound:
 * 
 *                         if m - j <= cand_num_tokens - cand.second:             # <<<<<<<<<<<<<<
 *                             overlap_upper_bound = m - j
 *                         else:
 */
              goto __pyx_L13;
            }

            /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":137
 *                             overlap_upper_bound = m - j
 *                         else:
 *                             overlap_upper_bound = cand_num_tokens - cand.second             # <<<<<<<<<<<<<<
 * 
 *                         # only consider candidates for which the overlap upper
 */
            /*else*/ {
              __pyx_v_overlap_upper_bound = (__pyx_v_cand_num_tokens - __pyx_v_cand.second);
            }
            __pyx_L13:;

            /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":141
 *                         # only consider candidates for which the overlap upper
 *                         # bound is at least the required overlap.
 *                         if (current_overlap + overlap_upper_bound >=             # <<<<<<<<<<<<<<
 *                                 overlap_threshold_cache[cand_num_tokens]):
 *                             candidate_overlap[cand.first] = current_overlap + 1
 */
            __pyx_t_10 = (((__pyx_v_current_overlap + __pyx_v_overlap_upper_bound) >= (__pyx_v_overlap_threshold_cache[__pyx_v_cand_num_tokens])) != 0);
            if (__pyx_t_10) {

              /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":143
 *                         if (current_overlap + overlap_upper_bound >=
 *                                 overlap_threshold_cache[cand_num_tokens]):
 *                             candidate_overlap[cand.first] = current_overlap + 1             # <<<<<<<<<<<<<<
 *                         else:
 *                             candidate_overlap[cand.first] = -1
 */
              (__pyx_v_candidate_overlap[__pyx_v_cand.first]) = (__pyx_v_current_overlap + 1);

              /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":141
 *                         # only consider candidates for which the overlap upper
 *                         # bound is at least the required overlap.
 *                         if (current_overlap + overlap_upper_bound >=             # <<<<<<<<<<<<<<
 *                                 overlap_threshold_cache[cand_num_tokens]):
 *                             candidate_overlap[cand.first] = current_overlap + 1
 */
              goto __pyx_L14;
            }

            /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":145
 *                             candidate_overlap[cand.first] = current_overlap + 1
 *                         else:
 *                             candidate_overlap[cand.first] = -1             # <<<<<<<<<<<<<<
 * #        print i, candidate_overlap.size()
 *         for entry in candidate_overlap:
 */
            /*else*/ {
              (__pyx_v_candidate_overlap[__pyx_v_cand.first]) = -1;
            }
            __pyx_L14:;

            /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":132
 *                     # only consider candidates satisfying the size filter
 *                     # condition.
 *                     if size_lower_bound <= cand_num_tokens <= size_upper_bound:             # <<<<<<<<<<<<<<
 * 
 *                         if m - j <= cand_num_tokens - cand.second:
 */
          }

          /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":127
 *             for cand in candidates:
 *                 current_overlap = candidate_overlap[cand.first]
 *                 if current_overlap != -1:             # <<<<<<<<<<<<<<
 *                     cand_num_tokens = index.size_vector[cand.first]
 * 
 */
        }

        /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":125
 *         for j in range(prefix_length):
 *             candidates = index.index[tokens[j]]
 *             for cand in candidates:             # <<<<<<<<<<<<<<
 *                 current_overlap = candidate_overlap[cand.first]
 *                 if current_overlap != -1:
 */
      }
    }

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":147
 *                             candidate_overlap[cand.first] = -1
 * #        print i, candidate_overlap.size()
 *         for entry in candidate_overlap:             # <<<<<<<<<<<<<<
 *             if entry.second > 0:
 *                 k += 1
 */
    __pyx_t_11 = __pyx_v_candidate_overlap.begin();
    for (;;) {
      if (!(__pyx_t_11 != __pyx_v_candidate_overlap.end())) break;
      __pyx_t_12 = *__pyx_t_11;
      ++__pyx_t_11;
      __pyx_v_entry = __pyx_t_12;

      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":148
 * #        print i, candidate_overlap.size()
 *         for entry in candidate_overlap:
 *             if entry.second > 0:             # <<<<<<<<<<<<<<
 *                 k += 1
 *                 sim_score = jaccard(ltokens[entry.first], tokens)
 */
      __pyx_t_10 = ((__pyx_v_entry.second > 0) != 0);
      if (__pyx_t_10) {

        /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":149
 *         for entry in candidate_overlap:
 *             if entry.second > 0:
 *                 k += 1             # <<<<<<<<<<<<<<
 *                 sim_score = jaccard(ltokens[entry.first], tokens)
 *                 #print ltokens[entry.first], rtokens[i], entry.second, sim_score
 */
        __pyx_v_k = (__pyx_v_k + 1);

        /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":150
 *             if entry.second > 0:
 *                 k += 1
 *                 sim_score = jaccard(ltokens[entry.first], tokens)             # <<<<<<<<<<<<<<
 *                 #print ltokens[entry.first], rtokens[i], entry.second, sim_score
 *                 if sim_score > threshold:
 */
        __pyx_v_sim_score = __pyx_f_16py_stringsimjoin_8apply_rf_12jaccard_join_jaccard((__pyx_v_ltokens[__pyx_v_entry.first]), __pyx_v_tokens);

        /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":152
 *                 sim_score = jaccard(ltokens[entry.first], tokens)
 *                 #print ltokens[entry.first], rtokens[i], entry.second, sim_score
 *                 if sim_score > threshold:             # <<<<<<<<<<<<<<
 *                     k = k - 1 + 1
 *                     output_pairs.push_back(pair[int, int](entry.first, i))
 */
        __pyx_t_10 = ((__pyx_v_sim_score > __pyx_v_threshold) != 0);
        if (__pyx_t_10) {

          /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":153
 *                 #print ltokens[entry.first], rtokens[i], entry.second, sim_score
 *                 if sim_score > threshold:
 *                     k = k - 1 + 1             # <<<<<<<<<<<<<<
 *                     output_pairs.push_back(pair[int, int](entry.first, i))
 * 
 */
          __pyx_v_k = ((__pyx_v_k - 1) + 1);

          /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":154
 *                 if sim_score > threshold:
 *                     k = k - 1 + 1
 *                     output_pairs.push_back(pair[int, int](entry.first, i))             # <<<<<<<<<<<<<<
 * 
 *         candidate_overlap.clear()
 */
          try {
            __pyx_t_8 = std::pair<int,int> (__pyx_v_entry.first, __pyx_v_i);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          try {
            __pyx_v_output_pairs.push_back(__pyx_t_8);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }

          /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":152
 *                 sim_score = jaccard(ltokens[entry.first], tokens)
 *                 #print ltokens[entry.first], rtokens[i], entry.second, sim_score
 *                 if sim_score > threshold:             # <<<<<<<<<<<<<<
 *                     k = k - 1 + 1
 *                     output_pairs.push_back(pair[int, int](entry.first, i))
 */
        }

        /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":148
 * #        print i, candidate_overlap.size()
 *         for entry in candidate_overlap:
 *             if entry.second > 0:             # <<<<<<<<<<<<<<
 *                 k += 1
 *                 sim_score = jaccard(ltokens[entry.first], tokens)
 */
      }

      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":147
 *                             candidate_overlap[cand.first] = -1
 * #        print i, candidate_overlap.size()
 *         for entry in candidate_overlap:             # <<<<<<<<<<<<<<
 *             if entry.second > 0:
 *                 k += 1
 */
    }

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":156
 *                     output_pairs.push_back(pair[int, int](entry.first, i))
 * 
 *         candidate_overlap.clear()             # <<<<<<<<<<<<<<
 *         overlap_threshold_cache.clear()
 * 
 */
    __pyx_v_candidate_overlap.clear();

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":157
 * 
 *         candidate_overlap.clear()
 *         overlap_threshold_cache.clear()             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_overlap_threshold_cache.clear();
  }

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":103
 *     return final_output_pairs
 * 
 * cdef void fun(pair[int, int] partition, vector[vector[int]]& ltokens, vector[vector[int]]& rtokens, double threshold, PositionIndex& index,             # <<<<<<<<<<<<<<
 *               vector[pair[int, int]]& output_pairs) nogil:
 *     cdef omap[int, int] candidate_overlap, overlap_threshold_cache
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("py_stringsimjoin.apply_rf.jaccard_join.fun", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
}

/* "py_stringsimjoin/apply_rf/jaccard_join.pyx":175
 *     cdef readonly double threshold
 * 
 *     def __init__(self, const vector[vector[int]]& token_vectors, double threshold):             # <<<<<<<<<<<<<<
 *         cdef vector[int] tokens
 *         cdef int prefix_length, token, i, j, m, n=token_vectors.size(), min_len=100000, max_len=0
 */

/* Python wrapper */
static int __pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::vector<std::vector<int> >  __pyx_v_token_vectors;
  double __pyx_v_threshold;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_token_vectors,&__pyx_n_s_threshold,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_token_vectors)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_token_vectors = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(values[0]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_threshold = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_threshold == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_stringsimjoin.apply_rf.jaccard_join.PpositionIndex1.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1___init__(((struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 *)__pyx_v_self), __pyx_v_token_vectors, __pyx_v_threshold);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1___init__(struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 *__pyx_v_self, std::vector<std::vector<int> >  __pyx_v_token_vectors, double __pyx_v_threshold) {
  std::vector<int>  __pyx_v_tokens;
  int __pyx_v_prefix_length;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_min_len;
  int __pyx_v_max_len;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  std::pair<int,int>  __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":177
 *     def __init__(self, const vector[vector[int]]& token_vectors, double threshold):
 *         cdef vector[int] tokens
 *         cdef int prefix_length, token, i, j, m, n=token_vectors.size(), min_len=100000, max_len=0             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             tokens = token_vectors[i]
 */
  __pyx_v_n = __pyx_v_token_vectors.size();
  __pyx_v_min_len = 0x186A0;
  __pyx_v_max_len = 0;

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":178
 *         cdef vector[int] tokens
 *         cdef int prefix_length, token, i, j, m, n=token_vectors.size(), min_len=100000, max_len=0
 *         for i in range(n):             # <<<<<<<<<<<<<<
 *             tokens = token_vectors[i]
 *             m = tokens.size()
 */
  __pyx_t_1 = __pyx_v_n;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":179
 *         cdef int prefix_length, token, i, j, m, n=token_vectors.size(), min_len=100000, max_len=0
 *         for i in range(n):
 *             tokens = token_vectors[i]             # <<<<<<<<<<<<<<
 *             m = tokens.size()
 *             self.size_vector.push_back(m)
 */
    __pyx_v_tokens = (__pyx_v_token_vectors[__pyx_v_i]);

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":180
 *         for i in range(n):
 *             tokens = token_vectors[i]
 *             m = tokens.size()             # <<<<<<<<<<<<<<
 *             self.size_vector.push_back(m)
 *             prefix_length = int(m - ceil(threshold * m) + 1.0)
 */
    __pyx_v_m = __pyx_v_tokens.size();

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":181
 *             tokens = token_vectors[i]
 *             m = tokens.size()
 *             self.size_vector.push_back(m)             # <<<<<<<<<<<<<<
 *             prefix_length = int(m - ceil(threshold * m) + 1.0)
 *             for j in range(prefix_length):
 */
    try {
      __pyx_v_self->size_vector.push_back(__pyx_v_m);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":182
 *             m = tokens.size()
 *             self.size_vector.push_back(m)
 *             prefix_length = int(m - ceil(threshold * m) + 1.0)             # <<<<<<<<<<<<<<
 *             for j in range(prefix_length):
 *                 self.index[tokens[j]].push_back(pair[int, int](i, j))
 */
    __pyx_v_prefix_length = ((int)((__pyx_v_m - ceil((__pyx_v_threshold * __pyx_v_m))) + 1.0));

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":183
 *             self.size_vector.push_back(m)
 *             prefix_length = int(m - ceil(threshold * m) + 1.0)
 *             for j in range(prefix_length):             # <<<<<<<<<<<<<<
 *                 self.index[tokens[j]].push_back(pair[int, int](i, j))
 *             if m > max_len:
 */
    __pyx_t_3 = __pyx_v_prefix_length;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_j = __pyx_t_4;

      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":184
 *             prefix_length = int(m - ceil(threshold * m) + 1.0)
 *             for j in range(prefix_length):
 *                 self.index[tokens[j]].push_back(pair[int, int](i, j))             # <<<<<<<<<<<<<<
 *             if m > max_len:
 *                 max_len = m
 */
      try {
        __pyx_t_5 = std::pair<int,int> (__pyx_v_i, __pyx_v_j);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      try {
        (__pyx_v_self->index[(__pyx_v_tokens[__pyx_v_j])]).push_back(__pyx_t_5);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":185
 *             for j in range(prefix_length):
 *                 self.index[tokens[j]].push_back(pair[int, int](i, j))
 *             if m > max_len:             # <<<<<<<<<<<<<<
 *                 max_len = m
 *             if m < min_len:
 */
    __pyx_t_6 = ((__pyx_v_m > __pyx_v_max_len) != 0);
    if (__pyx_t_6) {

      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":186
 *                 self.index[tokens[j]].push_back(pair[int, int](i, j))
 *             if m > max_len:
 *                 max_len = m             # <<<<<<<<<<<<<<
 *             if m < min_len:
 *                 min_len = m
 */
      __pyx_v_max_len = __pyx_v_m;

      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":185
 *             for j in range(prefix_length):
 *                 self.index[tokens[j]].push_back(pair[int, int](i, j))
 *             if m > max_len:             # <<<<<<<<<<<<<<
 *                 max_len = m
 *             if m < min_len:
 */
    }

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":187
 *             if m > max_len:
 *                 max_len = m
 *             if m < min_len:             # <<<<<<<<<<<<<<
 *                 min_len = m
 *         self.threshold = threshold
 */
    __pyx_t_6 = ((__pyx_v_m < __pyx_v_min_len) != 0);
    if (__pyx_t_6) {

      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":188
 *                 max_len = m
 *             if m < min_len:
 *                 min_len = m             # <<<<<<<<<<<<<<
 *         self.threshold = threshold
 *         self.min_len = min_len
 */
      __pyx_v_min_len = __pyx_v_m;

      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":187
 *             if m > max_len:
 *                 max_len = m
 *             if m < min_len:             # <<<<<<<<<<<<<<
 *                 min_len = m
 *         self.threshold = threshold
 */
    }
  }

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":189
 *             if m < min_len:
 *                 min_len = m
 *         self.threshold = threshold             # <<<<<<<<<<<<<<
 *         self.min_len = min_len
 *         self.max_len = max_len
 */
  __pyx_v_self->threshold = __pyx_v_threshold;

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":190
 *                 min_len = m
 *         self.threshold = threshold
 *         self.min_len = min_len             # <<<<<<<<<<<<<<
 *         self.max_len = max_len
 * 
 */
  __pyx_v_self->min_len = __pyx_v_min_len;

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":191
 *         self.threshold = threshold
 *         self.min_len = min_len
 *         self.max_len = max_len             # <<<<<<<<<<<<<<
 * 
 * cdef double jaccard(const vector[int]& tokens1, const vector[int]& tokens2) nogil:
 */
  __pyx_v_self->max_len = __pyx_v_max_len;

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":175
 *     cdef readonly double threshold
 * 
 *     def __init__(self, const vector[vector[int]]& token_vectors, double threshold):             # <<<<<<<<<<<<<<
 *         cdef vector[int] tokens
 *         cdef int prefix_length, token, i, j, m, n=token_vectors.size(), min_len=100000, max_len=0
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_stringsimjoin.apply_rf.jaccard_join.PpositionIndex1.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_stringsimjoin/apply_rf/jaccard_join.pyx":170
 * 
 * cdef class PpositionIndex1:
 *     cdef readonly omap[int, vector[pair[int, int]]] index             # <<<<<<<<<<<<<<
 *     cdef readonly int min_len, max_len
 *     cdef readonly vector[int] size_vector
 */

/* Python wrapper */
static PyObject *__pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_5index_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_5index_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_5index___get__(((struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_5index___get__(struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_pair_3c_int_2c_int_3e____3e___(__pyx_v_self->index); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_stringsimjoin.apply_rf.jaccard_join.PpositionIndex1.index.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_stringsimjoin/apply_rf/jaccard_join.pyx":171
 * cdef class PpositionIndex1:
 *     cdef readonly omap[int, vector[pair[int, int]]] index
 *     cdef readonly int min_len, max_len             # <<<<<<<<<<<<<<
 *     cdef readonly vector[int] size_vector
 *     cdef readonly double threshold
 */

/* Python wrapper */
static PyObject *__pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_7min_len_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_7min_len_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_7min_len___get__(((struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_7min_len___get__(struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->min_len); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_stringsimjoin.apply_rf.jaccard_join.PpositionIndex1.min_len.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_7max_len_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_7max_len_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_7max_len___get__(((struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_7max_len___get__(struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->max_len); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_stringsimjoin.apply_rf.jaccard_join.PpositionIndex1.max_len.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_stringsimjoin/apply_rf/jaccard_join.pyx":172
 *     cdef readonly omap[int, vector[pair[int, int]]] index
 *     cdef readonly int min_len, max_len
 *     cdef readonly vector[int] size_vector             # <<<<<<<<<<<<<<
 *     cdef readonly double threshold
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_11size_vector_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_11size_vector_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_11size_vector___get__(((struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_11size_vector___get__(struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_int(__pyx_v_self->size_vector); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_stringsimjoin.apply_rf.jaccard_join.PpositionIndex1.size_vector.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_stringsimjoin/apply_rf/jaccard_join.pyx":173
 *     cdef readonly int min_len, max_len
 *     cdef readonly vector[int] size_vector
 *     cdef readonly double threshold             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, const vector[vector[int]]& token_vectors, double threshold):
 */

/* Python wrapper */
static PyObject *__pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_9threshold_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_9threshold_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_9threshold___get__(((struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_9threshold___get__(struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->threshold); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_stringsimjoin.apply_rf.jaccard_join.PpositionIndex1.threshold.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_stringsimjoin/apply_rf/jaccard_join.pyx":193
 *         self.max_len = max_len
 * 
 * cdef double jaccard(const vector[int]& tokens1, const vector[int]& tokens2) nogil:             # <<<<<<<<<<<<<<
 *     cdef int i=0, j=0, size1 = tokens1.size(), size2 = tokens2.size()
 *     cdef int sum_of_size = size1 + size2
 */

static double __pyx_f_16py_stringsimjoin_8apply_rf_12jaccard_join_jaccard(std::vector<int>  const &__pyx_v_tokens1, std::vector<int>  const &__pyx_v_tokens2) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_size1;
  int __pyx_v_size2;
  int __pyx_v_sum_of_size;
  int __pyx_v_overlap;
  double __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":194
 * 
 * cdef double jaccard(const vector[int]& tokens1, const vector[int]& tokens2) nogil:
 *     cdef int i=0, j=0, size1 = tokens1.size(), size2 = tokens2.size()             # <<<<<<<<<<<<<<
 *     cdef int sum_of_size = size1 + size2
 *     if sum_of_size == 0:
 */
  __pyx_v_i = 0;
  __pyx_v_j = 0;
  __pyx_v_size1 = __pyx_v_tokens1.size();
  __pyx_v_size2 = __pyx_v_tokens2.size();

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":195
 * cdef double jaccard(const vector[int]& tokens1, const vector[int]& tokens2) nogil:
 *     cdef int i=0, j=0, size1 = tokens1.size(), size2 = tokens2.size()
 *     cdef int sum_of_size = size1 + size2             # <<<<<<<<<<<<<<
 *     if sum_of_size == 0:
 *         return 1.0
 */
  __pyx_v_sum_of_size = (__pyx_v_size1 + __pyx_v_size2);

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":196
 *     cdef int i=0, j=0, size1 = tokens1.size(), size2 = tokens2.size()
 *     cdef int sum_of_size = size1 + size2
 *     if sum_of_size == 0:             # <<<<<<<<<<<<<<
 *         return 1.0
 *     if size1 == 0 or size2 == 0:
 */
  __pyx_t_1 = ((__pyx_v_sum_of_size == 0) != 0);
  if (__pyx_t_1) {

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":197
 *     cdef int sum_of_size = size1 + size2
 *     if sum_of_size == 0:
 *         return 1.0             # <<<<<<<<<<<<<<
 *     if size1 == 0 or size2 == 0:
 *         return 0.0
 */
    __pyx_r = 1.0;
    goto __pyx_L0;

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":196
 *     cdef int i=0, j=0, size1 = tokens1.size(), size2 = tokens2.size()
 *     cdef int sum_of_size = size1 + size2
 *     if sum_of_size == 0:             # <<<<<<<<<<<<<<
 *         return 1.0
 *     if size1 == 0 or size2 == 0:
 */
  }

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":198
 *     if sum_of_size == 0:
 *         return 1.0
 *     if size1 == 0 or size2 == 0:             # <<<<<<<<<<<<<<
 *         return 0.0
 *     cdef int overlap = 0
 */
  __pyx_t_2 = ((__pyx_v_size1 == 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_size2 == 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":199
 *         return 1.0
 *     if size1 == 0 or size2 == 0:
 *         return 0.0             # <<<<<<<<<<<<<<
 *     cdef int overlap = 0
 *     while i < size1 and j < size2:
 */
    __pyx_r = 0.0;
    goto __pyx_L0;

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":198
 *     if sum_of_size == 0:
 *         return 1.0
 *     if size1 == 0 or size2 == 0:             # <<<<<<<<<<<<<<
 *         return 0.0
 *     cdef int overlap = 0
 */
  }

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":200
 *     if size1 == 0 or size2 == 0:
 *         return 0.0
 *     cdef int overlap = 0             # <<<<<<<<<<<<<<
 *     while i < size1 and j < size2:
 *         if tokens1[i] == tokens2[j]:
 */
  __pyx_v_overlap = 0;

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":201
 *         return 0.0
 *     cdef int overlap = 0
 *     while i < size1 and j < size2:             # <<<<<<<<<<<<<<
 *         if tokens1[i] == tokens2[j]:
 *             overlap += 1
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_i < __pyx_v_size1) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_j < __pyx_v_size2) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L9_bool_binop_done:;
    if (!__pyx_t_1) break;

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":202
 *     cdef int overlap = 0
 *     while i < size1 and j < size2:
 *         if tokens1[i] == tokens2[j]:             # <<<<<<<<<<<<<<
 *             overlap += 1
 *             i += 1
 */
    __pyx_t_1 = (((__pyx_v_tokens1[__pyx_v_i]) == (__pyx_v_tokens2[__pyx_v_j])) != 0);
    if (__pyx_t_1) {

      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":203
 *     while i < size1 and j < size2:
 *         if tokens1[i] == tokens2[j]:
 *             overlap += 1             # <<<<<<<<<<<<<<
 *             i += 1
 *             j += 1
 */
      __pyx_v_overlap = (__pyx_v_overlap + 1);

      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":204
 *         if tokens1[i] == tokens2[j]:
 *             overlap += 1
 *             i += 1             # <<<<<<<<<<<<<<
 *             j += 1
 *         elif tokens1[i] < tokens2[j]:
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":205
 *             overlap += 1
 *             i += 1
 *             j += 1             # <<<<<<<<<<<<<<
 *         elif tokens1[i] < tokens2[j]:
 *             i += 1
 */
      __pyx_v_j = (__pyx_v_j + 1);

      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":202
 *     cdef int overlap = 0
 *     while i < size1 and j < size2:
 *         if tokens1[i] == tokens2[j]:             # <<<<<<<<<<<<<<
 *             overlap += 1
 *             i += 1
 */
      goto __pyx_L11;
    }

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":206
 *             i += 1
 *             j += 1
 *         elif tokens1[i] < tokens2[j]:             # <<<<<<<<<<<<<<
 *             i += 1
 *         else:
 */
    __pyx_t_1 = (((__pyx_v_tokens1[__pyx_v_i]) < (__pyx_v_tokens2[__pyx_v_j])) != 0);
    if (__pyx_t_1) {

      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":207
 *             j += 1
 *         elif tokens1[i] < tokens2[j]:
 *             i += 1             # <<<<<<<<<<<<<<
 *         else:
 *             j += 1
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":206
 *             i += 1
 *             j += 1
 *         elif tokens1[i] < tokens2[j]:             # <<<<<<<<<<<<<<
 *             i += 1
 *         else:
 */
      goto __pyx_L11;
    }

    /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":209
 *             i += 1
 *         else:
 *             j += 1             # <<<<<<<<<<<<<<
 *     return (overlap * 1.0) / (sum_of_size - overlap)
 */
    /*else*/ {
      __pyx_v_j = (__pyx_v_j + 1);
    }
    __pyx_L11:;
  }

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":210
 *         else:
 *             j += 1
 *     return (overlap * 1.0) / (sum_of_size - overlap)             # <<<<<<<<<<<<<<
 */
  __pyx_t_3 = (__pyx_v_overlap * 1.0);
  __pyx_t_4 = (__pyx_v_sum_of_size - __pyx_v_overlap);
  if (unlikely(__pyx_t_4 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = (__pyx_t_3 / __pyx_t_4);
  goto __pyx_L0;

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":193
 *         self.max_len = max_len
 * 
 * cdef double jaccard(const vector[int]& tokens1, const vector[int]& tokens2) nogil:             # <<<<<<<<<<<<<<
 *     cdef int i=0, j=0, size1 = tokens1.size(), size2 = tokens2.size()
 *     cdef int sum_of_size = size1 + size2
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("py_stringsimjoin.apply_rf.jaccard_join.jaccard", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "pair.to_py":180
 * 
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return X_to_py(p.first), Y_to_py(p.second)
 * 
 */

static PyObject *__pyx_convert_pair_to_py_int____int(std::pair<int,int>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_int____int", 0);

  /* "pair.to_py":181
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(const pair[X,Y]& p):
 *     return X_to_py(p.first), Y_to_py(p.second)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":180
 * 
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return X_to_py(p.first), Y_to_py(p.second)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_int____int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(const std::vector<std::pair<int,int> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_pair_to_py_int____int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "map.to_py":227
 * 
 * @cname("__pyx_convert_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_pair_3c_int_2c_int_3e____3e___")
 * cdef object __pyx_convert_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_pair_3c_int_2c_int_3e____3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

static PyObject *__pyx_convert_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_pair_3c_int_2c_int_3e____3e___(std::map<int,std::vector<std::pair<int,int> > >  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::map<int,std::vector<std::pair<int,int> > > ::value_type const *__pyx_v_key_value;
  std::map<int,std::vector<std::pair<int,int> > > ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_pair_3c_int_2c_int_3e____3e___", 0);

  /* "map.to_py":228
 * @cname("__pyx_convert_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_pair_3c_int_2c_int_3e____3e___")
 * cdef object __pyx_convert_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_pair_3c_int_2c_int_3e____3e___(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":230
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":231
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "map.to_py":232
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":233
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":234
 *         key_value = &cython.operator.dereference(iter)
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 */
    (++__pyx_v_iter);
  }

  /* "map.to_py":235
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":227
 * 
 * @cname("__pyx_convert_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_pair_3c_int_2c_int_3e____3e___")
 * cdef object __pyx_convert_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_pair_3c_int_2c_int_3e____3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_pair_3c_int_2c_int_3e____3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *__pyx_v_o) {
  std::vector<int>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_int", 0);

  /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":52
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_item); if (unlikely(__pyx_t_5 == -1 && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":53
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":50
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::vector<int> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(PyObject *__pyx_v_o) {
  std::vector<std::vector<int> >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::vector<int> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::vector<int>  __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___", 0);

  /* "vector.from_py":52
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":53
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_vector_from_py_int(__pyx_v_item); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":52
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":54
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":50
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 *)o);
  new((void*)&(p->index)) std::map<int,std::vector<std::pair<int,int> > > ();
  new((void*)&(p->size_vector)) std::vector<int> ();
  return o;
}

static void __pyx_tp_dealloc_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1(PyObject *o) {
  struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 *p = (struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->index);
  __Pyx_call_destructor(p->size_vector);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_index(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_5index_1__get__(o);
}

static PyObject *__pyx_getprop_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_min_len(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_7min_len_1__get__(o);
}

static PyObject *__pyx_getprop_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_max_len(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_7max_len_1__get__(o);
}

static PyObject *__pyx_getprop_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_size_vector(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_11size_vector_1__get__(o);
}

static PyObject *__pyx_getprop_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_threshold(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_9threshold_1__get__(o);
}

static PyMethodDef __pyx_methods_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1[] = {
  {(char *)"index", __pyx_getprop_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_index, 0, 0, 0},
  {(char *)"min_len", __pyx_getprop_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_min_len, 0, 0, 0},
  {(char *)"max_len", __pyx_getprop_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_max_len, 0, 0, 0},
  {(char *)"size_vector", __pyx_getprop_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_size_vector, 0, 0, 0},
  {(char *)"threshold", __pyx_getprop_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_threshold, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_stringsimjoin.apply_rf.jaccard_join.PpositionIndex1", /*tp_name*/
  sizeof(struct __pyx_obj_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_15PpositionIndex1_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"jjaccard_join1", (PyCFunction)__pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_1jjaccard_join1, METH_VARARGS|METH_KEYWORDS, 0},
  {"jaccard_join", (PyCFunction)__pyx_pw_16py_stringsimjoin_8apply_rf_12jaccard_join_3jaccard_join, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "jaccard_join",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_kp_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 0},
  {&__pyx_kp_s_l_size, __pyx_k_l_size, sizeof(__pyx_k_l_size), 0, 0, 1, 0},
  {&__pyx_n_s_ltokens, __pyx_k_ltokens, sizeof(__pyx_k_ltokens), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_kp_s_part_size, __pyx_k_part_size, sizeof(__pyx_k_part_size), 0, 0, 1, 0},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_kp_s_r_size, __pyx_k_r_size, sizeof(__pyx_k_r_size), 0, 0, 1, 0},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rtokens, __pyx_k_rtokens, sizeof(__pyx_k_rtokens), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_threshold, __pyx_k_threshold, sizeof(__pyx_k_threshold), 0, 0, 1, 1},
  {&__pyx_n_s_token_vectors, __pyx_k_token_vectors, sizeof(__pyx_k_token_vectors), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  /* InitThreads.init */
  #ifdef WITH_THREAD
PyEval_InitThreads();
#endif

if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initjaccard_join(void); /*proto*/
PyMODINIT_FUNC initjaccard_join(void)
#else
PyMODINIT_FUNC PyInit_jaccard_join(void); /*proto*/
PyMODINIT_FUNC PyInit_jaccard_join(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_jaccard_join(void)", 0);
  if (__Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("jaccard_join", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_py_stringsimjoin__apply_rf__jaccard_join) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "py_stringsimjoin.apply_rf.jaccard_join")) {
      if (unlikely(PyDict_SetItemString(modules, "py_stringsimjoin.apply_rf.jaccard_join", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("jaccard_join", (void (*)(void))__pyx_f_16py_stringsimjoin_8apply_rf_12jaccard_join_jaccard_join, "std::vector<std::pair<int,int> >  (std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, double, int __pyx_skip_dispatch)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PpositionIndex1", (PyObject *)&__pyx_type_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1 = &__pyx_type_16py_stringsimjoin_8apply_rf_12jaccard_join_PpositionIndex1;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif

  /* "py_stringsimjoin/apply_rf/jaccard_join.pyx":2
 * 
 * from cython.parallel import prange             # <<<<<<<<<<<<<<
 * 
 * from libc.math cimport ceil, floor, round
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":50
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init py_stringsimjoin.apply_rf.jaccard_join", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init py_stringsimjoin.apply_rf.jaccard_join");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#endif
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
